{
  "compatibilityLevel": 1567,
  "model": {
    "annotations": [
      {
        "name": "PBI_QueryOrder",
        "value": "[\"DataFiles_Cubes\",\"DataFiles_Dimensions\",\"DataFiles_RulesAndProcesses\",\"DataFiles_MessageLog\",\"FileExtentions\",\"KeyWords\",\"01 MODE\",\"02 CONNECTION TYPE\",\"03 CONFIG PATH\",\"11 HTTP(S)://HOST:PORT\",\"12 LOGIN\",\"13 PASSWORD\",\"14 NAMESPACE\",\"21 MAX TREE PATHS COUNT\",\"22 ALIASES\",\"fn_extractFunctionEntries\",\"xDel_fn_getRelatedObjects\",\"fn_calcMaxTreeDepth\",\"fn_prepareCodeContent\",\"xDel_fn_createHierarchyPath_ByList\",\"fn_createHierarchyPath\",\"fn_nestedExpressionsCount\",\"Source_Rules\",\"Source_Processes\",\"Configuration\",\"CubeDimensions\",\"Cubes\",\"Dimensions\",\"DimensionAttributes\",\"DimensionElements\",\"ElementAliases\",\"Users\",\"UserGroups\",\"Source_MessageLog\",\"FeedersProcessing\",\"ModelElapsedTime\",\"Source_TransactionLog\",\"TransactionLog\",\"TransactionLogDimensions\",\"CubeSecurity\",\"CubeStats\",\"UserStats\",\"ServerStats\",\"PerformanceStats\",\"xDel_Tree:Rules:Target<Source\",\"Tree:Rules:Target<Source\",\"Tree:Rules:Source>Target\",\"Tree:Rules:Details\",\"Tree:Feeders:Source>Target\",\"Tree:Feeders:Target<Source\",\"Tree:Processes:Source>Target\",\"Tree:Processes:Target<Source\",\"CubeProcessesRelation\",\"xDel_TabulateCube\",\"xDel_REST_TMV\",\"xDel_RESTs\",\"xDel_HttpRequest\",\"xDel_createHierarchyPath_ByList\",\"xDel_createHierarchyPath_ByMap\",\"xDel_RuleProcessText\",\"xDel_prepareCodeContent\",\"xDel_extractFunctionEntries\",\"xDel_Text_BetweenOuterDelimiters\",\"List_ItemsByPositions\",\"List_Upper\",\"Amount measures\",\"System measures\",\"SysName\",\"SysMessageLog\",\"SysHttpRequests\",\"SysHttpRequestData\",\"SysHttpRequestLog\",\"SysLastRefresh\",\"SysConfigStatus\",\"Text_ReplaceSubstring\",\"Text_ContainsAnyOf\",\"Text_BetweenOuterDelimiters\",\"LoadXMLConnectionConfig\",\"LoadXMLSettingsConfig\",\"ConnectionConfig\",\"SettingsConfig\",\"fn_getRequestNo\",\"fn_sendHttpRequest\",\"fn_requestCubeData\",\"sREST_Rules\",\"sREST_Processes\",\"sREST_Configuration\",\"sREST_Server\",\"sREST_CubeDimensions\",\"sREST_DimensionAttributes\",\"sREST_DimensionElements\",\"sREST_Users\",\"sREST_}ClientGroups\",\"sREST_}CubeSecurity\",\"fn_tabulateCubeData\",\"sREST_}ElementAttributes_}Groups\",\"sREST_}StatsByCube\",\"sREST_}StatsByClient\",\"sREST_}StatsForServer\",\"sREST_MessageLog\",\"sREST_TransactionLog\",\"SettingsConfigDefault\",\"Definitions\",\"Table_TransformAllColumns\",\"Table_ExpandAnyColumn\",\"CubesTopN\",\"fn_reverseHierarchy\",\"fn_FlattenHierarchy (unused)\",\"fn_transformTimeIntervalsToDateTime\",\"fn_aggregateMTimeIntervalsToCurrentHour\",\"fn_convertUTCtoLocalTimeZone\",\"fn_isSuccessfulHttpRequest\",\"SysReportStatus\",\"DataFiles_TransactionLog\",\"MemoryMetrics\",\"MetricsTimeScale\",\"Value_SafeDivision\",\"xDel_Query1\",\"SysStatusNo\",\"xDel_Query2\",\"31 DATA FILES PATH\",\"32 LOG FILES PATH\",\"fn_getProcessVariablesDict\"]"
      },
      {
        "name": "__PBI_TimeIntelligenceEnabled",
        "value": "1"
      },
      {
        "name": "PBIDesktopVersion",
        "value": "2.124.1052.0 (23.12)"
      },
      {
        "name": "__TEdtr",
        "value": "1"
      },
      {
        "name": "PBI_ProTooling",
        "value": "[\"DevMode\"]"
      }
    ],
    "culture": "en-US",
    "cultures": [
      {
        "name": "en-US",
        "linguisticMetadata": {
          "content": {
            "DynamicImprovement": "HighConfidence",
            "Entities": {
              "amount_measure": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "amount measure": {
                      "State": "Generated"
                    }
                  },
                  {
                    "amount degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "amount quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "amount quota": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "amount extent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "amount amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "amount portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "amount ration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "amount size": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "amount_measure.TopN_cubes_value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "TopN Cubes: Size in memory"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "TopN cubes value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "topn cube assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "topn cube worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "topn cube price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "topn cube cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "topn cube charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "topn cube rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "topn cube importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "topn cube significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "topn cube usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "topn cube consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  }
                ]
              },
              "amount_measure.cells_in_cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Cells in Cube"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cells in cube": {
                      "State": "Generated"
                    }
                  },
                  {
                    "in cube": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "cells": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "lockup in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "lockup": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "cubicle in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "booth in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "compartment in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.468
                    }
                  },
                  {
                    "chamber in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.468
                    }
                  },
                  {
                    "cubicle": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "booth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "unit in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.458
                    }
                  },
                  {
                    "sect in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.458
                    }
                  }
                ]
              },
              "amount_measure.cube_browse_depth": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "HierarchyBrowseDepth"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube browse depth": {
                      "State": "Generated"
                    }
                  },
                  {
                    "depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "browse depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "cube browse complexity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse penetration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse profundity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse deepness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse wisdom": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse seriousness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "cube browse gravity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "browse complexity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "browse penetration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "browse profundity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  }
                ]
              },
              "amount_measure.cubes_path_count": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Cubes: Target<Source"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cubes path count": {
                      "State": "Generated"
                    }
                  },
                  {
                    "path count": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "cube path amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.739
                    }
                  },
                  {
                    "path amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "amount_measure.cubes_proc_count": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Cubes < Proс Target < Proc Source"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cubes proc. count": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube proc. amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.748
                    }
                  }
                ]
              },
              "amount_measure.dim_hierarchy_browse_depth": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "DimHierarchyBrowseDepth"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dim hierarchy browse depth": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DimHierarchyBrowseDepth": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "browse depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "hierarchy browse depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "dim hierarchy browse complexity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse penetration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse profundity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse deepness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse wisdom": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse seriousness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy browse gravity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "hierarchy browse complexity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "hierarchy browse penetration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "hierarchy browse profundity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  }
                ]
              },
              "amount_measure.dim_hierarchy_max_depth": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "DimHierarchyMaxDepth"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dim hierarchy max depth": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DimHierarchyMaxDepth": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "max depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "hierarchy max depth": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "dim hierarchy maximum depth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.599
                    }
                  },
                  {
                    "hierarchy maximum depth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "maximum depth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "dim hierarchy max complexity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max penetration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max profundity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max deepness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max wisdom": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max seriousness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  },
                  {
                    "dim hierarchy max gravity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.514
                    }
                  }
                ]
              },
              "amount_measure.dimensions_in_cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Dimensions in Cube"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimensions in cube": {
                      "State": "Generated"
                    }
                  },
                  {
                    "in cube": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "dimensions": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "extent in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "magnitude in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "size in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "scope in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "proportion in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "extent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "magnitude": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "measurement in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "length in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  },
                  {
                    "height in cube": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.482
                    }
                  }
                ]
              },
              "amount_measure.dummy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Dummy"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "dummy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "imitation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fake": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mock": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "replica": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mannequin": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "figure": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "form": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "amount_measure.element_index": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Element Index"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element index": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementIndex": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "index": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "element directory": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element catalogue": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element catalog": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element guide": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element file": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element table": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "directory": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "catalogue": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "catalog": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "guide": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "amount_measure.element_level": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Element Level"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element level": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementLevel": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "level": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "element quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "element threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "element amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element rank": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element tier": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  }
                ]
              },
              "amount_measure.hierarchy_elements_count": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Elements in Hierarchy"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "elements in hierarchy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "in hierarchy": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "elements": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "rudiment in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "basics in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "origin in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "fundamental in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "essential in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "foundation in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "feature in hierarchy": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "rudiment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "basics": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "origin": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  }
                ]
              },
              "amount_measure.performance_measure": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Cube Memory"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "performance measure": {
                      "State": "Generated"
                    }
                  },
                  {
                    "performance degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance quota": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance extent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance ration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance size": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "amount_measure.unique_cubes": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "Cubes"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "unique cubes": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cubes": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  }
                ]
              },
              "amount_measure.v_Cells_in_Cube_FormatString_cells_in_cube_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Cells in Cube FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cells in cube FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "_ lockup in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ cubicle in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ booth in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ compartment in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.479
                    }
                  },
                  {
                    "_ chamber in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.479
                    }
                  },
                  {
                    "_ unit in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.469
                    }
                  },
                  {
                    "_ sect in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.469
                    }
                  },
                  {
                    "_ faction in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.469
                    }
                  },
                  {
                    "_ offshoot in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.469
                    }
                  },
                  {
                    "_ group in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.455
                    }
                  }
                ]
              },
              "amount_measure.v_Cube_Browse_Depth_FormatString_cube_browse_depth_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Cube Browse Depth FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cube browse depth FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_Cubes_Path_Count_FormatString_cubes_path_count_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Cubes Path Count FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cubes path count FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "_cube path amount formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.605
                    }
                  }
                ]
              },
              "amount_measure.v_Cubes_Proc__Count_FormatString_cubes_proc__count_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Cubes Proc. Count FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cubes proc. count FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_DEL_Performance_Measure_FormatString_DEL_performance_measure_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_DEL Performance Measure FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_DEL performance measure FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_DEL_TopN_Cubes_Value_FormatString_DEL_TopN_cubes_value_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_DEL TopN Cubes Value FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_DEL TopN cubes value FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_DEL___of_Total_FormatString_DEL__of_total_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_DEL % of Total FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_DEL % of total FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_DimHierarchyBrowseDepth_FormatString_DimHierarchyBrowseDepth_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_DimHierarchyBrowseDepth FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_DimHierarchyBrowseDepth FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_DimHierarchyMaxDepth_FormatString_DimHierarchyMaxDepth_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_DimHierarchyMaxDepth FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_DimHierarchyMaxDepth FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_Dimensions_in_Cube_FormatString_dimensions_in_cube_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Dimensions in Cube FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_dimensions in cube FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "_ extent in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ magnitude in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ size in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ scope in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ proportion in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ measurement in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ length in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ height in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ width in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ breadth in cube formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  }
                ]
              },
              "amount_measure.v_ElementIndex_FormatString_ElementIndex_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_ElementIndex FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_ElementIndex FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_ElementLevel_FormatString_ElementLevel_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_ElementLevel FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_ElementLevel FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_Elements_in_Hierarchy_FormatString_elements_in_hierarchy_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Elements in Hierarchy FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_elements in hierarchy FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "_ rudiment in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ basics in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ origin in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.52
                    }
                  },
                  {
                    "_ fundamental in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ essential in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ foundation in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ feature in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.504
                    }
                  },
                  {
                    "_ division in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.494
                    }
                  },
                  {
                    "_ component in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.479
                    }
                  },
                  {
                    "_ part in hierarchy formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.479
                    }
                  }
                ]
              },
              "amount_measure.v_Performance_Measure_FormatString_performance_measure_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Performance Measure FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_performance measure FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_TopN_Cubes_Value_FormatString_TopN_cubes_value_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_TopN Cubes Value FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_TopN cubes value FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_Unique_Cubes_FormatString_unique_cubes_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Unique Cubes FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_unique cubes FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_Unique_Dimensions_FormatString_unique_dimensions_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_Unique Dimensions FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_unique dimensions FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_User_Groups_Count_FormatString_user_groups_count_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_User Groups Count FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_user groups count FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "_user group amount formatstring": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.605
                    }
                  }
                ]
              },
              "amount_measure.v__tm1_FormatString__tm1_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "__tm1 FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "__tm1 FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v__tm2_FormatString__tm2_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "__tm2 FormatString"
                  }
                },
                "Hidden": true,
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "__tm2 FormatString": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  }
                ]
              },
              "amount_measure.v_tm1_tm1": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_tm1"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "_tm1": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "amount_measure.v_tm2_tm2": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Amount measures",
                    "ConceptualProperty": "_tm2"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "_tm2": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  }
                ]
              },
              "configuration": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Configuration"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "configuration": {
                      "State": "Generated"
                    }
                  },
                  {
                    "formation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "conformation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "arrangement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "alignment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "outline": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "structure": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "relationship": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "organization": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "construction": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "makeup": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "configuration.name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Configuration",
                    "ConceptualProperty": "Name"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "title": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "label": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "tag": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  }
                ]
              },
              "configuration.value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Configuration",
                    "ConceptualProperty": "Value"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "constant": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Definitions"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "constant": {
                      "State": "Generated"
                    }
                  },
                  {
                    "steady": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "stable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "even": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "regular": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "uniform": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "constant.c_others": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Definitions",
                    "ConceptualProperty": "cOthers"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "c others": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cOthers": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "others": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  }
                ]
              },
              "constant.dummy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Definitions",
                    "ConceptualProperty": "Dummy"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "dummy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "imitation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fake": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mock": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "replica": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mannequin": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "figure": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "form": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "constant.v_cOthers_FormatString_cOthers_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Definitions",
                    "ConceptualProperty": "_cOthers FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cOthers FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Cubes"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Cubes",
                    "ConceptualProperty": "Cube"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube name": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube_dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeDimensions"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "CubeDimensions": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "cube measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "cube length": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "cube height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "cube width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "cube breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "cube aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "cube element": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "cube facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.461
                    }
                  },
                  {
                    "cube feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.461
                    }
                  },
                  {
                    "cube factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.461
                    }
                  }
                ]
              },
              "cube_dimension.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeDimensions",
                    "ConceptualProperty": "Cube"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube_dimension.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeDimensions",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "Dimension / Hierarchy": {
                      "Source": {
                        "Agent": "PowerBI.VisualColumnRename",
                        "Type": "External"
                      },
                      "State": "Suggested",
                      "Weight": 0.9
                    }
                  }
                ]
              },
              "cube_indicators_stat": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube indicators stat": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube indicator stat": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "CubeIndicatorsStat": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "stat": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "indicators stat": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "indicator stat": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.7566
                    }
                  }
                ]
              },
              "cube_indicators_stat.TimeIntervals_hierarchy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "TimeIntervals Hierarchy"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "TimeIntervals hierarchy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TimeInterval hierarchy": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "timeinterval ladder": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "timeinterval grading": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "timeinterval order": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "timeinterval pyramid": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "cube_indicators_stat.TimeIntervals_hierarchy.time_interval": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "TimeIntervals Hierarchy",
                    "HierarchyLevel": "TimeIntervals"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "time interval": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TimeIntervals": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "interval": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "duration interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "interval interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "moment interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "period interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "timetable interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "time intermission": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "time interlude": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "intermission": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "interlude": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "time break": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "cube_indicators_stat.TimeIntervals_hierarchy.value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "TimeIntervals Hierarchy",
                    "HierarchyLevel": "Value"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "cube_indicators_stat.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "Cube"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "date time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DateTime": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  },
                  {
                    "date duration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "date interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "date moment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "date period": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "date timetable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "moment time": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "period time": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time.variation.date_hierarchy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "Date Hierarchy",
                    "VariationSet": "Variation",
                    "VariationSource": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "date hierarchy time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date hierarchy": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "hierarchy time": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time.variation.date_hierarchy.day": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Day",
                    "VariationSet": "Variation",
                    "VariationSource": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "day time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "day": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date time day": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time day": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "day duration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "day interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "day moment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "day period": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "day timetable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "moment time day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "date duration day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "date interval day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "date moment day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "duration day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time.variation.date_hierarchy.month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Month",
                    "VariationSet": "Variation",
                    "VariationSource": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "month time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date time month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time month": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "date time mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "month duration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "month interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "month moment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "time mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "month period": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "month timetable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "moment time month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "date duration month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time.variation.date_hierarchy.quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Quarter",
                    "VariationSet": "Variation",
                    "VariationSource": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "quarter time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date time quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time quarter": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "date time qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.846
                    }
                  },
                  {
                    "time qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.833
                    }
                  },
                  {
                    "qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.818
                    }
                  },
                  {
                    "quarter duration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "quarter interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "quarter moment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "quarter period": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "quarter timetable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "qtr time": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.667
                    }
                  },
                  {
                    "moment time quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "cube_indicators_stat.date_time.variation.date_hierarchy.year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Year",
                    "VariationSet": "Variation",
                    "VariationSource": "DateTime"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "year time": {
                      "State": "Generated"
                    }
                  },
                  {
                    "year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date time year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time year": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "date time yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "year duration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "year interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "year moment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "time yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "year period": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "year timetable": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "moment time year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "date duration year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  }
                ]
              },
              "cube_indicators_stat.hours_offset": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "HoursOffset"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "hours offset": {
                      "State": "Generated"
                    }
                  },
                  {
                    "hour offset": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "HoursOffset": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "offset": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "hour equalizer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "hour compensation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "equalizer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "compensation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "hour counterbalance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "hour balance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "hour counterpoise": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "hour equipoise": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "hour counterweight": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "counterbalance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "cube_indicators_stat.indicator": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "Indicator"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "indicator": {
                      "State": "Generated"
                    }
                  },
                  {
                    "pointer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "needle": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "gage": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "gauge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "dial": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "meter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "marker": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "statistic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "sign": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "guide": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "cube_indicators_stat.time_interval": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "TimeIntervals"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "time interval": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TimeIntervals": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "interval": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "duration interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "interval interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "moment interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "period interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "timetable interval": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "time intermission": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "time interlude": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "intermission": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "interlude": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "time break": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "cube_indicators_stat.value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeStats",
                    "ConceptualProperty": "Value"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "cube_processes_relation": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeProcessesRelation"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube processes relation": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube process relation": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "CubeProcessesRelation": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "relation": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "processes relation": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "process relation": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.7566
                    }
                  },
                  {
                    "cube process relative": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.492
                    }
                  },
                  {
                    "process relative": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "relative": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "cube_security": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeSecurity"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube security": {
                      "State": "Generated"
                    }
                  },
                  {
                    "CubeSecurity": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "security": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "cube sanctuary": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "sanctuary": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "cube safety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "cube refuge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "cube haven": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "cube safekeeping": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "cube retreat": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "safety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "refuge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "haven": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "cube_security.access_level": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeSecurity",
                    "ConceptualProperty": "AccessLevel"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "access level": {
                      "State": "Generated"
                    }
                  },
                  {
                    "AccessLevel": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "level": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "access quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "access threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "access amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "access grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "access point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "access rank": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "access tier": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  }
                ]
              },
              "cube_security.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeSecurity",
                    "ConceptualProperty": "Cube"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cube_security.group": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubeSecurity",
                    "ConceptualProperty": "Group"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "group": {
                      "State": "Generated"
                    }
                  },
                  {
                    "category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "organization": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "bracket": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "class": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "crew": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "team": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  }
                ]
              },
              "cube_with_others": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubesWithOthers"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube with others": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube with other": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "CubesWithOthers": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "cubes_top_N": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubesTopN"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cubes top N": {
                      "State": "Generated"
                    }
                  },
                  {
                    "cube top N": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.78
                    }
                  },
                  {
                    "CubesTopN": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "N": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "top N": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "cube best n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "cube first n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "cube leading n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "cube maximum n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "cube peak n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "cube upper n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "best n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "first n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "leading n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "maximum n": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "cubes_top_N.number": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubesTopN",
                    "ConceptualProperty": "Number"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "number": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "cubes_top_N.selected_value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "CubesTopN",
                    "ConceptualProperty": "SelectedValue"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "selected value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "SelectedValue": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "selected assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "selected worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "selected price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "selected cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "selected charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "selected rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "selected importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "selected significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "selected usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "selected consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "default_display_alias": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "ElementAliases"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "default display alias": {
                      "State": "Generated",
                      "Weight": 0.87
                    }
                  },
                  {
                    "DefaultDisplayAlias": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.8613
                    }
                  },
                  {
                    "alias": {
                      "State": "Generated",
                      "Weight": 0.8439
                    }
                  },
                  {
                    "display alias": {
                      "State": "Generated",
                      "Weight": 0.8439
                    }
                  },
                  {
                    "code-named": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "default display pseudonym": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.458
                    }
                  },
                  {
                    "default display penname": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.458
                    }
                  },
                  {
                    "display pseudonym": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.451
                    }
                  },
                  {
                    "display penname": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.451
                    }
                  }
                ]
              },
              "default_display_alias.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "ElementAliases",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "default_display_alias.element": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "ElementAliases",
                    "ConceptualProperty": "Element"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element": {
                      "State": "Generated"
                    }
                  },
                  {
                    "division": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "part": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "section": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "constituent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "hint": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "touch": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "bit": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "default_display_alias.element_key": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "ElementAliases",
                    "ConceptualProperty": "ElementKey"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element key": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementKey": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "key": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "main": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "basic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fundamental": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "central": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "major": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "keynote": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "essential": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "element solution": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "element explanation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "element basis": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Dimensions"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "dimension.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Dimensions",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "dimension name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "dimension_attribute": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionAttributes"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension attribute": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DimensionAttributes": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "dimension trait": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "dimension aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "dimension property": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "dimension quality": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension characteristic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension power": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension part": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "dimension_attribute.attribute": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionAttributes",
                    "ConceptualProperty": "Attribute"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "attribute": {
                      "State": "Generated"
                    }
                  },
                  {
                    "trait": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "property": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "quality": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "characteristic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "power": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "part": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "dimension_attribute.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionAttributes",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "dimension_element": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension element": {
                      "State": "Generated"
                    }
                  },
                  {
                    "DimensionElements": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "dimension division": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "dimension component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension part": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension section": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension group": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension constituent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "dimension quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "dimension degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "dimension hint": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.461
                    }
                  }
                ]
              },
              "dimension_element.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "dimension_element.element_0": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_0"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 0": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_0": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_1": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_1"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 1": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_1": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_10": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_10"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 10": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_10": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_2": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_2"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 2": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_2": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_3": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_3"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 3": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_3": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_4": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_4"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 4": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_4": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_5": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_5"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 5": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_5": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_6": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_6"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 6": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_6": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_7": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_7"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 7": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_7": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_8": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_8"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 8": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_8": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_9": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Element_9"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element 9": {
                      "State": "Generated"
                    }
                  },
                  {
                    "Element_9": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  }
                ]
              },
              "dimension_element.element_index": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "ElementIndex"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element index": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementIndex": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "index": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "element directory": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element catalogue": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element catalog": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element guide": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element file": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "element table": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "directory": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "catalogue": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "catalog": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "guide": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "dimension_element.element_level": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "ElementLevel"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element level": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementLevel": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "level": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "element quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "element threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "threshold": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "element amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element rank": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element tier": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "grade": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  },
                  {
                    "point": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.714
                    }
                  }
                ]
              },
              "dimension_element.element_type": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "ElementType"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element type": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementType": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "type": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "element category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "element genre": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "element manner": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "element variety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "genre": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "manner": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "variety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "element brand": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "element class": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "dimension_element.hierarchy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "DimensionElements",
                    "ConceptualProperty": "Hierarchy"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "hierarchy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ladder": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "grading": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "pyramid": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  }
                ]
              },
              "performance_measure": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "PerformanceMeasures"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "performance measure": {
                      "State": "Generated"
                    }
                  },
                  {
                    "PerformanceMeasures": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "performance degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance quota": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance extent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "performance amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance ration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "performance size": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "performance_measure.metric": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "PerformanceMeasures",
                    "ConceptualProperty": "Metric"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "metric": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "performance_measure.ordinal": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "PerformanceMeasures",
                    "ConceptualProperty": "Ordinal"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "ordinal": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "system_measure": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "System measures"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "system measure": {
                      "State": "Generated"
                    }
                  },
                  {
                    "system degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "system quantity": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "system quota": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "system extent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "system amount": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "system portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "system ration": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "system size": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "system_measure.dummy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "System measures",
                    "ConceptualProperty": "Dummy"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "dummy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "imitation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fake": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mock": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "replica": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "mannequin": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "figure": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "form": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "system_measure.v_Cube_FormatString_cube_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "System measures",
                    "ConceptualProperty": "_Cube FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_cube FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "system_measure.v_Hier_FormatString_hier_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "System measures",
                    "ConceptualProperty": "_Hier FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_hier FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "system_measure.v_Proc_FormatString_proc_FormatString": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "System measures",
                    "ConceptualProperty": "_Proc FormatString"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "_proc FormatString": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "transaction_log": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "transaction log": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TransactionLog": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "log": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "transaction journal": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "transaction diary": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "transaction daybook": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "transaction logbook": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "journal": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "diary": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "daybook": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "logbook": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "transaction record": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "transaction calendar": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  }
                ]
              },
              "transaction_log.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "Cube"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "transaction_log.new_value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "NewValue"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "new value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "NewValue": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "new assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "new worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "new price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "new cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "new charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "new rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "new importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "new significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "new usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "new consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "transaction_log.old_value": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "OldValue"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "old value": {
                      "State": "Generated"
                    }
                  },
                  {
                    "OldValue": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "old assessment": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "old worth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "old price": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "old cost": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "old charge": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "old rate": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.485
                    }
                  },
                  {
                    "old importance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "old significance": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "old usefulness": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "old consequence": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "transaction_log.record_no": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "RecordNo"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "record no": {
                      "State": "Generated"
                    }
                  },
                  {
                    "RecordNo": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "record number": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "transaction_log.time_stamp": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "time stamp": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TimeStamp": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "date": {
                      "State": "Generated",
                      "Weight": 0.7
                    }
                  },
                  {
                    "stamp": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "duration stamp": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "interval stamp": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "moment stamp": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "period stamp": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "timetable stamp": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "time impression": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "time endorsement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "time identification": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "impression": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "endorsement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  }
                ]
              },
              "transaction_log.time_stamp.variation.date_hierarchy": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "Hierarchy": "Date Hierarchy",
                    "VariationSet": "Variation",
                    "VariationSource": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "time stamp date hierarchy": {
                      "State": "Generated"
                    }
                  },
                  {
                    "date hierarchy": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "stamp date hierarchy": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  }
                ]
              },
              "transaction_log.time_stamp.variation.date_hierarchy.day": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Day",
                    "VariationSet": "Variation",
                    "VariationSource": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "day": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time stamp day": {
                      "State": "Generated"
                    }
                  },
                  {
                    "stamp day": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "duration stamp day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "interval stamp day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "moment stamp day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "period stamp day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "timetable stamp day": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  }
                ]
              },
              "transaction_log.time_stamp.variation.date_hierarchy.month": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Month",
                    "VariationSet": "Variation",
                    "VariationSource": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time stamp month": {
                      "State": "Generated"
                    }
                  },
                  {
                    "stamp month": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "time stamp mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "stamp mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "mth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "duration stamp month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "interval stamp month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "moment stamp month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "period stamp month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "timetable stamp month": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  }
                ]
              },
              "transaction_log.time_stamp.variation.date_hierarchy.quarter": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Quarter",
                    "VariationSet": "Variation",
                    "VariationSource": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time stamp quarter": {
                      "State": "Generated"
                    }
                  },
                  {
                    "stamp quarter": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "time stamp qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.846
                    }
                  },
                  {
                    "stamp qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.833
                    }
                  },
                  {
                    "qtr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.818
                    }
                  },
                  {
                    "duration stamp quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "interval stamp quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "moment stamp quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "period stamp quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "timetable stamp quarter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  }
                ]
              },
              "transaction_log.time_stamp.variation.date_hierarchy.year": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "Hierarchy": "Date Hierarchy",
                    "HierarchyLevel": "Year",
                    "VariationSet": "Variation",
                    "VariationSource": "TimeStamp"
                  }
                },
                "SemanticType": "Time",
                "State": "Generated",
                "Terms": [
                  {
                    "year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "time stamp year": {
                      "State": "Generated"
                    }
                  },
                  {
                    "stamp year": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "time stamp yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.762
                    }
                  },
                  {
                    "stamp yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "yr": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "duration stamp year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "interval stamp year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "moment stamp year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.609
                    }
                  },
                  {
                    "period stamp year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  },
                  {
                    "timetable stamp year": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.591
                    }
                  }
                ]
              },
              "transaction_log.user": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLog",
                    "ConceptualProperty": "User"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user": {
                      "State": "Generated"
                    }
                  },
                  {
                    "operator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worker": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "employer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manipulator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "handler": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manager": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "consumer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "customer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "client": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "punter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "transaction_log_dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "transaction log dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "TransactionLogDimensions": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "log dimension": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "transaction log measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "transaction log length": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "transaction log height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "transaction log width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "transaction log breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.508
                    }
                  },
                  {
                    "log measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "log length": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "log height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "log width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "log breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  }
                ]
              },
              "transaction_log_dimension.cube": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions",
                    "ConceptualProperty": "Cube"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "cube": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "transaction_log_dimension.dimension": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions",
                    "ConceptualProperty": "Dimension"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "dimension": {
                      "State": "Generated"
                    }
                  },
                  {
                    "measurement": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "height": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "width": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "breadth": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "aspect": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "facet": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "feature": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "factor": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "transaction_log_dimension.element": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions",
                    "ConceptualProperty": "Element"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "element": {
                      "State": "Generated"
                    }
                  },
                  {
                    "division": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "component": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "part": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "section": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "portion": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "constituent": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "degree": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "hint": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "touch": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "bit": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "transaction_log_dimension.element_key": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions",
                    "ConceptualProperty": "ElementKey"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "element key": {
                      "State": "Generated"
                    }
                  },
                  {
                    "ElementKey": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "key": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "main": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "basic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "fundamental": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "central": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "major": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "keynote": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "essential": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "element solution": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "element explanation": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "element basis": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "transaction_log_dimension.record_no": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "TransactionLogDimensions",
                    "ConceptualProperty": "RecordNo"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "record no": {
                      "State": "Generated"
                    }
                  },
                  {
                    "RecordNo": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "record number": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "user": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user": {
                      "State": "Generated"
                    }
                  },
                  {
                    "operator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worker": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "employer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manipulator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "handler": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manager": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "consumer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "customer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "client": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "punter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "user.is_user_active": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users",
                    "ConceptualProperty": "IsUserActive"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "is user active": {
                      "State": "Generated"
                    }
                  },
                  {
                    "IsUserActive": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "active": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "user active": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "dynamic": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.476
                    }
                  },
                  {
                    "functioning": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "effective": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "operating": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  },
                  {
                    "working": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.452
                    }
                  }
                ]
              },
              "user.user": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users",
                    "ConceptualProperty": "User"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user": {
                      "State": "Generated"
                    }
                  },
                  {
                    "user name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "operator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worker": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "employer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manipulator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "handler": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manager": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "consumer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "customer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "client": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "punter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              },
              "user.user_enabled": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users",
                    "ConceptualProperty": "UserEnabled"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user enabled": {
                      "State": "Generated"
                    }
                  },
                  {
                    "UserEnabled": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "operator enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "worker enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "employer enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "manipulator enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "handler enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "manager enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.5
                    }
                  },
                  {
                    "consumer enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "customer enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "client enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  },
                  {
                    "punter enabled": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.475
                    }
                  }
                ]
              },
              "user.user_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users",
                    "ConceptualProperty": "UserName"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "UserName": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "user nickname": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user title": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user label": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user tag": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "user.user_type": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "Users",
                    "ConceptualProperty": "UserType"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user type": {
                      "State": "Generated"
                    }
                  },
                  {
                    "UserType": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "type": {
                      "State": "Generated",
                      "Weight": 0.97
                    }
                  },
                  {
                    "user category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "user genre": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "user manner": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "user variety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "genre": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "manner": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "variety": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.736
                    }
                  },
                  {
                    "user brand": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user class": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "user_group": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "UserGroups"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "user group": {
                      "State": "Generated"
                    }
                  },
                  {
                    "UserGroups": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "user category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "user organization": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "user bracket": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user class": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user crew": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "user team": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  }
                ]
              },
              "user_group.group_name": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "UserGroups",
                    "ConceptualProperty": "GroupName"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "group name": {
                      "State": "Generated"
                    }
                  },
                  {
                    "GroupName": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "group nickname": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "group title": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "group label": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "group tag": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "collection name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "consortium name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "category name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "organization name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.6
                    }
                  },
                  {
                    "company name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  },
                  {
                    "grp name": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.582
                    }
                  }
                ]
              },
              "user_group.in_group": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "UserGroups",
                    "ConceptualProperty": "InGroup"
                  }
                },
                "State": "Generated",
                "Terms": [
                  {
                    "in group": {
                      "State": "Generated"
                    }
                  },
                  {
                    "InGroup": {
                      "State": "Generated",
                      "Type": "Noun",
                      "Weight": 0.99
                    }
                  },
                  {
                    "in category": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "in organization": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.75
                    }
                  },
                  {
                    "in bracket": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "in class": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "in crew": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "in team": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.727
                    }
                  },
                  {
                    "group": {
                      "State": "Generated"
                    }
                  }
                ]
              },
              "user_group.user": {
                "Definition": {
                  "Binding": {
                    "ConceptualEntity": "UserGroups",
                    "ConceptualProperty": "User"
                  }
                },
                "Hidden": true,
                "State": "Generated",
                "Terms": [
                  {
                    "user": {
                      "State": "Generated"
                    }
                  },
                  {
                    "operator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "worker": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "employer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manipulator": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "handler": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "manager": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.491
                    }
                  },
                  {
                    "consumer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "customer": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "client": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  },
                  {
                    "punter": {
                      "State": "Suggested",
                      "Type": "Noun",
                      "Weight": 0.466
                    }
                  }
                ]
              }
            },
            "Language": "en-US",
            "Relationships": {
              "amount_measure_has_DEL_TopN_cubes_value": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.DEL_TopN_cubes_value"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.DEL_TopN_cubes_value": {
                    "Target": {
                      "Entity": "amount_measure.DEL_TopN_cubes_value"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_DEL__of_total": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.DEL__of_total"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.DEL__of_total": {
                    "Target": {
                      "Entity": "amount_measure.DEL__of_total"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_DEL_performance_measure": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.DEL_performance_measure"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.DEL_performance_measure": {
                    "Target": {
                      "Entity": "amount_measure.DEL_performance_measure"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_TopN_cubes_value": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.TopN_cubes_value"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.TopN_cubes_value": {
                    "Target": {
                      "Entity": "amount_measure.TopN_cubes_value"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_cells_in_cube": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.cells_in_cube"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.cells_in_cube": {
                    "Target": {
                      "Entity": "amount_measure.cells_in_cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_cube_browse_depth": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.cube_browse_depth"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.cube_browse_depth": {
                    "Target": {
                      "Entity": "amount_measure.cube_browse_depth"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_dim_hierarchy_browse_depth": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.dim_hierarchy_browse_depth"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.dim_hierarchy_browse_depth": {
                    "Target": {
                      "Entity": "amount_measure.dim_hierarchy_browse_depth"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_dimensions_in_cube": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.dimensions_in_cube"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.dimensions_in_cube": {
                    "Target": {
                      "Entity": "amount_measure.dimensions_in_cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_element_index": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.element_index"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.element_index": {
                    "Target": {
                      "Entity": "amount_measure.element_index"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_element_level": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.element_level"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.element_level": {
                    "Target": {
                      "Entity": "amount_measure.element_level"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_hierarchy_elements_count": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.hierarchy_elements_count"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.hierarchy_elements_count": {
                    "Target": {
                      "Entity": "amount_measure.hierarchy_elements_count"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_performance_measure": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.performance_measure"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.performance_measure": {
                    "Target": {
                      "Entity": "amount_measure.performance_measure"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_unique_cubes": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.unique_cubes"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.unique_cubes": {
                    "Target": {
                      "Entity": "amount_measure.unique_cubes"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_unique_dimensions": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.unique_dimensions"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.unique_dimensions": {
                    "Target": {
                      "Entity": "amount_measure.unique_dimensions"
                    }
                  }
                },
                "State": "Generated"
              },
              "amount_measure_has_v_tm1_tm1": {
                "Binding": {
                  "ConceptualEntity": "Amount measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.v_tm1_tm1"
                      },
                      "Subject": {
                        "Role": "amount_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure": {
                    "Target": {
                      "Entity": "amount_measure"
                    }
                  },
                  "amount_measure.v_tm1_tm1": {
                    "Target": {
                      "Entity": "amount_measure.v_tm1_tm1"
                    }
                  }
                },
                "State": "Generated"
              },
              "configuration_has_value": {
                "Binding": {
                  "ConceptualEntity": "Configuration"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "configuration.value"
                      },
                      "Subject": {
                        "Role": "configuration"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "configuration": {
                    "Target": {
                      "Entity": "configuration"
                    }
                  },
                  "configuration.value": {
                    "Target": {
                      "Entity": "configuration.value"
                    }
                  }
                },
                "State": "Generated"
              },
              "configuration_is_named_name": {
                "Binding": {
                  "ConceptualEntity": "Configuration"
                },
                "Phrasings": [
                  {
                    "Name": {
                      "Name": {
                        "Role": "configuration.name"
                      },
                      "Subject": {
                        "Role": "configuration"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "configuration.name"
                      },
                      "Subject": {
                        "Role": "configuration"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "configuration": {
                    "Target": {
                      "Entity": "configuration"
                    }
                  },
                  "configuration.name": {
                    "Target": {
                      "Entity": "configuration.name"
                    }
                  }
                },
                "State": "Generated"
              },
              "constant_has_c_others": {
                "Binding": {
                  "ConceptualEntity": "Definitions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "constant.c_others"
                      },
                      "Subject": {
                        "Role": "constant"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "constant": {
                    "Target": {
                      "Entity": "constant"
                    }
                  },
                  "constant.c_others": {
                    "Target": {
                      "Entity": "constant.c_others"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_dimension_has_cube": {
                "Binding": {
                  "ConceptualEntity": "CubeDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube"
                      },
                      "Subject": {
                        "Role": "cube_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_dimension"
                      },
                      "Subject": {
                        "Role": "cube"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube": {
                    "Target": {
                      "Entity": "cube"
                    }
                  },
                  "cube_dimension": {
                    "Target": {
                      "Entity": "cube_dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_dimension_has_dimension": {
                "Binding": {
                  "ConceptualEntity": "CubeDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension"
                      },
                      "Subject": {
                        "Role": "cube_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_dimension"
                      },
                      "Subject": {
                        "Role": "dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_dimension": {
                    "Target": {
                      "Entity": "cube_dimension"
                    }
                  },
                  "dimension": {
                    "Target": {
                      "Entity": "dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicator_indicate_cube_indicators_stat": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "cube_indicators_stat"
                      },
                      "Subject": {
                        "Role": "cube_indicator"
                      },
                      "Verbs": [
                        {
                          "indicate": {}
                        }
                      ]
                    },
                    "Weight": 0.75
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicator"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat"
                      },
                      "Subject": {
                        "Role": "cube_indicator"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicator": {
                    "Target": {
                      "Entity": "cube_indicator"
                    }
                  },
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_TimeIntervals_hierarchy_has_time_interval": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.TimeIntervals_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy"
                    }
                  },
                  "cube_indicators_stat.TimeIntervals_hierarchy.time_interval": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_TimeIntervals_hierarchy_has_value": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.TimeIntervals_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy"
                    }
                  },
                  "cube_indicators_stat.TimeIntervals_hierarchy.value": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_TimeIntervals_hierarchy_time_interval_has_cube_indicators_stat_TimeIntervals_hierarchy_value": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Preposition": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                      },
                      "Prepositions": [
                        {
                          "in": {}
                        }
                      ],
                      "Subject": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.TimeIntervals_hierarchy.time_interval": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy.time_interval"
                    }
                  },
                  "cube_indicators_stat.TimeIntervals_hierarchy.value": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy.value"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_date_time_has_variation_date_hierarchy": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.date_time"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.date_time": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time"
                    }
                  },
                  "cube_indicators_stat.date_time.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_date_time_variation_date_hierarchy_has_day": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy.day"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.date_time.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy"
                    }
                  },
                  "cube_indicators_stat.date_time.variation.date_hierarchy.day": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy.day"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_date_time_variation_date_hierarchy_has_month": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy.month"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.date_time.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy"
                    }
                  },
                  "cube_indicators_stat.date_time.variation.date_hierarchy.month": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy.month"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_date_time_variation_date_hierarchy_has_quarter": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy.quarter"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.date_time.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy"
                    }
                  },
                  "cube_indicators_stat.date_time.variation.date_hierarchy.quarter": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy.quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_date_time_variation_date_hierarchy_has_year": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy.year"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat.date_time.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat.date_time.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy"
                    }
                  },
                  "cube_indicators_stat.date_time.variation.date_hierarchy.year": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time.variation.date_hierarchy.year"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_TimeIntervals_hierarchy": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.TimeIntervals_hierarchy"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_indicators_stat.TimeIntervals_hierarchy": {
                    "Target": {
                      "Entity": "cube_indicators_stat.TimeIntervals_hierarchy"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_amount_measure_v_tm2_tm2": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.v_tm2_tm2"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure.v_tm2_tm2": {
                    "Target": {
                      "Entity": "amount_measure.v_tm2_tm2"
                    }
                  },
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_cube": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat"
                      },
                      "Subject": {
                        "Role": "cube"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube": {
                    "Target": {
                      "Entity": "cube"
                    }
                  },
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_cube_with_others": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_with_others"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat"
                      },
                      "Subject": {
                        "Role": "cube_with_others"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_with_others": {
                    "Target": {
                      "Entity": "cube_with_others"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_date_time": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.date_time"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_indicators_stat.date_time": {
                    "Target": {
                      "Entity": "cube_indicators_stat.date_time"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_hours_offset": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.hours_offset"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_indicators_stat.hours_offset": {
                    "Target": {
                      "Entity": "cube_indicators_stat.hours_offset"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_time_interval": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.time_interval"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_indicators_stat.time_interval": {
                    "Target": {
                      "Entity": "cube_indicators_stat.time_interval"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_indicators_stat_has_value": {
                "Binding": {
                  "ConceptualEntity": "CubeStats"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_indicators_stat.value"
                      },
                      "Subject": {
                        "Role": "cube_indicators_stat"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_indicators_stat": {
                    "Target": {
                      "Entity": "cube_indicators_stat"
                    }
                  },
                  "cube_indicators_stat.value": {
                    "Target": {
                      "Entity": "cube_indicators_stat.value"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_is_named_cube": {
                "Binding": {
                  "ConceptualEntity": "Cubes"
                },
                "Phrasings": [
                  {
                    "Name": {
                      "Name": {
                        "Role": "cube.cube"
                      },
                      "Subject": {
                        "Role": "cube"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube.cube"
                      },
                      "Subject": {
                        "Role": "cube"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube": {
                    "Target": {
                      "Entity": "cube"
                    }
                  },
                  "cube.cube": {
                    "Target": {
                      "Entity": "cube.cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_processes_relation_has_amount_measure_cubes_proc_count": {
                "Binding": {
                  "ConceptualEntity": "CubeProcessesRelation"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.cubes_proc_count"
                      },
                      "Subject": {
                        "Role": "cube_processes_relation"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure.cubes_proc_count": {
                    "Target": {
                      "Entity": "amount_measure.cubes_proc_count"
                    }
                  },
                  "cube_processes_relation": {
                    "Target": {
                      "Entity": "cube_processes_relation"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_processes_relation_has_cube_name": {
                "Binding": {
                  "ConceptualEntity": "CubeProcessesRelation"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_processes_relation.cube_name"
                      },
                      "Subject": {
                        "Role": "cube_processes_relation"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_processes_relation": {
                    "Target": {
                      "Entity": "cube_processes_relation"
                    }
                  },
                  "cube_processes_relation.cube_name": {
                    "Target": {
                      "Entity": "cube_processes_relation.cube_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_processes_relation_has_process_name": {
                "Binding": {
                  "ConceptualEntity": "CubeProcessesRelation"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_processes_relation.process_name"
                      },
                      "Subject": {
                        "Role": "cube_processes_relation"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_processes_relation": {
                    "Target": {
                      "Entity": "cube_processes_relation"
                    }
                  },
                  "cube_processes_relation.process_name": {
                    "Target": {
                      "Entity": "cube_processes_relation.process_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_processes_relation_has_system_measure_cube": {
                "Binding": {
                  "ConceptualEntity": "CubeProcessesRelation"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "system_measure.cube"
                      },
                      "Subject": {
                        "Role": "cube_processes_relation"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_processes_relation": {
                    "Target": {
                      "Entity": "cube_processes_relation"
                    }
                  },
                  "system_measure.cube": {
                    "Target": {
                      "Entity": "system_measure.cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_security_has_access_level": {
                "Binding": {
                  "ConceptualEntity": "CubeSecurity"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_security.access_level"
                      },
                      "Subject": {
                        "Role": "cube_security"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_security": {
                    "Target": {
                      "Entity": "cube_security"
                    }
                  },
                  "cube_security.access_level": {
                    "Target": {
                      "Entity": "cube_security.access_level"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_security_has_amount_measure_users_groups_count": {
                "Binding": {
                  "ConceptualEntity": "CubeSecurity"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.users_groups_count"
                      },
                      "Subject": {
                        "Role": "cube_security"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure.users_groups_count": {
                    "Target": {
                      "Entity": "amount_measure.users_groups_count"
                    }
                  },
                  "cube_security": {
                    "Target": {
                      "Entity": "cube_security"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_security_has_cube": {
                "Binding": {
                  "ConceptualEntity": "CubeSecurity"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_security.cube"
                      },
                      "Subject": {
                        "Role": "cube_security"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_security": {
                    "Target": {
                      "Entity": "cube_security"
                    }
                  },
                  "cube_security.cube": {
                    "Target": {
                      "Entity": "cube_security.cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "cube_with_others_has_cube": {
                "Binding": {
                  "ConceptualEntity": "CubesWithOthers"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cube_with_others.cube"
                      },
                      "Subject": {
                        "Role": "cube_with_others"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cube_with_others": {
                    "Target": {
                      "Entity": "cube_with_others"
                    }
                  },
                  "cube_with_others.cube": {
                    "Target": {
                      "Entity": "cube_with_others.cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "cubes_top_N_has_number": {
                "Binding": {
                  "ConceptualEntity": "CubesTopN"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cubes_top_N.number"
                      },
                      "Subject": {
                        "Role": "cubes_top_N"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cubes_top_N": {
                    "Target": {
                      "Entity": "cubes_top_N"
                    }
                  },
                  "cubes_top_N.number": {
                    "Target": {
                      "Entity": "cubes_top_N.number"
                    }
                  }
                },
                "State": "Generated"
              },
              "cubes_top_N_has_selected_value": {
                "Binding": {
                  "ConceptualEntity": "CubesTopN"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "cubes_top_N.selected_value"
                      },
                      "Subject": {
                        "Role": "cubes_top_N"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "cubes_top_N": {
                    "Target": {
                      "Entity": "cubes_top_N"
                    }
                  },
                  "cubes_top_N.selected_value": {
                    "Target": {
                      "Entity": "cubes_top_N.selected_value"
                    }
                  }
                },
                "State": "Generated"
              },
              "default_display_alias_has_default_display_alias": {
                "Binding": {
                  "ConceptualEntity": "ElementAliases"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "default_display_alias.default_display_alias"
                      },
                      "Subject": {
                        "Role": "default_display_alias"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias"
                    }
                  },
                  "default_display_alias.default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias.default_display_alias"
                    }
                  }
                },
                "State": "Generated"
              },
              "default_display_alias_has_dimension": {
                "Binding": {
                  "ConceptualEntity": "ElementAliases"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "default_display_alias.dimension"
                      },
                      "Subject": {
                        "Role": "default_display_alias"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias"
                    }
                  },
                  "default_display_alias.dimension": {
                    "Target": {
                      "Entity": "default_display_alias.dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "default_display_alias_has_element": {
                "Binding": {
                  "ConceptualEntity": "ElementAliases"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "default_display_alias.element"
                      },
                      "Subject": {
                        "Role": "default_display_alias"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias"
                    }
                  },
                  "default_display_alias.element": {
                    "Target": {
                      "Entity": "default_display_alias.element"
                    }
                  }
                },
                "State": "Generated"
              },
              "default_display_alias_has_element_key": {
                "Binding": {
                  "ConceptualEntity": "ElementAliases"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "default_display_alias.element_key"
                      },
                      "Subject": {
                        "Role": "default_display_alias"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias"
                    }
                  },
                  "default_display_alias.element_key": {
                    "Target": {
                      "Entity": "default_display_alias.element_key"
                    }
                  }
                },
                "State": "Generated"
              },
              "default_display_alias_has_element_name": {
                "Binding": {
                  "ConceptualEntity": "ElementAliases"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "default_display_alias.element_name"
                      },
                      "Subject": {
                        "Role": "default_display_alias"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "default_display_alias": {
                    "Target": {
                      "Entity": "default_display_alias"
                    }
                  },
                  "default_display_alias.element_name": {
                    "Target": {
                      "Entity": "default_display_alias.element_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_attribute_has_attribute": {
                "Binding": {
                  "ConceptualEntity": "DimensionAttributes"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_attribute.attribute"
                      },
                      "Subject": {
                        "Role": "dimension_attribute"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_attribute": {
                    "Target": {
                      "Entity": "dimension_attribute"
                    }
                  },
                  "dimension_attribute.attribute": {
                    "Target": {
                      "Entity": "dimension_attribute.attribute"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_attribute_has_dimension": {
                "Binding": {
                  "ConceptualEntity": "DimensionAttributes"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_attribute.dimension"
                      },
                      "Subject": {
                        "Role": "dimension_attribute"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_attribute": {
                    "Target": {
                      "Entity": "dimension_attribute"
                    }
                  },
                  "dimension_attribute.dimension": {
                    "Target": {
                      "Entity": "dimension_attribute.dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_amount_measure_dim_hierarchy_max_depth": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "amount_measure.dim_hierarchy_max_depth"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "amount_measure.dim_hierarchy_max_depth": {
                    "Target": {
                      "Entity": "amount_measure.dim_hierarchy_max_depth"
                    }
                  },
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_dimension": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.dimension"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.dimension": {
                    "Target": {
                      "Entity": "dimension_element.dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_0": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_0"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_0": {
                    "Target": {
                      "Entity": "dimension_element.element_0"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_1": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_1"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_1": {
                    "Target": {
                      "Entity": "dimension_element.element_1"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_10": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_10"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_10": {
                    "Target": {
                      "Entity": "dimension_element.element_10"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_2": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_2"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_2": {
                    "Target": {
                      "Entity": "dimension_element.element_2"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_3": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_3"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_3": {
                    "Target": {
                      "Entity": "dimension_element.element_3"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_4": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_4"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_4": {
                    "Target": {
                      "Entity": "dimension_element.element_4"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_5": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_5"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_5": {
                    "Target": {
                      "Entity": "dimension_element.element_5"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_6": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_6"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_6": {
                    "Target": {
                      "Entity": "dimension_element.element_6"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_7": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_7"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_7": {
                    "Target": {
                      "Entity": "dimension_element.element_7"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_8": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_8"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_8": {
                    "Target": {
                      "Entity": "dimension_element.element_8"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_9": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_9"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_9": {
                    "Target": {
                      "Entity": "dimension_element.element_9"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_index": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_index"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_index": {
                    "Target": {
                      "Entity": "dimension_element.element_index"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_key": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_key"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_key": {
                    "Target": {
                      "Entity": "dimension_element.element_key"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_level": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_level"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_level": {
                    "Target": {
                      "Entity": "dimension_element.element_level"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_0": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_0"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_0": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_0"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_1": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_1"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_1": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_1"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_10": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_10"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_10": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_10"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_2": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_2"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_2": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_2"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_3": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_3"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_3": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_3"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_4": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_4"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_4": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_4"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_5": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_5"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_5": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_5"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_6": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_6"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_6": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_6"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_7": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_7"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_7": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_7"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_8": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_8"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_8": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_8"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_node_key_9": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_node_key_9"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_node_key_9": {
                    "Target": {
                      "Entity": "dimension_element.element_node_key_9"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_element_type": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.element_type"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.element_type": {
                    "Target": {
                      "Entity": "dimension_element.element_type"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_hierarchy": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.hierarchy"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.hierarchy": {
                    "Target": {
                      "Entity": "dimension_element.hierarchy"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_element_has_hierarchy_depth": {
                "Binding": {
                  "ConceptualEntity": "DimensionElements"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension_element.hierarchy_depth"
                      },
                      "Subject": {
                        "Role": "dimension_element"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension_element": {
                    "Target": {
                      "Entity": "dimension_element"
                    }
                  },
                  "dimension_element.hierarchy_depth": {
                    "Target": {
                      "Entity": "dimension_element.hierarchy_depth"
                    }
                  }
                },
                "State": "Generated"
              },
              "dimension_is_named_dimension": {
                "Binding": {
                  "ConceptualEntity": "Dimensions"
                },
                "Phrasings": [
                  {
                    "Name": {
                      "Name": {
                        "Role": "dimension.dimension"
                      },
                      "Subject": {
                        "Role": "dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "dimension.dimension"
                      },
                      "Subject": {
                        "Role": "dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "dimension": {
                    "Target": {
                      "Entity": "dimension"
                    }
                  },
                  "dimension.dimension": {
                    "Target": {
                      "Entity": "dimension.dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "performance_measure_has_metric": {
                "Binding": {
                  "ConceptualEntity": "PerformanceMeasures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "performance_measure.metric"
                      },
                      "Subject": {
                        "Role": "performance_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "performance_measure": {
                    "Target": {
                      "Entity": "performance_measure"
                    }
                  },
                  "performance_measure.metric": {
                    "Target": {
                      "Entity": "performance_measure.metric"
                    }
                  }
                },
                "State": "Generated"
              },
              "system_measure_has_hier": {
                "Binding": {
                  "ConceptualEntity": "System measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "system_measure.hier"
                      },
                      "Subject": {
                        "Role": "system_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "system_measure": {
                    "Target": {
                      "Entity": "system_measure"
                    }
                  },
                  "system_measure.hier": {
                    "Target": {
                      "Entity": "system_measure.hier"
                    }
                  }
                },
                "State": "Generated"
              },
              "system_measure_has_proc": {
                "Binding": {
                  "ConceptualEntity": "System measures"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "system_measure.proc"
                      },
                      "Subject": {
                        "Role": "system_measure"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "system_measure": {
                    "Target": {
                      "Entity": "system_measure"
                    }
                  },
                  "system_measure.proc": {
                    "Target": {
                      "Entity": "system_measure.proc"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_dimension_has_cube": {
                "Binding": {
                  "ConceptualEntity": "TransactionLogDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log_dimension.cube"
                      },
                      "Subject": {
                        "Role": "transaction_log_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log_dimension": {
                    "Target": {
                      "Entity": "transaction_log_dimension"
                    }
                  },
                  "transaction_log_dimension.cube": {
                    "Target": {
                      "Entity": "transaction_log_dimension.cube"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_dimension_has_dimension": {
                "Binding": {
                  "ConceptualEntity": "TransactionLogDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log_dimension.dimension"
                      },
                      "Subject": {
                        "Role": "transaction_log_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log_dimension": {
                    "Target": {
                      "Entity": "transaction_log_dimension"
                    }
                  },
                  "transaction_log_dimension.dimension": {
                    "Target": {
                      "Entity": "transaction_log_dimension.dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_dimension_has_element": {
                "Binding": {
                  "ConceptualEntity": "TransactionLogDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log_dimension.element"
                      },
                      "Subject": {
                        "Role": "transaction_log_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log_dimension": {
                    "Target": {
                      "Entity": "transaction_log_dimension"
                    }
                  },
                  "transaction_log_dimension.element": {
                    "Target": {
                      "Entity": "transaction_log_dimension.element"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_dimension_has_transaction_log": {
                "Binding": {
                  "ConceptualEntity": "TransactionLogDimensions"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log"
                      },
                      "Subject": {
                        "Role": "transaction_log_dimension"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log_dimension"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log_dimension": {
                    "Target": {
                      "Entity": "transaction_log_dimension"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_has_new_value": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.new_value"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log.new_value": {
                    "Target": {
                      "Entity": "transaction_log.new_value"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_has_old_value": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.old_value"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log.old_value": {
                    "Target": {
                      "Entity": "transaction_log.old_value"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_has_record_no": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.record_no"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log.record_no": {
                    "Target": {
                      "Entity": "transaction_log.record_no"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_has_time_stamp": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log.time_stamp": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_time_stamp_has_variation_date_hierarchy": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy"
                      },
                      "Subject": {
                        "Role": "transaction_log.time_stamp"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log.time_stamp": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp"
                    }
                  },
                  "transaction_log.time_stamp.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_time_stamp_variation_date_hierarchy_has_day": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy.day"
                      },
                      "Subject": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log.time_stamp.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy"
                    }
                  },
                  "transaction_log.time_stamp.variation.date_hierarchy.day": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy.day"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_time_stamp_variation_date_hierarchy_has_month": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy.month"
                      },
                      "Subject": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log.time_stamp.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy"
                    }
                  },
                  "transaction_log.time_stamp.variation.date_hierarchy.month": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy.month"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_time_stamp_variation_date_hierarchy_has_quarter": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy.quarter"
                      },
                      "Subject": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log.time_stamp.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy"
                    }
                  },
                  "transaction_log.time_stamp.variation.date_hierarchy.quarter": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy.quarter"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_time_stamp_variation_date_hierarchy_has_year": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy.year"
                      },
                      "Subject": {
                        "Role": "transaction_log.time_stamp.variation.date_hierarchy"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log.time_stamp.variation.date_hierarchy": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy"
                    }
                  },
                  "transaction_log.time_stamp.variation.date_hierarchy.year": {
                    "Target": {
                      "Entity": "transaction_log.time_stamp.variation.date_hierarchy.year"
                    }
                  }
                },
                "State": "Generated"
              },
              "transaction_log_user_use_transaction_log": {
                "Binding": {
                  "ConceptualEntity": "TransactionLog"
                },
                "Phrasings": [
                  {
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "transaction_log"
                      },
                      "Subject": {
                        "Role": "transaction_log.user"
                      },
                      "Verbs": [
                        {
                          "use": {}
                        }
                      ]
                    },
                    "Weight": 0.75
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log"
                      },
                      "Subject": {
                        "Role": "transaction_log.user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "transaction_log.user"
                      },
                      "Subject": {
                        "Role": "transaction_log"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "transaction_log": {
                    "Target": {
                      "Entity": "transaction_log"
                    }
                  },
                  "transaction_log.user": {
                    "Target": {
                      "Entity": "transaction_log.user"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_group_has_group_name": {
                "Binding": {
                  "ConceptualEntity": "UserGroups"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user_group.group_name"
                      },
                      "Subject": {
                        "Role": "user_group"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user_group": {
                    "Target": {
                      "Entity": "user_group"
                    }
                  },
                  "user_group.group_name": {
                    "Target": {
                      "Entity": "user_group.group_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_group_has_in_group": {
                "Binding": {
                  "ConceptualEntity": "UserGroups"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user_group.in_group"
                      },
                      "Subject": {
                        "Role": "user_group"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Preposition": {
                      "Object": {
                        "Role": "user_group.in_group"
                      },
                      "Prepositions": [
                        {
                          "in": {}
                        }
                      ],
                      "Subject": {
                        "Role": "user_group"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user_group": {
                    "Target": {
                      "Entity": "user_group"
                    }
                  },
                  "user_group.in_group": {
                    "Target": {
                      "Entity": "user_group.in_group"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_has_user_enabled": {
                "Binding": {
                  "ConceptualEntity": "Users"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user.user_enabled"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user.user_enabled": {
                    "Target": {
                      "Entity": "user.user_enabled"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_has_user_type": {
                "Binding": {
                  "ConceptualEntity": "Users"
                },
                "Phrasings": [
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user.user_type"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user.user_type": {
                    "Target": {
                      "Entity": "user.user_type"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_is_is_user_active": {
                "Binding": {
                  "ConceptualEntity": "Users"
                },
                "Phrasings": [
                  {
                    "DynamicAdjective": {
                      "Adjective": {
                        "Role": "user.is_user_active"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user.is_user_active"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user.is_user_active": {
                    "Target": {
                      "Entity": "user.is_user_active"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_is_named_user": {
                "Binding": {
                  "ConceptualEntity": "Users"
                },
                "Phrasings": [
                  {
                    "Name": {
                      "Name": {
                        "Role": "user.user"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user.user"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user.user": {
                    "Target": {
                      "Entity": "user.user"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_is_named_user_name": {
                "Binding": {
                  "ConceptualEntity": "Users"
                },
                "Phrasings": [
                  {
                    "Name": {
                      "Name": {
                        "Role": "user.user_name"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user.user_name"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user.user_name": {
                    "Target": {
                      "Entity": "user.user_name"
                    }
                  }
                },
                "State": "Generated"
              },
              "user_use_user_group": {
                "Binding": {
                  "ConceptualEntity": "UserGroups"
                },
                "Phrasings": [
                  {
                    "State": "Generated",
                    "Verb": {
                      "Object": {
                        "Role": "user_group"
                      },
                      "Subject": {
                        "Role": "user"
                      },
                      "Verbs": [
                        {
                          "use": {}
                        }
                      ]
                    },
                    "Weight": 0.75
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user"
                      },
                      "Subject": {
                        "Role": "user_group"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  },
                  {
                    "Attribute": {
                      "Object": {
                        "Role": "user_group"
                      },
                      "Subject": {
                        "Role": "user"
                      }
                    },
                    "State": "Generated",
                    "Weight": 0.99
                  }
                ],
                "Roles": {
                  "user": {
                    "Target": {
                      "Entity": "user"
                    }
                  },
                  "user_group": {
                    "Target": {
                      "Entity": "user_group"
                    }
                  }
                },
                "State": "Generated"
              }
            },
            "Version": "2.0.0"
          },
          "contentType": "json"
        }
      }
    ],
    "dataAccessOptions": {
      "legacyRedirects": true,
      "returnErrorValuesAsNull": true
    },
    "defaultPowerBIDataSourceVersion": "powerBI_V3",
    "discourageImplicitMeasures": true,
    "expressions": [
      {
        "name": "DataFiles_RulesAndProcesses",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          },
          {
            "name": "LinkedQueryName",
            "value": "FolderLoad_RulesAndProcesses"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "   /* Result = ",
          "        if ConnectionConfig[ConnectionType] = \"DataFiles\" then",
          "            let */",
          "                //Source = ( try Table.Buffer(Folder.Files(ConnectionConfig[DataFilesPath])) otherwise Table.FromRecords({ [Content = null, Name = null, Extension = null] }) )[[Content], [Name], [Extension]],",
          "                // Avoiding a dynamic data source when updating on the Service",
          "                Source = ( try Table.Buffer(Folder.Files(#\"31 DATA FILES PATH\")) otherwise Table.FromRecords({ [Content = null, Name = null, Extension = null] }) )[[Content], [Name], [Extension]],",
          "                RemoveExtensionFromName = Table.ReplaceValue(  Source",
          "                            , each [Extension]",
          "                            , each \"\"",
          "                            , Replacer.ReplaceText",
          "                            , {\"Name\"}  ",
          "                ), ",
          "                LowCaseExtension = Table.TransformColumns(  RemoveExtensionFromName, { \"Extension\", ( val ) => Text.Lower(val) }, null, MissingField.Ignore ),   ",
          "                ",
          "                // Cubes with no rules",
          "",
          "                CubeExtensions = FileExtentions{[Name = \"Cube\"]}[Extension],",
          "                CubeSelection  = Table.SelectRows(LowCaseExtension, each [Extension] = Text.From(CubeExtensions) and [Content] <> null),",
          "                TransformCubeSelection = Table.FromRecords(",
          "                    Table.TransformRows(CubeSelection, ( rec ) as record => Record.TransformFields(rec, {{ \"Content\", each Binary.FromText(\"\") }, { \"Extension\", each Text.From(FileExtentions{[Name = \"Rule\"]}[Extension]) }}))",
          "                ),",
          "",
          "                // Rules and Processed",
          "",
          "                RuleAndProcessExtensions = { FileExtentions{[Name = \"Rule\"]}[Extension], FileExtentions{[Name = \"Process\"]}[Extension] },",
          "                RuleAndProcessSelection = Table.SelectRows(LowCaseExtension, each ",
          "                            let ",
          "                                Ext = [Extension], ",
          "                                ExtFilter = List.MatchesAny( RuleAndProcessExtensions, each _ = Text.From(Ext))",
          "                            in",
          "                                ExtFilter",
          "                ),",
          "",
          "                // Rows union",
          "                RowsUnion = Table.Combine({ TransformCubeSelection, RuleAndProcessSelection }),",
          "                NameSelection = Table.SelectRows(RowsUnion, each ",
          "                            let ",
          "                                Name = [Name], ",
          "                                NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
          "                            in",
          "                                NameFilter",
          "                ),",
          "                RowsGrouping = Table.Group(NameSelection, { \"Name\", \"Extension\" }, { \"Content\", each Binary.Combine([Content]) }, null, Comparer.OrdinalIgnoreCase),",
          "",
          "                // Other transformations",
          "                AddMetaData = Table.NestedJoin(RowsGrouping",
          "                            , \"Extension\"",
          "                            , FileExtentions",
          "                            , \"Extension\"",
          "                            , \"MetaDataTable\"",
          "                            , JoinKind.Inner ",
          "                        ),  ",
          "                ExpandMetaData = Table.ExpandTableColumn(AddMetaData, \"MetaDataTable\", {\"Name\"}, {\"MetaData\"}),                                                                                      ",
          "                TextContent = Table.AddColumn(ExpandMetaData, \"TextContent\", each Text.FromBinary([Content])),",
          "                RemovedBinaryContent = Table.RemoveColumns(TextContent,{\"Content\", \"Extension\"})",
          "",
          "in",
          "    RemovedBinaryContent",
          "       /* else null",
          "in",
          "    Result */"
        ],
        "kind": "m",
        "lineageTag": "aa8c5d17-d5bb-436b-867d-27ef7a1f1748",
        "queryGroup": "Data\\UserData\\DataFilesLoad"
      },
      {
        "name": "KeyWords",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    KeyWords =",
          "                [",
          "                      RuleCubeRef = {\"DB\", \"ConsolidatedMin\", \"ConsolidatedMax\", \"ConsolidatedAvg\", \"ConsolidatedCount\", \"ConsolidatedCountUnique\"}",
          "                    , RuleAttrRef = {\"AttrN\", \"AttrS\"}",
          "                    , ProcessCubeRef = {\"CellPutN\", \"CellPutS\", \"CellIncrementN\", \"CellPutProportionalSpread\"}",
          "                    , ProcessProcessRef = {\"ExecuteProcess\"}",
          "                    , FeederRef = \"FEEDERS;\"",
          "                    , SkipcheckRef = \"SKIPCHECK;\"",
          "                    , SysMetaDataRef = {\"}\"}",
          "                    , ElAttrRef = \"}ElementAttributes_\"",
          "                    , TransactionLogRef = \"tm1s\"",
          "                ]",
          "in",
          "    KeyWords"
        ],
        "kind": "m",
        "lineageTag": "c3a85601-6f73-48a0-812b-27635f0bd9b3",
        "queryGroup": "Data\\MetaData"
      },
      {
        "name": "FileExtentions",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        #table(",
          "                type table [Name = text, Extension = text], ",
          "                {",
          "                      {\"Cube\", \".cub\"}",
          "                    , {\"Dimension\", \".dim\"}",
          "                    , {\"Rule\", \".rux\"}",
          "                    , {\"Process\", \".pro\"}",
          "                    , {\"TransactionLog\", \".log\"}",
          "                }",
          "",
          "        )",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "85aef128-f876-4fb7-9874-423e73f61a72",
        "queryGroup": "Data\\MetaData"
      },
      {
        "name": "xDel_fn_createHierarchyPath_ByList",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "expression": [
          "(SourceTable as table, KeyField as any, ChildrenObjectsField as text, TreeNodeName as text, HierarchyDepth as number) =>",
          "   let",
          "      fn_nextNode = (NodesTable as table, NodeNo as number) =>",
          "         let",
          "            ExpandLevel_N = Table.ExpandListColumn(NodesTable, TreeNodeName & Text.From(NodeNo)),",
          "            RemoveCircularRefLevel_N = Table.ReplaceValue(",
          "                                                      ExpandLevel_N",
          "                                                      , each Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo)))",
          "                                                      , each null",
          "                                                      , (currentValue, isTrue, replacementValue) => if isTrue then replacementValue else currentValue  ",
          "                                                      , {TreeNodeName & Text.From(NodeNo)}",
          "                                                   ),",
          "            //Update hierarchy path with new meaningful values",
          "            AppendHierarchyPath = Table.ReplaceValue(",
          "                                                         RemoveCircularRefLevel_N ",
          "                                                         , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) = null",
          "                                                         , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) ",
          "                                                         , (currentValue, isTrue, replacementValue) => if isTrue then currentValue else Text.Combine({ currentValue, Splitter, replacementValue })  ",
          "                                                         , {\"HierarchyPath\"}                                                       ",
          "                                                      ),",
          "            ",
          "            NextNodeTable = ",
          "               if (NodeNo = InterfaceMaxTreeDepth - 2) then LastNodeTable ",
          "               else if (NodeNo = HierarchyDepth - 1) then LastNodeTable ",
          "               else if (NodeNo < HierarchyDepth - 1) then SourceTable ",
          "               else NullNodeTable,",
          "           ",
          "            HierarchyTable = if (NodeNo >= InterfaceMaxTreeDepth - 1)",
          "                                 then",
          "                                     AppendHierarchyPath       ",
          "                                 else ",
          "                                    let",
          "                                       AddNextNodeTable = Table.NestedJoin(",
          "                                                  AppendHierarchyPath",
          "                                                , TreeNodeName & Text.From(NodeNo)",
          "                                                , NextNodeTable",
          "                                                , KeyField",
          "                                                , \"TableColumn\"",
          "                                                , JoinKind.LeftOuter ",
          "                                             ),",
          "                                       ExpandNextNodeTable = Table.ExpandTableColumn(AddNextNodeTable, \"TableColumn\", { ChildrenObjectsField }, { TreeNodeName & Text.From(NodeNo + 1) })",
          "                                    in",
          "                                       @fn_nextNode(ExpandNextNodeTable, NodeNo + 1)",
          "         in",
          "            HierarchyTable,",
          "",
          "      InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "      RootNodeTable = Table.AddColumn(Table.RenameColumns(SourceTable, {{ KeyField, TreeNodeName & Text.From(0) }, { ChildrenObjectsField, TreeNodeName & Text.From(1) }}), \"HierarchyPath\", each Record.Field( _ , TreeNodeName & Text.From(0))),",
          "      LastNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each {\"[ ... ]\"}),",
          "      NullNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each null),",
          "      Splitter = \"|\",",
          "      ",
          "      Return = fn_nextNode(RootNodeTable, 1)",
          "   in ",
          "      Return"
        ],
        "kind": "m",
        "lineageTag": "21452774-9b21-4072-8e02-3f99c4290ecd",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "xDel_createHierarchyPath_ByList",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          },
          {
            "name": "LinkedQueryName",
            "value": "temp_HierarchyPath"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let   ",
          "    ExtractRulesOnly = Table.TransformColumns(Source_Rules, { \"TextContent\", ( text ) => Text.BeforeDelimiter(text, Text.Upper(KeyWords[FeederRef])) }),",
          "    RelatedObjects = Table.AddColumn(",
          "                    ExtractRulesOnly",
          "                    , \"RelatedObjects\"",
          "                    , each xDel_fn_getRelatedObjects(Text.From([TextContent]), KeyWords[RuleCubeRef], {0, 1, 1, 1, 1, 2})",
          "    ),",
          "    // remove a circular reference to the same object",
          "    RemoveCircularRefs = if Table.RowCount( RelatedObjects ) > 0",
          "                            then Table.FromRecords(Table.TransformRows(RelatedObjects",
          "                                                                        , (r) => Record.TransformFields(r, {\"RelatedObjects\", each List.RemoveItems( _ , { r[Name] } ) })",
          "                                                                        )",
          "                                )",
          "                            else RelatedObjects,                                   ",
          "                            ",
          "    RowsWithoutErrors = Table.SelectRows(RemoveCircularRefs, each try Text.Length(Text.Combine([RelatedObjects])) >= 0 otherwise false),",
          "\t",
          "     MaxTreeDepth = fn_calcMaxTreeDepth(RowsWithoutErrors[RelatedObjects]),",
          "   ",
          "",
          "    //ResultTable = fn_createHierarchyPath(RowsWithoutErrors[[Name], [RelatedObjects]], \"Name\", \"RelatedObjects\", SysName[CubeTreeNodeName], MaxTreeDepth)",
          "",
          "    KeyField = \"Name\",",
          "    ChildrenObjectsField = \"RelatedObjects\",",
          "    TreeNodeName = SysName[CubeTreeNodeName],",
          "    HierarchyDepth = 1,",
          "",
          "    SourceTable = RowsWithoutErrors,",
          "    NodeNo = 1,",
          "",
          "",
          "      InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "      RootNodeTable = Table.AddColumn(Table.RenameColumns(SourceTable, {{ KeyField, TreeNodeName & Text.From(0) }, { ChildrenObjectsField, TreeNodeName & Text.From(1) }}), \"HierarchyPath\", each Record.Field( _ , TreeNodeName & Text.From(0))),",
          "      LastNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each \"[ ... ]\"),",
          "      NullNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each null),   ",
          "   TableToReturn = RootNodeTable,",
          "   //---------------------------------------------------------",
          "            Splitter = \"|\",",
          "            ExpandLevel_N = Table.ExpandListColumn(TableToReturn, TreeNodeName & Text.From(NodeNo)),",
          "            RemoveCircularRefLevel_N = Table.ReplaceValue(",
          "                                          ExpandLevel_N",
          "                                          , each Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo))) //Record.Field( _ , TreeNodeName & Text.From(NodeNo))",
          "                                          , each null//if Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo)))",
          "                                                   //  then null",
          "                                                   //  else Record.Field( _ , TreeNodeName & Text.From(NodeNo))",
          "                                          , (currentValue, isCircular, replacementValue) =>",
          "                                             if isCircular then replacementValue",
          "                                             else currentValue                                                     ",
          "                                          //Replacer.ReplaceValue",
          "                                          , {TreeNodeName & Text.From(NodeNo)}",
          "                                       ),",
          "            //Update hierarchy path with new meaningful values",
          "            AppendHierarchyPath = Table.ReplaceValue(",
          "                                                         RemoveCircularRefLevel_N ",
          "                                                         , each Record.Field( _ ,  \"HierarchyPath\")",
          "                                                         , each if Record.Field( _ , TreeNodeName & Text.From(NodeNo)) = null",
          "                                                                     then Record.Field( _ ,  \"HierarchyPath\")",
          "                                                                     else Text.Combine({Record.Field( _ ,  \"HierarchyPath\"), Splitter, Record.Field( _ , TreeNodeName & Text.From(NodeNo))} )",
          "                                                         , Replacer.ReplaceValue",
          "                                                         , {\"HierarchyPath\"}                                                       ",
          "                                                      ),",
          "            ",
          "            NextNodeTable = ",
          "               if (NodeNo = InterfaceMaxTreeDepth - 2) then LastNodeTable ",
          "               else if (NodeNo = HierarchyDepth) then LastNodeTable ",
          "               else if (NodeNo <= HierarchyDepth - 1) then SourceTable ",
          "               else NullNodeTable, ",
          "   //---------------------------------------------------------",
          "                       ",
          "   AddNextNodeTable = Table.NestedJoin(",
          "                                                  AppendHierarchyPath",
          "                                                , TreeNodeName & Text.From(NodeNo)",
          "                                                , NextNodeTable",
          "                                                , KeyField",
          "                                                , \"TableColumn\"",
          "                                                , JoinKind.LeftOuter ",
          "                                             ),",
          "   ExpandNextNodeTable = Table.ExpandTableColumn(AddNextNodeTable, \"TableColumn\", { ChildrenObjectsField }, { TreeNodeName & Text.From(NodeNo + 1) })",
          "in",
          "    ExpandNextNodeTable"
        ],
        "kind": "m",
        "lineageTag": "cd883e22-9c31-4cb7-aacb-86bec84c65cb"
      },
      {
        "name": "fn_prepareCodeContent",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "// Сleaning and preparing the code of rules and processes before any parsing",
          "(RawText as text) =>",
          "    let",
          "        KeyWords = List.Combine({ KeyWords[RuleCubeRef], KeyWords[RuleAttrRef], KeyWords[ProcessCubeRef], KeyWords[ProcessProcessRef], { KeyWords[SkipcheckRef] }, { KeyWords[FeederRef] } }),",
          "        Counter = List.Count(KeyWords),",
          "",
          "        // Remove commented blocks: #, line feeds: #(lf).",
          "\t    // Commented blocks should be removed before the quote-dependent splitting since non-closed quotes may occur in commented rows",
          "        SplitTextByCarriageReturn = Splitter.SplitTextByAnyDelimiter({\"#(cr)\", \"#(lf)\"}, QuoteStyle.None)(RawText), ",
          "        RemoveCommentedRows = List.Select(SplitTextByCarriageReturn, each not Text.StartsWith( Text.Trim ( _ ) ,\"#\" )), ",
          "        TextWithoutComments = Text.Combine(RemoveCommentedRows),\t\t",
          "",
          "        // Remove control characters",
          "        CleanedText = Text.Clean(TextWithoutComments),",
          "\t\t",
          "        // Upper KeyWords ",
          "        fn_upperKeyWords = (text as text, i as number) =>",
          "            let",
          "                ReplaceTextCase = Text_ReplaceSubstring(text, KeyWords{i}, KeyWords{i}, true)",
          "            in",
          "                if i >= Counter",
          "                then text",
          "                else @fn_upperKeyWords(ReplaceTextCase, i + 1)",
          "        ,  ",
          "",
          "        PreparedText = fn_upperKeyWords(CleanedText, 0)",
          "                   ",
          "    in ",
          "        PreparedText"
        ],
        "kind": "m",
        "lineageTag": "c60c99bb-9925-4d87-a362-792ca30b13a0",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "List_Upper",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          },
          {
            "name": "LinkedQueryName",
            "value": "List_Upper"
          }
        ],
        "expression": [
          "let func =  (List as list) as list =>",
          "    List.Transform(List, each Text.Upper( _ ) ),",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" List_Upper\",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Returns the result of converting all list elements to uppercase \",",
          "    Documentation.Category = \" List \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.0 \",",
          "    Documentation.Author = \" Alexey Zaitsev \",",
          "    Documentation.Examples = {[Description =  \" \",",
          "    Code = \" List_Upper ({\"\"CellPutS\"\", \"\"CellPutN\"\"}) \",",
          "    Result = \" {\"\"CELLPUTS\"\", \"\"CELLPUTN\"\"} \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "70a40437-7460-42ef-a7ca-6eeef1c0bedc",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "DataFiles_Cubes",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "   Result = ",
          "      if ConnectionConfig[ConnectionType] = \"DataFiles\" then",
          "            let",
          "                //Source = ( try Table.Buffer(Folder.Files(ConnectionConfig[DataFilesPath])) otherwise Table.FromRecords({ [Name = null, Extension = null] }) )[[Name], [Extension]],",
          "                // Avoiding a dynamic data source when updating on the Service",
          "                Source = ( try Table.Buffer(Folder.Files(#\"31 DATA FILES PATH\")) otherwise Table.FromRecords({ [Name = null, Extension = null] }) )[[Name], [Extension]],",
          "                CubeSelection1 = Table.SelectRows(Source, each FileExtentions{[Name = \"Cube\"]}[Extension] = Text.Lower([Extension])),",
          "                //no cubes in the model given",
          "                CubeSelection2 = if Table.IsEmpty(CubeSelection1) then Table.SelectRows(Source, each FileExtentions{[Name = \"Rule\"]}[Extension] = Text.From([Extension])) else CubeSelection1,",
          "                NameSelection = Table.SelectRows(CubeSelection2, each ",
          "                                                        let ",
          "                                                            Name = [Name], ",
          "                                                            NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
          "                                                        in ",
          "                                                            NameFilter",
          "                                ),",
          "                RemoveExtensionFromName = Table.ReplaceValue(  NameSelection",
          "                                                                , each [Extension]",
          "                                                                , each \"\"",
          "                                                                , Replacer.ReplaceText",
          "                                                                , {\"Name\"}  ",
          "                                                            ),                        ",
          "                RemovedExt = Table.RemoveColumns(RemoveExtensionFromName,{\"Extension\"}),",
          "                RenameColumn = Table.RenameColumns(RemovedExt,{{\"Name\", \"Cube\"}})",
          "            in",
          "                RenameColumn",
          "      else null",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "caefe577-f8ee-4a89-8889-066ab433028c",
        "queryGroup": "Data\\UserData\\DataFilesLoad"
      },
      {
        "name": "Text_ReplaceSubstring",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (text as nullable text, oldText as text, newText as text, optional ignoreCase as logical) as text =>",
          "    let",
          "        UppercaseText = Text.Upper(text),",
          "        UppercaseOldText = Text.Upper(oldText),",
          "        OldTextStartPos = Text.PositionOf(UppercaseText, UppercaseOldText, Occurrence.All),",
          "        ReplacedRange = if ignoreCase = null or ignoreCase = false then ",
          "                            Text.Replace(text, oldText, newText)    ",
          "                        else if List.IsEmpty(OldTextStartPos ) then text",
          "                        else ",
          "                        Text.ReplaceAll(text, OldTextStartPos),",
          "            ",
          "        Text.ReplaceAll = (text as text, positionList as list) as text =>",
          "            let",
          "                firstPos = List.First(positionList),",
          "                restPos = List.Skip(positionList, 1),",
          "                currentText = Text.ReplaceRange(text, firstPos, Text.Length(oldText), newText),",
          "                final = if List.IsEmpty(restPos) then currentText",
          "                        else @Text.ReplaceAll(currentText, restPos)",
          "            in",
          "                final",
          "    in",
          "        ReplacedRange,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" Text_ReplaceSubstring \",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Returns the result of replacing all occurrences of text value old in text value text with text value new. Case sensivity depends on the \"\"ignoreCase\"\" flag value \",",
          "    Documentation.Category = \" Text \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.0 \",",
          "    Documentation.Author = \" Internet \",",
          "    Documentation.Examples = {[Description =  \" TBD \",",
          "    Code = \" Text_ReplaceSubstring (\"\"CellPutS CellPutN\"\", \"\"cellputs\"\", \"\"CELLPUTS\"\", true) \",",
          "    Result = \" \"\"CELLPUTS CellPutN\"\" \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "3c1c5268-7344-4ba1-8f84-aae8480f2d95",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "xDel_RuleProcessText",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "\"FORMAT==100",
          "SKIPCHECK;",
          "",
          "#Region FeedersCheck ++++++++++++++++#",
          "['Base Salary Measures':'FeederFlag'] = N: 1;['Base Salary Measures':'Underfed'] = N: If (['Base Salary Measures':'IsFed'] = 0 & ['Base Salary Measures':'Base Salary'] <> 0, 1, 0);['Base Salary Measures':'Underfed'] = C: ConsolidateChildren('Versions', 'Subsidiaries', 'Grades', 'Bands', 'Base Salary Measures');['Base Salary Measures':'Overfed'] = N: If (['Base Salary Measures':'IsFed'] > 0 & ['Base Salary Measures':'Base Salary'] = 0, 1, 0);['Base Salary Measures':'Overfed'] = C: ConsolidatedCount(2, '', !Versions, !Subsidiaries, !Grades, !Bands, !Base Salary Measures);['Base Salary Measures':'OverfedRatio'] = C: ['Base Salary Measures':'Overfed'] \\ ['Base Salary Measures':'IsFed'];['Base Salary Measures':'FeederCheck'] = C: If (['Base Salary Measures':'Underfed'] <> 0, -1 * ABS(['Base Salary Measures':'Underfed']), If (['Base Salary Measures':'Overfed'] <> 0, 1 * ['Base Salary Measures':'Overfed'], 0));",
          "#EndRegion +++++++++++++++++++++++++++#",
          "FEEDERS;",
          "#['Base Salary' ]  => DB('Salary Plan', !Versions, !Subsidiaries, !Grades, !Bands,'TOTAL EMPLOYEES' , 'Base Salary');",
          "#Region FeedersCheck ++++++++++++++++#",
          "['Base Salary Measures':'Base Salary'] => ['Base Salary Measures':'FeederFlag'], ['Base Salary Measures':'Overfed'];",
          "#EndRegion +++++++++++++++++++++++++++#",
          "\"",
          " in Source"
        ],
        "kind": "m",
        "lineageTag": "6612a299-a478-49ed-ab19-2b8ea83659ce"
      },
      {
        "name": "xDel_prepareCodeContent",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": [
          "let",
          "        RawText = xDel_RuleProcessText,",
          "        KeyWords = List.Combine({ KeyWords[RuleCubeRef], KeyWords[ProcessCubeRef], KeyWords[ProcessProcessRef], { KeyWords[SkipcheckRef] }, { KeyWords[FeederRef] } }),",
          "        Counter = List.Count(KeyWords),",
          "",
          "        // Remove commented blocks: #, line feeds: #(lf).",
          "\t\t// Commented blocks should be removed before the quote-dependent splitting since non-closed quotes may occur in commented rows",
          "        SplitTextByCarriageReturn = Splitter.SplitTextByAnyDelimiter({\"#(cr)\", \"#(lf)\"}, QuoteStyle.None)(RawText), ",
          "        RemoveCommentedRows = List.Select(SplitTextByCarriageReturn, each not Text.StartsWith( Text.Trim ( _ ) ,\"#\" )), ",
          "        TextWithoutComments = Text.Combine(RemoveCommentedRows),",
          "\t\t",
          "\t\t// Escaping single quotes ",
          "\t\t//EscapedSingleQuotes = Text.Replace(TextWithoutComments, \"'\", \"\"\"'\"),",
          "",
          "        // Remove control characters",
          "        CleanedText = Text.Clean(TextWithoutComments),",
          "        //SplitText = Splitter.SplitTextByWhitespace(QuoteStyle.Csv)(EscapedSingleQuotes), ",
          "        //CleanedText = Text.Combine(SplitText),",
          "\t\t",
          "        // Upper KeyWords ",
          "        fn_upperKeyWords = (text as text, i as number) =>",
          "            let",
          "                ReplaceTextCase = Text_ReplaceSubstring(text, KeyWords{i}, KeyWords{i}, true)",
          "            in",
          "                if i = Counter",
          "                then text",
          "                else @fn_upperKeyWords(ReplaceTextCase, i + 1)",
          "        ,  ",
          "",
          "        PreparedText = fn_upperKeyWords(CleanedText, 0)",
          "                   ",
          "    in ",
          "        PreparedText"
        ],
        "kind": "m",
        "lineageTag": "8246af5d-8bc0-442d-977c-e3612b60f739"
      },
      {
        "name": "11 HTTP(S)://HOST:PORT",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": "Mandatory.The address of the http(s) connection to the server. Use \"http(s)://HttpHost:HttpPort\" pattern.",
        "expression": "\"https://localhost:8886\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "e43c0deb-abe9-406f-98fd-3918ade46b41",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "12 LOGIN",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": "Mandatory.",
        "expression": "\"admin\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "f251a30b-f5b0-4736-8fc3-4c5ac41d1e1b",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "13 PASSWORD",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": [
          "Mandatory.",
          "The password entered is not hidden behind asterisks!"
        ],
        "expression": "\"apple\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "24f209f8-7711-454f-aae8-62f61c2863cb",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "03 CONFIG PATH",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": "Optional. The param is used to tune the application in the \"Desktop\" MODE",
        "expression": "\"X:\\\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "b31f1bf7-0a42-44a0-829e-e865c9ecc171",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "LoadXMLConnectionConfig",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    NullTable = #table(type table[Login = text, Password = text, Namespace = text], {{ \"\", \"\", \"\" }}),",
          "",
          "    Source = if (#\"01 MODE\" = \"Desktop\") then try Xml.Tables( File.Contents(#\"03 CONFIG PATH\"), null, 65001 ) otherwise null else null,",
          " ",
          "    ConnectionTable = try Source{[Name = \"auth\"]}[Table] otherwise NullTable,",
          "    ReplaceEmptyValues = Table_TransformAllColumns(ConnectionTable, ( value ) => if Value.Is(value, type table) then \"\" else value, type text),               ",
          "    SetTypes = Table.TransformColumnTypes(ReplaceEmptyValues,",
          "        {",
          "              {\"Login\", type text}",
          "            , {\"Password\", type text}",
          "            , {\"Namespace\", type text}",
          "        }",
          "    ),",
          "                                              ",
          "   // ParamsSetup = Table.Unpivot(Table.FromRecords({ SetTypes{0} }), Table.ColumnNames(SetTypes), \"Name\", \"Value\")",
          "    ParamsSetup = try SetTypes{0} otherwise Record.FromTable(NullTable)",
          "in",
          "    ParamsSetup"
        ],
        "kind": "m",
        "lineageTag": "a6fdf1bd-b3a7-44ea-a151-875271e476bc",
        "queryGroup": "Settings\\Configuration"
      },
      {
        "name": "LoadXMLSettingsConfig",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Source = if (#\"01 MODE\" = \"Desktop\") then try Xml.Tables( File.Contents(#\"03 CONFIG PATH\"), null, 65001 ) otherwise null else null,",
          "",
          "    SettingsTable = try Source{[Name = \"settings\"]}[Table] otherwise null,",
          "",
          "    ReportTable = try SettingsTable{[Name = \"report\"]}[Table] otherwise SettingsConfigDefault,",
          "    AliasList = List.Select(",
          "\t\t\t\t\tList.Distinct(",
          "\t\t\t\t\t\tList.RemoveNulls(try Table.ToList( ReportTable{[Name = \"Alias\"]}[Table]) ",
          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\totherwise try Text.Split(ReportTable[alias]{0}, \"\") ",
          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\totherwise SettingsConfigDefault[AliasList]",
          "\t\t\t\t\t\t)",
          "\t\t\t\t\t)",
          "\t\t\t\t, each _ <> \"\"),",
          "    ",
          "    LogsTable = try SettingsTable{[Name = \"logs\"]}[Table] otherwise null,",
          "    TransactionLogPeriodInDays = try Number.FromText(LogsTable[TransactionLogPeriodInDays]{0}) otherwise SettingsConfigDefault[TransactionLogPeriodInDays],",
          "    ConvertGMTLogTimeStampsToLocalTimeZone = try Logical.FromText(LogsTable[ConvertGMTLogTimeStampsToLocalTimeZone]{0}) otherwise SettingsConfigDefault[ConvertGMTLogTimeStampsToLocalTimeZone],",
          "",
          "    SystemTable = try SettingsTable{[Name = \"system\"]}[Table] otherwise null,",
          "    HttpRequestPool = try Number.FromText(SystemTable[HttpRequestPool]{0}) otherwise SettingsConfigDefault[HttpRequestPool],",
          "    HttpRequestLatencySec = try Number.FromText(SystemTable[HttpRequestLatencySec]{0}) otherwise SettingsConfigDefault[HttpRequestLatencySec],",
          "    HttpRequestRecurringLatencySec = try Number.FromText(SystemTable[HttpRequestRecurringLatencySec]{0}) otherwise SettingsConfigDefault[HttpRequestRecurringLatencySec],",
          "    HttpRequestMaxAttempts = try Number.FromText(SystemTable[HttpRequestMaxAttempts]{0}) otherwise SettingsConfigDefault[HttpRequestMaxAttempts],",
          "    HttpRequestTimeoutSec = try Number.FromText(SystemTable[HttpRequestTimeoutSec]{0}) otherwise SettingsConfigDefault[HttpRequestTimeoutSec],",
          "    MaxTreePathsCount = try Number.FromText(SystemTable[MaxTreePathsCount]{0}) otherwise SettingsConfigDefault[MaxTreePathsCount],",
          "",
          "    Result = ",
          "\t\t[",
          "\t\t\tAliasList = AliasList",
          "\t\t\t, TransactionLogPeriodInDays = TransactionLogPeriodInDays                  ",
          "\t\t\t, ConvertGMTLogTimeStampsToLocalTimeZone = ConvertGMTLogTimeStampsToLocalTimeZone",
          "\t\t\t, HttpRequestPool = HttpRequestPool",
          "\t\t\t, HttpRequestLatencySec = HttpRequestLatencySec",
          "\t\t\t, HttpRequestRecurringLatencySec = HttpRequestRecurringLatencySec",
          "\t\t\t, HttpRequestMaxAttempts = HttpRequestMaxAttempts",
          "\t\t\t, HttpRequestTimeoutSec = HttpRequestTimeoutSec",
          "\t\t\t, MaxTreePathsCount = MaxTreePathsCount",
          "\t\t]",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "3cedbde1-e791-4f55-bc56-e735de463e95",
        "queryGroup": "Settings\\Configuration"
      },
      {
        "name": "fn_sendHttpRequest",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (RequestContent as text, optional RawBody as text, optional RequstNo as nullable number) =>  ",
          "    let ",
          "        //fn_trySendReques Start",
          "        fn_trySendRequest = (AttemptNo as number, optional ResponseMetaData as table) =>",
          "            let",
          "                // Request parameteres",
          "                NumberInPool = if (RequstNo = null) then 0 else RequstNo,  ",
          "                RequestDelay = if (AttemptNo <= 1)",
          "                                then ",
          "                                    if (Number.Mod(NumberInPool, HttpRequestPool) = 0) //Pooling",
          "                                    then HttpRequestLatencySec",
          "                                    else 0",
          "                                else (AttemptNo - 1) * HttpRequestRecurringLatencySec",
          "                ,",
          "                                    ",
          "                // Request URL, headers, options",
          "                //// Request = ConnectionConfig[#\"Host:Port\"] & \"/api/v1/\",",
          "                // Avoiding a dynamic data source when updating on the Service",
          "                Request = #\"11 HTTP(S)://HOST:PORT\" & \"/api/v1/\",",
          "                Options = [",
          "                        Headers = [",
          "                                    #\"Authorization\" = AuthType & \" \" & Auth, ",
          "                                    #\"Content-Type\" = \"application/json;charset=utf-8\",",
          "                                    #\"Cache-Control\" = \"no-cache, must-revalidate\"",
          "                        ],",
          "                        RelativePath = RequestContent,",
          "                        Content = Text.ToBinary(RawBody),",
          "                        Timeout = #duration(0, 0, 0, HttpRequestTimeoutSec),",
          "                        IsRetry = true,",
          "                        ManualStatusHandling = ",
          "                            {",
          "                                200, 201, 202,                  // Success, record the request result  ",
          "                                408, 429, 503, 504, 509,        // Handled error, repeat the request, if failure again - record the request result",
          "                                401, 403, 404                   // Handled error, record the request result  ",
          "                            }",
          "                ], ",
          "",
          "                //Send Request & BufferData",
          "                SendRequest = Function.InvokeAfter( () => try Web.Contents(Request, Options), #duration(0, 0, 0, RequestDelay) ),",
          "                BufferedData = SendRequest[[HasError]] & [Value = Binary.Buffer(SendRequest[Value])],  //avoid a risk of multple PQ calls      ",
          "",
          "                //fn_checkRequestError Start",
          "                fn_checkRequestError = (Response as any) as record =>",
          "                    if Response[HasError]?",
          "                        then [HasError = Response[HasError]?, ErrorReason = Response[Error]?[Reason]?, ErrorMessage = Response[Error]?[Message]?, ErrorDetails = Response[Error]?[Details]?]",
          "                        else ",
          "                          let",
          "                              ServerResponse = try Value.Metadata(SendRequest[Value]?)[Response.Status]?,",
          "                              ServerError = ",
          "\t\t\t\t\t    if ServerResponse[HasError]? ",
          "\t\t\t\t\t    then",
          "\t\t\t\t\t        [ HasError = ServerResponse[HasError]?, ErrorReason = ServerResponse[Error]?[Reason]?, ErrorMessage = ServerResponse[Error]?[Message]?, ErrorDetails = ServerResponse[Error]?[Details]? ]",
          "\t\t\t\t\t    else if not ServerResponse[HasError] and ServerResponse[Value] = null",
          "\t\t\t\t\t    then ",
          "\t\t\t\t\t        [ HasError = true, ErrorReason = \"Unknown\", ErrorMessage = \"Incorrect connection or authorization parameters may have been specified\", ErrorDetails = null ]",
          "\t\t\t\t\t    else",
          "\t\t\t\t\t\t[ HasError = false, ErrorReason = null, ErrorMessage = null, ErrorDetails = null ]",
          "                          in",
          "                            ServerError",
          "                ,",
          "                //fn_checkRequestError End",
          "",
          "                Error = fn_checkRequestError(BufferedData),",
          "                HttpResponseStatus = try Value.Metadata(SendRequest[Value]?)[Response.Status]? otherwise null, ",
          "                RequestResponseTime = if HttpResponseStatus <> null then DateTime.LocalNow() else null, // making sure the RequestStartTime and RequestResponseTime queries are executed in the correct order (the lazy evaluation effect)",
          "                AppendResponseMetaData = Table.InsertRows(    ResponseMetaData",
          "                                                            , Table.RowCount(ResponseMetaData)",
          "                                                            , {[  RequstNo = RequstNo",
          "                                                                , RequestContent = RequestContent",
          "                                                                , RequestBody = RawBody",
          "                                                                , AttemptNo = AttemptNo",
          "                                                                , RequestDelay = RequestDelay",
          "                                                                , RequestResponseTime = RequestResponseTime",
          "                                                                , HasError = Error[HasError]",
          "                                                                , ErrorReason = Error[ErrorReason]",
          "                                                                , ErrorMessage = Error[ErrorMessage]",
          "                                                                , ErrorDetails = Error[ErrorDetails]",
          "                                                                , HttpResponseStatus = HttpResponseStatus",
          "                                                            ]}",
          "                                                        ), ",
          "                RequestResult = if (Error[HasError]) ",
          "                then ",
          "                    Record.AddField([], \"@metadata\", AppendResponseMetaData)",
          "                else",
          "                    let                                ",
          "                        HttpRequestResult = if (List.MatchesAny({408, 429, 503, 504, 509}, each _ = Value.Metadata(BufferedData)[Response.Status]?) and AttemptNo < HttpRequestMaxAttempts)",
          "                                        then",
          "                                            @fn_trySendRequest(AttemptNo + 1, AppendResponseMetaData)                                                       // Repeat the request",
          "                                        else ",
          "                                            Record.AddField(try Json.Document(BufferedData[Value]) otherwise [], \"@metadata\", AppendResponseMetaData)       // Add @metadata field to the request result",
          "                    in",
          "                        HttpRequestResult",
          "                in",
          "                   RequestResult, ",
          "        //fn_trySendReques End",
          "        ",
          "        AuthType = if (ConnectionConfig[Namespace] = \"\") then \"Basic\" else \"CAMNamespace\",",
          "        Auth = Binary.ToText(",
          "                    Text.ToBinary(ConnectionConfig[Login] & ",
          "                    \":\" & ConnectionConfig[Password] & ",
          "                    ( if (ConnectionConfig[Namespace] = null or ConnectionConfig[Namespace] = \"\") then \"\" else \":\" & ConnectionConfig[Namespace] )",
          "                )               ",
          "                , BinaryEncoding.Base64), ",
          "        ",
          "        HttpRequestPool = SettingsConfig[HttpRequestPool], ",
          "        HttpRequestLatencySec = SettingsConfig[HttpRequestLatencySec],",
          "        HttpRequestRecurringLatencySec = SettingsConfig[HttpRequestRecurringLatencySec],",
          "        HttpRequestMaxAttempts = SettingsConfig[HttpRequestMaxAttempts],",
          "        HttpRequestTimeoutSec = SettingsConfig[HttpRequestTimeoutSec],",
          "        ResponseTable = fn_trySendRequest(1, #table(type table[",
          "                                                                  RequstNo = number",
          "                                                                , RequestContent = text",
          "                                                                , RequestBody = text",
          "                                                                , AttemptNo = number",
          "                                                                , RequestDelay = number",
          "                                                                , RequestResponseTime = datetime                                                                ",
          "                                                                , HasError = logical",
          "                                                                , ErrorReason = text",
          "                                                                , ErrorMessage = text",
          "                                                                , ErrorDetails = text",
          "                                                                , HttpResponseStatus = number",
          "                                                            ], {}) )",
          "    in",
          "        ResponseTable,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" fn_sendHttpRequest\",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Managing HTTP requests\",",
          "    Documentation.Category = \" Data extraction \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.6 \",",
          "    Documentation.Author = \" Alexey Zaitsev \",",
          "    Documentation.Examples = {[Description =  \"\",",
          "    Code = \" fn_sendHttpRequest( \"\"Users\"\", null, 1 ) \",",
          "    Result = \"A record in the format [ @odata.context as text, value as List, @metadata as Table ]\"]}",
          "    ]",
          "in",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "ca598f44-28c0-4f7a-b3d6-14eb5cfdd925",
        "queryGroup": "Functions\\DataExtraction"
      },
      {
        "name": "sREST_CubeDimensions",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_sendHttpRequest(\"ModelCubes()?$select=Name&$expand=Dimensions($select=Name)\", null, fn_getRequestNo(SysHttpRequests, \"sREST_CubeDimensions\"))",
          "        else null              ",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "e4bb5ac8-7ad3-4661-97e3-2e6596e54650",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_Rules",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_sendHttpRequest(\"ModelCubes()?$select=Name,Rules\", null, fn_getRequestNo(SysHttpRequests, \"sREST_Rules\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "503ec5f9-d221-4ef6-b810-067f56ef52f2",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_Processes",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_sendHttpRequest(\"Processes?$select=Name,PrologProcedure,MetadataProcedure,DataProcedure,EpilogProcedure\", null, fn_getRequestNo(SysHttpRequests, \"sREST_Processes\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "92481606-cfb9-41a8-8e64-eddb5246e6a2",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_DimensionElements",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "    if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "    then",
          "        let",
          "            Aliases = SettingsConfig[AliasList],",
          "            AliasesPlaceHolders =   if List.IsEmpty(Aliases) ",
          "                                    then \"Attributes\" ",
          "                                    else ",
          "                                        let",
          "                                            Filters = List.Transform(Aliases, each \"Attributes/\" & _ )",
          "                                        in",
          "                                            \"Attributes/Caption,\" & Text.Combine(Filters, \",\"),",
          "            Request = \"Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=Name,Type,Level,Index,\" & AliasesPlaceHolders & \",\"",
          "                & \"Parents;$expand=Parents($select=Name,\"",
          "                & \"Parents;$expand=Parents($select=Name,\"",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name,\" ",
          "                & \"Parents;$expand=Parents($select=Name))))))))))\"",
          "                &\"))\",",
          "            SendRequest = fn_sendHttpRequest( Request, null, fn_getRequestNo(SysHttpRequests, \"sREST_DimensionElements\") )",
          "        in",
          "            SendRequest",
          "    else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "8e5503df-ce39-409b-8552-03df7489a4de",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "xDel_REST_TMV",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    MDX = \"{ \"\"MDX\"\":\"\"SELECT  {[}Clients].MEMBERS} on ROWS, {[}Groups].MEMBERS} on COLUMNS FROM [}ClientGroups]  \"\"}\",",
          "    URL = \"http://localhost:50235/api/mdx?APIKey=f0tgXEdxaEV%2FSF5Ff35eTnxhF1ZEQRsbAFZVG39%2BZFFEYXMbAFZVG2Bkf3FgTn9xY3Rzam5ef3FgTn9xYE5%2FcWBBGxs%3D&pFormat=JSON&pSuppressZeros=true&pAlias=\",",
          "    Options = [",
          "                Headers = [",
          "                            #\"Authorization\" = \"Basic \" & Binary.ToText(Text.ToBinary(\"admin\" & \":\" & \"apple\"), BinaryEncoding.Base64), ",
          "                            #\"Content-Type\" = \"application/json;charset=utf-8\",",
          "                            #\"Cache-Contol\" = \"private, no-store, no-cache, must-revalidate\"",
          "                ],",
          "                Content = Text.ToBinary(MDX)",
          "    ],",
          "    Content = Options[Content],",
          "    #\"Imported CSV\" = Csv.Document(Content,[Delimiter=\",\", Columns=2, Encoding=1251, QuoteStyle=QuoteStyle.None]),",
          "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Imported CSV\",{{\"Column1\", type text}, {\"Column2\", type text}})",
          "    ",
          "    //SendRequest = Web.Contents(URL, Options),",
          "in",
          "    #\"Changed Type\""
        ],
        "kind": "m",
        "lineageTag": "05a148ba-2bb1-4445-b523-199fcab2d031"
      },
      {
        "name": "fn_requestCubeData",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (Cube as text, Dims as record, optional SuppressZeros as nullable logical, optional RequstNo as nullable number) =>  ",
          "        let",
          "            MDX1 = \"{ \"\"MDX\"\":\"\"SELECT \",",
          "            MDX2 = if (SuppressZeros = null or SuppressZeros = true) then \" NON EMPTY \" else \"\",",
          "            MDX3 = ",
          "                    let",
          "                        DimFilters = Record.ToTable(Dims),",
          "                        AddBracketsToName = Table.TransformColumns(DimFilters, { \"Name\", ( value ) => \"[\" & value & \"]\" }),",
          "                        CreateMembers = Table.FromRecords(Table.TransformRows(AddBracketsToName",
          "                                                                                    , ( row ) => Record.TransformFields(row, {\"Value\", each if List.IsEmpty( _ ) then { row[Name] & \".MEMBERS\" } else List.Transform( _ , each row[Name] & \".[\" & _ & \"]\" ) })",
          "                                                                )",
          "                        ),",
          "                        CreateAxes = Table.TransformColumns(CreateMembers, { \"Value\", ( value ) => \"{\" & Text.Combine(value, \",\") & \"}\" }),",
          "                        CombineAxes = Text.Combine(CreateAxes[Value], \" * \")",
          "                    in",
          "                        CombineAxes,",
          "            MDX4 = \" ON COLUMNS FROM [\" & Cube & \"]\"\" }\",",
          "            MDX = MDX1 & MDX2 & MDX3 & MDX4,",
          "    ",
          "        //SendRequest = fn_sendHttpRequest(\"ExecuteMDX?$expand=Axes($select=Tuples;$expand=Hierarchies($select=Name),Tuples($select=Ordinal;$expand=Members($select=Ordinal,Name,UniqueName))),Cells\", MDX, RequstNo)",
          "        //SendRequest = fn_sendHttpRequest(\"ExecuteMDX?$expand=Axes($expand=Hierarchies($select=Name),Tuples($select=Ordinal;$expand=Members($select=Ordinal,Name,UniqueName))),Cells\", MDX, RequstNo)",
          "        SendRequest = fn_sendHttpRequest(\"ExecuteMDX?$expand=Axes($expand=Tuples($select=Ordinal;$expand=Members($select=Ordinal,Name,UniqueName))),Cells($select=Ordinal,Value)\", MDX, RequstNo)",
          "    in",
          "        SendRequest,",
          "    ",
          "    documentation = [",
          "    Documentation.Name =  \" fn_requestCubeData\",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Returns cube data for the specified MDX expression \",",
          "    Documentation.Category = \" HTTP Request \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 2.0 \",",
          "    Documentation.Author = \" Alexey Zaitsev \",",
          "    Documentation.Examples = {[Description =  \"\",",
          "    Code = \" fn_requestCubeData(\"\"Cube1\"\", [Dim1 = {\"\"1\"\", \"\"2\"\", \"\"3\"\"}, Dim2 = {}, Dim3 = {\"\"Name\"\"}])\",",
          "    Result = \"Raw \"\"Cube1\"\" data for the specified dimension elements Dim1 and Dim3 and all elements Dim2\"]}",
          "    ]",
          "in",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "64a23768-d6ec-4dda-934c-a3f03d71ef07",
        "queryGroup": "Functions\\DataExtraction"
      },
      {
        "name": "sREST_}ClientGroups",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}ClientGroups\",",
          "    Dim1 = \"}Clients\",",
          "    Dim2 = \"}Groups\",",
          "    DimFilters = Record.FromList({{},{}}, {Dim1, Dim2}),",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then fn_requestCubeData(Cube, DimFilters, true, fn_getRequestNo(SysHttpRequests, \"sREST_}ClientGroups\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "be046bd4-94e1-467e-b407-4772dfe821c3",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_}CubeSecurity",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}CubeSecurity\",",
          "    Dim1 = \"}Cubes\",",
          "    Dim2 = \"}Groups\",",
          "    DimFilters = Record.FromList({{},{}}, {Dim1, Dim2}),",
          "    Source =",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"  ",
          "        then fn_requestCubeData(Cube, DimFilters, true, fn_getRequestNo(SysHttpRequests, \"sREST_}CubeSecurity\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "b6d23652-6abf-44e3-972f-1c53902deb8f",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "fn_tabulateCubeData",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (Axes as nullable list, Cells as nullable list, optional DimensionNames as nullable list) =>  ",
          "    let",
          "        //1. Axes members",
          "        AxesNullCheck = if Axes = null then {} else Axes,",
          "        ConvertAxesToTable = Table.FromList(AxesNullCheck, Splitter.SplitByNothing(), {\"AxesRecordSet\"}, null, ExtraValues.Ignore),",
          "        ExpandAxesRecordSet = Table.ExpandRecordColumn(ConvertAxesToTable, \"AxesRecordSet\", {\"Tuples\"}),",
          "        ExpandTuplesList = Table.ExpandListColumn(ExpandAxesRecordSet, \"Tuples\"),",
          "        ExpandTuplesRecordSet = Table.ExpandRecordColumn(ExpandTuplesList, \"Tuples\", {\"Ordinal\", \"Members\"}, {\"Tuples.Ordinal\", \"Tuples.Members\"}),",
          "        GetTargetTable =  Table.TransformColumns(ExpandTuplesRecordSet, ",
          "                                        { \"Tuples.Members\", ( value ) => ",
          "                                                let",
          "                                                    CreateTableFromListOfRecords = try Table.FromRecords(value, {\"Name\", \"UniqueName\"}) otherwise Table.FromRows({}, {\"Name\", \"UniqueName\"}),",
          "                                                    GetDimensionNames = Table.TransformColumns(CreateTableFromListOfRecords, ",
          "                                                                        { \"UniqueName\", ( value ) => Text.BetweenDelimiters(value, \"[\", \"].\", {0, RelativePosition.FromStart}, {0, RelativePosition.FromStart}) }",
          "                                                    ),",
          "                                                    PivotTable = Table.Pivot(GetDimensionNames, List.Distinct(GetDimensionNames[UniqueName]), \"UniqueName\", \"Name\")",
          "                                                in",
          "                                                   PivotTable ",
          "                                        }",
          "        ),",
          "        ColumnNames = if (DimensionNames = null or List.IsEmpty(DimensionNames))",
          "                then Table.ColumnNames(GetTargetTable[Tuples.Members]{0})",
          "                else DimensionNames,",
          "        ExpandTargetTable = Table.ExpandTableColumn(GetTargetTable, \"Tuples.Members\", Table.ColumnNames(GetTargetTable[Tuples.Members]{0}), ColumnNames),",
          "",
          "        //2. Cells",
          "        CellsNullCheck = if Cells = null then {} else Cells,",
          "        ConvertCellsToTable = Table.FromList(CellsNullCheck, Splitter.SplitByNothing(), {\"CellsRecordSet\"}, null, ExtraValues.Ignore),",
          "        ExpandCellsRecordSet = Table.ExpandRecordColumn(ConvertCellsToTable, \"CellsRecordSet\", {\"Ordinal\", \"Value\"}, {\"Cells.Ordinal\", \"Cells.Value\"}),",
          "",
          "        //3. Cells next to the Members ",
          "        CellsAlongMembers = Table.NestedJoin(",
          "                                ExpandTargetTable,",
          "                                \"Tuples.Ordinal\",   ",
          "                                ExpandCellsRecordSet,",
          "                                \"Cells.Ordinal\",",
          "                                \"Cells\",",
          "                                JoinKind.Inner",
          "        ),",
          "        ExpandCells = Table.ExpandTableColumn(CellsAlongMembers, \"Cells\", {\"Cells.Value\"}, {\"Value\"})",
          "    in",
          "        ExpandCells,",
          "    ",
          "    documentation = [",
          "    Documentation.Name =  \" fn_tabulateCubeData\",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Converts the raw data returned by an MDX query into a tabular form (the value of the cell is placed next to the dimension elements).",
          "                                    Ordinarily used with a dataset returned by the fn_requestCubeData() function. ",
          "                                    If explicit dimension names in the function call are omitted the dimension names from the Axes parameter data will be extracted. ",
          "                                    If the Axes list is empty the names must be specified explicitly in the third function parameter.\",",
          "    Documentation.Category = \" Data processing \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 2.0 \",",
          "    Documentation.Author = \" Alexey Zaitsev \",",
          "    Documentation.Examples = {[Description =  \"\",",
          "    Code = \" fn_tabulateCubeData( { Axes list }, { Cells list }, { Dim1, Dim2, Dim3 } ) \",",
          "    Result = \"A table in the format | Dim1 | Dim2 | Dim3 | Value |\"]}",
          "    ]",
          "in",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "0d70c881-2d72-454e-8dc6-e34a2bc22c4b",
        "queryGroup": "Functions\\DataExtraction"
      },
      {
        "name": "sREST_}ElementAttributes_}Groups",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}ElementAttributes_}Groups\",",
          "    Dim1 = \"}Groups\",",
          "    Dim2 = \"}ElementAttributes_}Groups\",",
          "    DimFilters = Record.FromList({{},{}}, {Dim1, Dim2}),",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then fn_requestCubeData(Cube, DimFilters, true, fn_getRequestNo(SysHttpRequests, \"sREST_}ElementAttributes_}Groups\"))",
          "        else null",
          "in ",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "a8b60389-1020-4257-b5d6-532eb5bfdd85",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_TransactionLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Period = SettingsConfig[TransactionLogPeriodInDays],",
          "    ",
          "    Result = if (Period < 0)",
          "    then",
          "        null",
          "    else",
          "        let",
          "            StartDate = Date.StartOfDay(DateTime.LocalNow() + #duration(-Period, 0, 0, 0)),",
          "            ODataStartDate = DateTime.ToText( StartDate, \"yyyy-MM-dd\" ) & \"T00:00:00Z\",",
          "            Source = ",
          "                if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "                then fn_sendHttpRequest(\"TransactionLogEntries?$filter=TimeStamp ge \" & ODataStartDate, null, fn_getRequestNo(SysHttpRequests, \"sREST_TransactionLog\"))",
          "                else null",
          "        in",
          "            Source",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "dd769d95-af30-4307-bb52-24095f2d15e6",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "SysName",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    SysNames =",
          "                [",
          "                      CubeTreeNodeName = \"CubeLevel_\"",
          "                    , CubeTreeAreaDefinition = \"Area definition\" ",
          "                    , ProcTreeNodeName = \"ProcLevel_\"",
          "                    , DimTransactionLogName = \"Dim_\"",
          "                    , DimHierarchyNodeName = \"Element_\"",
          "                    , SingleHttpRequestName = \"sREST_\"",
          "                    , MultipleHttpRequestName = \"mREST_\"",
          "                ]",
          "in",
          "    SysNames"
        ],
        "kind": "m",
        "lineageTag": "57d0c19f-f3ee-42f2-b6f3-560376df4148",
        "queryGroup": "SysData"
      },
      {
        "name": "sREST_Configuration",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_sendHttpRequest(\"Configuration\", null, fn_getRequestNo(SysHttpRequests, \"sREST_Configuration\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "0878dc99-a1be-4568-a6a7-9c2ecd7cc4d0",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "Source_Rules",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    NullTable = #table(type table[Name = text, TextContent = text, MetaData = text], {}),",
          "",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then",
          "            if (try not fn_isSuccessfulHttpRequest(sREST_Rules[#\"@metadata\"]) otherwise true) ",
          "            then     ",
          "                NullTable",
          "            else",
          "                let",
          "                    Value = sREST_Rules[value],",
          "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
          "                    ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"Rules\"}, {\"Name\", \"TextContent\"}),",
          "                    AddMetaDataName = Table.AddColumn(ExpandRecordSet, \"MetaData\", each FileExtentions{[Name = \"Rule\"]}[Name])    ",
          "                in",
          "                    AddMetaDataName                                       ",
          "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\"",
          "        then",
          "            DataFiles_RulesAndProcesses",
          "        else",
          "            NullTable,",
          "    MetaDataSelection = Table.SelectRows(Source, each FileExtentions{[Name = \"Rule\"]}[Name] = Text.From([MetaData])),",
          "    CubesWithRules = Table.SelectRows(MetaDataSelection, each [TextContent] <> null),",
          "    //Prepare Content for Parsing",
          "    PreparedContent = Table.TransformColumns(CubesWithRules, { \"TextContent\", ( text ) => fn_prepareCodeContent(text) })",
          "in",
          "    PreparedContent"
        ],
        "kind": "m",
        "lineageTag": "5b515ed7-b609-4f29-b2bf-22f6ae6855ef",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "Source_Processes",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    NullTable = #table(type table[Name = text, TextContent = text, MetaData = text], {}),",
          "",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then",
          "            if (try not fn_isSuccessfulHttpRequest(sREST_Processes[#\"@metadata\"]) otherwise true) ",
          "            then     ",
          "                NullTable",
          "            else",
          "                let",
          "                    Value = sREST_Processes[value],",
          "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
          "                    ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"PrologProcedure\", \"MetadataProcedure\", \"DataProcedure\", \"EpilogProcedure\"}),",
          "//                    NameSelection = Table.SelectRows(ExpandRecordSet, each ",
          "//                                                        let ",
          "//                                                            Name = [Name], ",
          "//                                                            NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
          "//                                                        in ",
          "//                                                            NameFilter",
          "//                                                ),",
          "                    AddTextContent = Table.AddColumn(ExpandRecordSet, \"TextContent\", each ",
          "                                    [PrologProcedure]",
          "                                    & \"#(cr)#(lf)\"",
          "                                    & [MetadataProcedure]",
          "                                    & \"#(cr)#(lf)\"",
          "                                    & [DataProcedure]",
          "                                    & \"#(cr)#(lf)\"",
          "                                    & [EpilogProcedure]),",
          "                    RemoveColumns = Table.RemoveColumns(AddTextContent,{\"PrologProcedure\", \"MetadataProcedure\", \"DataProcedure\", \"EpilogProcedure\"}),",
          "                    AddMetaDataName = Table.AddColumn(RemoveColumns, \"MetaData\", each FileExtentions{[Name = \"Process\"]}[Name])",
          "                in",
          "                    AddMetaDataName",
          "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
          "        then",
          "            DataFiles_RulesAndProcesses",
          "        else",
          "            NullTable,",
          "",
          "    MetaDataSelection = Table.SelectRows(Source, each FileExtentions{[Name = \"Process\"]}[Name] = Text.From([MetaData])),",
          "",
          "    PreparedContent = Table.TransformColumns(MetaDataSelection, { \"TextContent\", ( text ) => ",
          "                                                                                            let",
          "                                                                                                StartPos = if Text.PositionOf(text, \"#****Begin: Generated Statements***\") > 0 then Text.PositionOf(text, \"#****Begin: Generated Statements***\", Occurrence.First) else 0,",
          "                                                                                                EndPos = if Text.PositionOf(text, \"#****End: Generated Statements****\") > 0 then Text.PositionOf(text, \"#****End: Generated Statements****\", Occurrence.Last) else Text.Length(text),",
          "                                                                                                SubText = Text.Middle(text, StartPos, EndPos - StartPos + 1)",
          "                                                                                            in",
          "                                                                                                fn_prepareCodeContent(SubText) ",
          "                                                                }",
          "    )",
          "in",
          "    PreparedContent"
        ],
        "kind": "m",
        "lineageTag": "32ef5e25-1dfd-4a2a-a7ed-1d5acc8bcc4f",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "sREST_}StatsByCube",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}StatsByCube\",",
          "    Dim1 = \"}PerfCubes\",",
          "    Dim2 = \"}StatsStatsByCube\",",
          "    Dim3 = \"}TimeIntervals\",",
          "    DimFilters = Record.FromList({",
          "                                    {},",
          "                                    {\"Total Memory Used\", \"Memory Used for Views\", \"Memory Used for Calculations\", \"Memory Used for Feeders\", \"Memory Used for Input Data\", \"Number of Stored Calculated Cells\", \"Number of Populated String Cells\", \"Number of Populated Numeric Cells\", \"Number of Fed Cells\"},",
          "                                    {}//{\"LATEST\", \"0H00\", \"0H01\", \"0H02\", \"0H03\", \"0H04\", \"0H05\", \"0H06\", \"0H07\", \"0H08\", \"0H09\", \"0H10\", \"0H11\", \"0H12\", \"0H13\", \"0H14\", \"0H15\", \"0H16\", \"0H17\", \"0H18\", \"0H19\", \"0H20\", \"0H21\", \"0H22\", \"0H23\", \"1H00\", \"1H01\", \"1H02\", \"1H03\", \"1H04\", \"1H05\", \"1H06\", \"1H07\", \"1H08\", \"1H09\", \"1H10\", \"1H11\", \"1H12\", \"1H13\", \"1H14\", \"1H15\", \"1H16\", \"1H17\", \"1H18\", \"1H19\", \"1H20\", \"1H21\", \"1H22\", \"1H23\"}                                    ",
          "                                }, ",
          "                                {Dim1, Dim2, Dim3}),",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then fn_requestCubeData(Cube, DimFilters, true, fn_getRequestNo(SysHttpRequests, \"sREST_}StatsByCube\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "c097f7ee-389f-4ae6-9c9b-9e37e9814ec7",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "SettingsConfigDefault",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Result =",
          "\t\t\t\t[",
          "\t\t\t\t\t  AliasList = {}",
          "\t\t\t\t\t, InterfaceMaxTreeDepth = 11",
          "\t\t\t\t\t, MaxDimensionHierarchyDepth = 11",
          "\t\t\t\t\t, TransactionLogPeriodInDays = -1",
          "\t\t\t\t\t, ConvertGMTLogTimeStampsToLocalTimeZone = true                            ",
          "\t\t\t\t\t, HttpRequestPool = 120",
          "\t\t\t\t\t, HttpRequestLatencySec = 3",
          "\t\t\t\t\t, HttpRequestRecurringLatencySec = 1200",
          "\t\t\t\t\t, HttpRequestMaxAttempts = 3",
          "\t\t\t\t\t, HttpRequestTimeoutSec = 300",
          "\t\t\t\t\t, MaxTreePathsCount = 500000",
          "\t\t\t\t]",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "f398eead-5a15-4b08-b1b9-b216dc9c50b6",
        "queryGroup": "Settings\\Configuration"
      },
      {
        "name": "14 NAMESPACE",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Null"
          }
        ],
        "description": "Mandatory if the server security mode is set to CAM authentication",
        "expression": "null meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "6ec7006f-d327-4381-b100-da2ff4a37f3c",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "Table_TransformAllColumns",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (Table as table, Function, TypeForColumns as type, optional ColumnNames as list) =>",
          "let",
          "    columnNames = if (ColumnNames = null) then Table.ColumnNames(Table) else ColumnNames,",
          "    Transformation = Table.TransformColumns( Table, List.Transform(columnNames, each {_, Function, TypeForColumns} ) )",
          "in",
          "    Transformation ,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" Table_TransformAllColumns \",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Transforms all columns of a <code>table</code> with one <code>function</code> and one <code>type</code>. Optionial <code>ColumnNames</code> to limit to a specific list. \",",
          "    Documentation.Category = \" Table \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.0 \",",
          "    Documentation.Author = \" Internet \",",
          "    Documentation.Examples = {[Description =  \" TBD \",",
          "    Code = \" Table_TransformAllColumns( #table( {\"\"TextColumn1\"\", \"\"TextColumn2\"\"}, List.Zip( { {\"\"123<code>456</code>\"\" ,\"\"789<code>101</code>\"\"}, {\"\"ABC<code>DEF</code>\"\" ,\"\"GHI<code>JKL</code>\"\"} } ) ), fnRemoveHtmlTags, type text) \",",
          "    Result = \" #table( {\"\"TextColumn1\"\", \"\"TextColumn2\"\"}, List.Zip( { {\"\"123456\"\" ,\"\"789101\"\"}, {\"\"ABCDEF\"\" ,\"\"GHIJKL\"\"} } ) ) \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "8e276727-1012-40e2-b0a9-f56d3e98780a",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "fn_FlattenHierarchy (unused)",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let ",
          "  fFlattenHierarchy = (",
          "    hierarchyTable as table",
          "    ,parentKeyColumnIdentifier as text",
          "    ,parentNameColumnIdentifier as text",
          "    ,childKeyColumnIdentifier as text",
          "    ,childNameColumnIdentifier as text",
          "  ) as table =>",
          "  let",
          "    #\"Get Root Parents\" = Table.Distinct(",
          "      Table.SelectColumns(",
          "        Table.NestedJoin(hierarchyTable",
          "          ,parentKeyColumnIdentifier",
          "          ,hierarchyTable",
          "          ,childKeyColumnIdentifier",
          "          ,\"ROOT.PARENTS\"",
          "          ,JoinKind.LeftAnti",
          "        )",
          "        ,{",
          "          parentKeyColumnIdentifier",
          "          ,parentNameColumnIdentifier",
          "        }",
          "      )",
          "    ),",
          "    #\"Generate Hierarchy\" = fGetNextHierarchyLevel(",
          "      #\"Get Root Parents\"",
          "      ,parentKeyColumnIdentifier",
          "      ,1",
          "    ),",
          "    fGetNextHierarchyLevel = (",
          "      parentsTable as table",
          "      ,nextParentKeyColumnIdentifier as text",
          "      ,hierarchyLevel as number",
          "    ) =>",
          "      let ",
          "        vNextParentKey = childKeyColumnIdentifier & Text.From(hierarchyLevel),",
          "        vNextParentName = childNameColumnIdentifier & Text.From(hierarchyLevel),",
          "        #\"Left Join - hierarchyTable (Get Children)\" = Table.NestedJoin(parentsTable",
          "          ,nextParentKeyColumnIdentifier",
          "          ,hierarchyTable",
          "          ,parentKeyColumnIdentifier",
          "          ,\"NODE.CHILDREN\"",
          "          ,JoinKind.LeftOuter",
          "        ),",
          "        #\"Expand Column - NODE.CHILDREN\" = Table.ExpandTableColumn(#\"Left Join - hierarchyTable (Get Children)\"",
          "          ,\"NODE.CHILDREN\"",
          "          ,{",
          "              childKeyColumnIdentifier",
          "              ,childNameColumnIdentifier",
          "          },{",
          "              vNextParentKey",
          "              ,vNextParentName",
          "          }",
          "        ),",
          "        #\"Filter Rows - Parents with Children\" = Table.SelectRows(#\"Expand Column - NODE.CHILDREN\"",
          "          ,each Record.Field(_,vNextParentKey) <> null ",
          "              and Record.Field(_,vNextParentKey) <> Record.Field(_,nextParentKeyColumnIdentifier)",
          "        ),",
          "        #\"Generate Next Hierarchy Level\" = if Table.IsEmpty(#\"Filter Rows - Parents with Children\")",
          "          then parentsTable ",
          "          else Table.Combine(",
          "            {",
          "              parentsTable",
          "              ,@fGetNextHierarchyLevel(",
          "                #\"Filter Rows - Parents with Children\"",
          "                ,vNextParentKey",
          "                ,hierarchyLevel + 1",
          "              )",
          "            }",
          "        )",
          "      in ",
          "        #\"Generate Next Hierarchy Level\",",
          "    #\"Add Column - HierarchyPath\" = Table.AddColumn(#\"Generate Hierarchy\",",
          "      \"HierarchyPath\"",
          "      ,each Text.Combine(",
          "        List.Transform(",
          "          Record.FieldValues(",
          "            Record.SelectFields(_,",
          "              List.Select(Table.ColumnNames(#\"Generate Hierarchy\")",
          "                ,each Text.StartsWith(_,childKeyColumnIdentifier) ",
          "                  or Text.StartsWith(_,parentKeyColumnIdentifier)",
          "              )",
          "            )",
          "          )",
          "          ,each Text.From(_)",
          "        )",
          "        ,\"|\"",
          "      )",
          "      ,type text",
          "    ),",
          "    #\"Add Column - HierarchyNodeID\" = Table.AddColumn(#\"Add Column - HierarchyPath\",",
          "      \"HierarchyNodeID\"",
          "      ,each List.Last(Text.Split([HierarchyPath],\"|\"))",
          "      ,type text",
          "    ),",
          "    #\"Add Column - HierarchyLevel\" = Table.AddColumn(#\"Add Column - HierarchyNodeID\",",
          "      \"HierarchyLevel\"",
          "      ,each List.Count(Text.Split([HierarchyPath],\"|\"))",
          "      ,Int64.Type",
          "    ),",
          "    #\"Add Column - IsLeafLevel\" = Table.AddColumn(#\"Add Column - HierarchyLevel\",",
          "      \"IsLeafLevel\"",
          "      ,each List.Contains(",
          "          List.Transform(",
          "            Table.Column(",
          "              Table.NestedJoin(hierarchyTable",
          "              ,childKeyColumnIdentifier",
          "              ,hierarchyTable",
          "              ,parentKeyColumnIdentifier",
          "              ,\"LEAFLEVEL.CHILDREN\"",
          "              ,JoinKind.LeftAnti",
          "              )",
          "              ,childKeyColumnIdentifier",
          "            )",
          "            ,each Text.From(_)",
          "          )",
          "        ,List.Last(Text.Split([HierarchyPath],\"|\"))",
          "      )",
          "      ,type logical",
          "    )",
          "  in",
          "    #\"Add Column - IsLeafLevel\",",
          "  //Documentation",
          "  fFlattenHierarchyType = type function (",
          "    hierarchyTable as (type table meta [",
          "      Documentation.FieldCaption = \"Hierarchy\"",
          "      ,Documentation.LongDescription = \"A table containing a parent-child hierarchy\"",
          "      ]",
          "    )",
          "    ,parentKeyColumnIdentifier as (type text meta [",
          "      Documentation.FieldCaption = \"Parent Key Column Identifier\"",
          "      ,Documentation.LongDescription = \"The name of the column used to identify the key of the parent node in the hierarchy\"",
          "      ,Documentation.SampleValues = { \"ParentID\" }",
          "      ]",
          "    )",
          "    ,parentNameColumnIdentifier as (type text meta [",
          "      Documentation.FieldCaption = \"Parent Name Column Identifier\"",
          "      ,Documentation.LongDescription = \"The name of the column used to identify the name of the parent node in the hierarchy\"",
          "      ,Documentation.SampleValues = { \"ParentName\" }",
          "      ]",
          "    )",
          "    ,childKeyColumnIdentifier as (type text meta [",
          "      Documentation.FieldCaption = \"Child Key Column Identifier\"",
          "      ,Documentation.LongDescription = \"The name of the column used to identify the key of the child node in the hierarchy\"",
          "      ,Documentation.SampleValues = { \"ChildID\" }",
          "      ]",
          "    )",
          "    ,childNameColumnIdentifier as (type text meta [",
          "      Documentation.FieldCaption = \"Child Name Column Identifier\"",
          "      ,Documentation.LongDescription = \"The name of the column used to identify the name of the child node in the hierarchy\"",
          "      ,Documentation.SampleValues = { \"ChildName\" }",
          "      ]",
          "    )",
          "  ) as list meta [",
          "    Documentation.Name = \"fFlattenHierarchy\"",
          "    ,Documentation.LongDescription = \"Returns a flattened hierarchy table from a parent-child hierarchy table input.\"",
          "      & \"The number of columns returned is based on the depth of the hierarchy. Each child node will be prefixed\"",
          "      & \"with the value specified for the childNameColumnIdentifier parameter\"",
          "    ,Documentation.Examples = {",
          "      [",
          "      Description = \"Returns a flattened hierarchy table from a parent-child hierarchy table\"",
          "      ,Code = \"fFlattenHierarchy(barksdaleOrganisation, \"\"ParentNodeID\"\", \"\"ParentNodeName\"\", \"\"ChildNodeID\"\", \"\"ChildNodeName\"\")\"",
          "      ,Result = \"{100,2,3,51,62,\"\"Stringer\"\",\"\"Shamrock\"\",\"\"Slim Charles\"\",\"\"Bodie\"\",\"\"Pudding\"\",5,\"\"100|2|3|51|62\"\",TRUE,62}\"",
          "        & \",{100,2,3,51,\"\"Stringer\"\",\"\"Shamrock\"\",\"\"Slim Charles\"\",\"\"Bodie\"\",4,\"\"100|2|3|51\"\",FALSE,51}\"",
          "      ]",
          "    }",
          "  ]",
          "in",
          "  Value.ReplaceType(fFlattenHierarchy, fFlattenHierarchyType)"
        ],
        "kind": "m",
        "lineageTag": "eed3b0fe-d6ea-423e-8015-8d58df77e3a2",
        "queryGroup": "Functions\\Utils"
      },
      {
        "name": "sREST_}StatsByClient",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}StatsByClient\",",
          "    Dim1 = \"}PerfClients\",",
          "    Dim2 = \"}StatsStatsByClient\",",
          "    Dim3 = \"}TimeIntervals\",",
          "    DimFilters = Record.FromList({",
          "                                {},",
          "                                {\"Message Count\", \"Request Count\"},",
          "                                {}//{\"LATEST\", \"0H00\", \"0H01\", \"0H02\", \"0H03\", \"0H04\", \"0H05\", \"0H06\", \"0H07\", \"0H08\", \"0H09\", \"0H10\", \"0H11\", \"0H12\", \"0H13\", \"0H14\", \"0H15\", \"0H16\", \"0H17\", \"0H18\", \"0H19\", \"0H20\", \"0H21\", \"0H22\", \"0H23\", \"1H00\", \"1H01\", \"1H02\", \"1H03\", \"1H04\", \"1H05\", \"1H06\", \"1H07\", \"1H08\", \"1H09\", \"1H10\", \"1H11\", \"1H12\", \"1H13\", \"1H14\", \"1H15\", \"1H16\", \"1H17\", \"1H18\", \"1H19\", \"1H20\", \"1H21\", \"1H22\", \"1H23\"}                               ",
          "                            }, ",
          "                            {Dim1, Dim2, Dim3}),",
          "    Source = ",
          "    if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "    then fn_requestCubeData(Cube, DimFilters, false, fn_getRequestNo(SysHttpRequests, \"sREST_}StatsByClient\"))",
          "    else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "c9c8b9b0-9478-4de2-b54d-093405ce97ad",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_}StatsForServer",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Cube = \"}StatsForServer\",",
          "    Dim1 = \"}StatsStatsForServer\",",
          "    Dim2 = \"}TimeIntervals\",",
          "    DimFilters = Record.FromList({",
          "                            {},",
          "                            {}//{\"LATEST\", \"0H00\", \"0H01\", \"0H02\", \"0H03\", \"0H04\", \"0H05\", \"0H06\", \"0H07\", \"0H08\", \"0H09\", \"0H10\", \"0H11\", \"0H12\", \"0H13\", \"0H14\", \"0H15\", \"0H16\", \"0H17\", \"0H18\", \"0H19\", \"0H20\", \"0H21\", \"0H22\", \"0H23\", \"1H00\", \"1H01\", \"1H02\", \"1H03\", \"1H04\", \"1H05\", \"1H06\", \"1H07\", \"1H08\", \"1H09\", \"1H10\", \"1H11\", \"1H12\", \"1H13\", \"1H14\", \"1H15\", \"1H16\", \"1H17\", \"1H18\", \"1H19\", \"1H20\", \"1H21\", \"1H22\", \"1H23\"}                           ",
          "                        }, ",
          "                        {Dim1, Dim2}),",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_requestCubeData(Cube, DimFilters, true, fn_getRequestNo(SysHttpRequests, \"sREST_}StatsForServer\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "d75f76e7-f14c-45e9-a400-3e671682169c",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "fn_transformTimeIntervalsToDateTime",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(SourceTable as table, TimeIntervalsColumnName as text) as table =>",
          "let",
          "    UtcNow = DateTimeZone.FixedUtcNow(),",
          "    NowYear = Date.Year(UtcNow),",
          "    NowMonth = Date.Month(UtcNow),",
          "    NowDay = Date.Day(UtcNow),",
          "    NowHour = Time.Hour(UtcNow),",
          "    NowMinute = Time.Minute(UtcNow),",
          "",
          "    LocalNow = DateTimeZone.FixedLocalNow(), ",
          "    ZoneHours = DateTimeZone.ZoneHours(LocalNow),",
          "    ZoneMinutes = DateTimeZone.ZoneMinutes(LocalNow),",
          "",
          "    AddDateTime = Table.TransformColumns(SourceTable, ",
          "                                        { \"DateTime\", ",
          "                                            each",
          "                                                let",
          "                                                    StrInterval = Text.From( _ ),",
          "                                                    DateTime = ",
          "                                                            if (StrInterval = \"LATEST\") // DateTime.FixedLocalNow() not strictly equal to Cognos \"LATEST\" time because of Http Request execution period",
          "                                                            then  ",
          "                                                                #datetime(",
          "                                                                            NowYear,",
          "                                                                            NowMonth,",
          "                                                                            NowDay,",
          "                                                                            NowHour,",
          "                                                                            0,",
          "                                                                            0",
          "                                                                )",
          "                                                            else if (Text.Contains(StrInterval, \"M\", Comparer.Ordinal) and StrInterval <> \"LATEST\")",
          "                                                            then",
          "                                                                #datetime(",
          "                                                                            NowYear,",
          "                                                                            NowMonth,",
          "                                                                            NowDay,",
          "                                                                            NowHour,",
          "                                                                            try Number.FromText(Text.AfterDelimiter(StrInterval, \"M\")) otherwise 0,",
          "                                                                            0",
          "                                                                ) ",
          "                                                                - #duration(",
          "                                                                            0, ",
          "                                                                            (try Number.FromText(Text.BeforeDelimiter(StrInterval, \"M\")) otherwise 0), ",
          "                                                                            0, ",
          "                                                                            0",
          "                                                                )                                                                                                                            ",
          "                                                            else if (Text.Contains(StrInterval, \"H\", Comparer.Ordinal) and StrInterval <> \"LATEST\")",
          "                                                            then   ",
          "                                                                #datetime(",
          "                                                                            NowYear,",
          "                                                                            NowMonth,",
          "                                                                            NowDay,",
          "                                                                            try Number.FromText(Text.AfterDelimiter(StrInterval, \"H\")) otherwise 0,",
          "                                                                            0,",
          "                                                                            0",
          "                                                                ) ",
          "                                                                - #duration(",
          "                                                                            (try Number.FromText(Text.BeforeDelimiter(StrInterval, \"H\")) otherwise 0),",
          "                                                                            0,",
          "                                                                            0,",
          "                                                                            0",
          "                                                                )         ",
          "                                                            else null,",
          "                                                    LocalDateTimeZone = if (SettingsConfig[ConvertGMTLogTimeStampsToLocalTimeZone])",
          "                                                                        then DateTimeZone.SwitchZone(DateTime.AddZone(DateTime, 0, 0), ZoneHours, ZoneMinutes)",
          "                                                                        else DateTime.AddZone(DateTime, ZoneHours, ZoneMinutes)                                                                        ",
          "                                                in",
          "                                                    LocalDateTimeZone",
          "                                    }                          ",
          "),",
          "    RemoveNonOverriddenRows = Table.SelectRows(AddDateTime, each [DateTime] <= UtcNow) // Cognos may not erase the values opposite the 0H* elements that still store the previous day's data",
          "in",
          "    RemoveNonOverriddenRows"
        ],
        "kind": "m",
        "lineageTag": "d1da622d-fb57-4b87-8608-5dabec421842",
        "queryGroup": "Functions\\StatCubesHandling"
      },
      {
        "name": "fn_convertUTCtoLocalTimeZone",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(UTC as datetimezone) as datetimezone =>",
          "let",
          "    ZoneHours = DateTimeZone.ZoneHours(DateTimeZone.FixedLocalNow()),",
          "    ZoneMinutes = DateTimeZone.ZoneMinutes(DateTimeZone.FixedLocalNow()),",
          "    LocalDateTimeZone = DateTimeZone.SwitchZone(UTC, ZoneHours, ZoneMinutes) ",
          "in",
          "    LocalDateTimeZone"
        ],
        "kind": "m",
        "lineageTag": "95b346c2-2f6e-4a40-9a8c-a8a352d8ee3b",
        "queryGroup": "Functions\\StatCubesHandling"
      },
      {
        "name": "fn_aggregateMTimeIntervalsToCurrentHour",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(SourceTable as table, GroupedColumns as list, AggregatedColumns as list, TimeIntervalsColumnName as text) as table =>",
          "let",
          "    SelectMRecords = Table.SelectRows(SourceTable, each ",
          "                                                        Text.From(Record.Field( _ ,  TimeIntervalsColumnName)) = \"LATEST\"                  ",
          "                                                    or Text.Contains(Record.Field( _ ,  TimeIntervalsColumnName), \"M\", Comparer.Ordinal)",
          "    ),",
          "    ReplceTimeIntervalsColumnValues = Table.ReplaceValue(",
          "                                                        SelectMRecords ",
          "                                                        , each Record.Field( _ ,  TimeIntervalsColumnName )",
          "                                                        , each \"LATEST\"",
          "                                                        , Replacer.ReplaceValue",
          "                                                        , { TimeIntervalsColumnName }                                                       ",
          "    ),            ",
          "    AggregatedTable = Table.Group(ReplceTimeIntervalsColumnValues, GroupedColumns, AggregatedColumns),",
          "    SelectHRecords = Table.SelectRows(SourceTable, each ",
          "                                                        Text.From(Record.Field( _ ,  TimeIntervalsColumnName)) <> \"LATEST\"                  ",
          "                                                    and Text.Contains(Record.Field( _ ,  TimeIntervalsColumnName), \"H\", Comparer.Ordinal)",
          "    ),",
          "    ResultTable = Table.Combine({ AggregatedTable, SelectHRecords })",
          "in",
          "    ResultTable"
        ],
        "kind": "m",
        "lineageTag": "3bb36c7c-2415-491f-a98f-3974b2511381",
        "queryGroup": "Functions\\StatCubesHandling"
      },
      {
        "name": "Source_TransactionLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    ///TODO - check fields!!!",
          "    NullTable = #table(type table[RecordNo = number, TimeStamp = datetime, Tuple = any, User = text, Cube = text, OldValue = text, NewValue = text], {}),",
          "    ",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then",
          "            if (try not fn_isSuccessfulHttpRequest(sREST_TransactionLog[#\"@metadata\"]) otherwise true) ",
          "            then     ",
          "                NullTable",
          "            else",
          "                let",
          "                    Value = sREST_TransactionLog[value],",
          "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
          "                    ExpandTransactionLog = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"TimeStamp\", \"User\", \"Cube\", \"Tuple\", \"OldValue\", \"NewValue\"}),",
          "                    NameSelection = Table.SelectRows(ExpandTransactionLog, each ",
          "                                                                let ",
          "                                                                    Cube = [Cube], ",
          "                                                                    NameFilter = List.MatchesAny( Cubes[Cube], each _ = Text.From ( Cube ))",
          "                                                                in ",
          "                                                                    NameFilter",
          "                                        ),",
          "                    RemoveNullRows = Table.SelectRows(NameSelection, each [Cube] <> null),",
          "                    AddIndexColumn = Table.AddIndexColumn(RemoveNullRows, \"RecordNo\", 0)",
          "                in",
          "                    AddIndexColumn",
          "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
          "        then",
          "            let",
          "                SourceTable = ",
          "                    if DataFiles_TransactionLog = null ",
          "                    then NullTable ",
          "                    else ",
          "                        let ",
          "                            Source = DataFiles_TransactionLog,",
          "                            AddIndexColumn = Table.AddIndexColumn(SourceTable, \"RecordNo\", 0)",
          "                        in",
          "                           AddIndexColumn ",
          "            in",
          "                SourceTable",
          "        else",
          "            NullTable,",
          "    TransformColumnTypes = Table.TransformColumnTypes(Source, {{\"RecordNo\", type number}, {\"TimeStamp\", type datetime}, {\"User\", type text}, {\"Cube\", type text}, {\"OldValue\", type text}, {\"NewValue\", type text}})",
          "in",
          "    TransformColumnTypes"
        ],
        "kind": "m",
        "lineageTag": "2651dfdf-1ee7-4a65-908d-8aa6f117ffd9",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "fn_isSuccessfulHttpRequest",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(RequestTable as table) as logical => ",
          "    let",
          "        LastResponseStatus = Table.SelectRows(RequestTable, each [AttemptNo] = List.Max(RequestTable[AttemptNo]))[HttpResponseStatus]{0},",
          "        IsSuccessful = List.MatchesAny({200, 201, 202}, each _ = LastResponseStatus)",
          "    in ",
          "        IsSuccessful"
        ],
        "kind": "m",
        "lineageTag": "4763f2e9-45a4-4e7c-bded-9b50ff826ff1",
        "queryGroup": "Functions\\DataExtraction"
      },
      {
        "name": "sREST_Users",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then fn_sendHttpRequest(\"Users\", null, fn_getRequestNo(SysHttpRequests, \"sREST_Users\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "d10341f6-061b-4093-860e-535b25e658ed",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "sREST_DimensionAttributes",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then fn_sendHttpRequest(\"Dimensions?$select=Name&$expand=Hierarchies($select=Name;$expand=ElementAttributes($select=Name,Type))\", null, fn_getRequestNo(SysHttpRequests, \"sREST_DimensionAttributes\"))",
          "        else null                ",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "b2df3695-a5c6-4fad-bc6a-b3390d40beec",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "fn_getRequestNo",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(RequestList as list, RequestName as text) =>",
          "    List.PositionOf(RequestList, List.Single(List.Select(RequestList, each _ = RequestName))) + 1"
        ],
        "kind": "m",
        "lineageTag": "e15dc236-86c3-4925-bbe5-b5e7ac5aff55",
        "queryGroup": "Functions\\DataExtraction"
      },
      {
        "name": "sREST_Server",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Record"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "        then fn_sendHttpRequest(\"Server\", null, fn_getRequestNo(SysHttpRequests, \"sREST_Server\"))",
          "        else null",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "3a80f0be-5302-4a73-b1e2-5a1cb120ca5c",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "SysHttpRequestData",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Source = #table(type table[Name = text, Group = text, Data = any],",
          "        {",
          "            { \"sREST_Rules\", \t\t\t            \"Basic\",  \t#\"sREST_Rules\"\t\t\t\t\t\t},",
          "            { \"sREST_Processes\", \t\t\t        \"Basic\",    #\"sREST_Processes\"\t\t\t\t\t},",
          "            { \"sREST_Configuration\",\t\t        \"Basic\",    #\"sREST_Configuration\"\t\t\t\t},",
          "            { \"sREST_Server\",\t\t                \"Basic\",\t#\"sREST_Server\"\t\t\t\t\t\t},",
          "            { \"sREST_CubeDimensions\",\t\t        \"Basic\",\t#\"sREST_CubeDimensions\"\t\t\t\t},",
          "            { \"sREST_DimensionAttributes\",\t\t    \"Basic\",    #\"sREST_DimensionAttributes\"\t\t},",
          "            { \"sREST_DimensionElements\",\t\t    \"Basic\",    #\"sREST_DimensionElements\"\t\t\t},",
          "            { \"sREST_Users\",\t\t\t            \"Basic\",    #\"sREST_Users\"\t\t\t\t\t\t},",
          "            { \"sREST_}ClientGroups\",\t\t        \"Basic\",\t#\"sREST_}ClientGroups\"\t\t\t\t},",
          "            { \"sREST_}CubeSecurity\",\t\t        \"Basic\",\t#\"sREST_}CubeSecurity\"\t\t\t\t},",
          "            { \"sREST_}ElementAttributes_}Groups\",\t\"Basic\",    #\"sREST_}ElementAttributes_}Groups\"\t},",
          "            { \"sREST_}StatsByCube\",\t\t\t        \"Stats\",\t#\"sREST_}StatsByCube\"\t\t\t\t},",
          "            { \"sREST_}StatsByClient\",\t\t        \"Stats0\",\t#\"sREST_}StatsByClient\"\t\t\t\t},",
          "            { \"sREST_}StatsForServer\",\t\t        \"Stats\",\t#\"sREST_}StatsForServer\"\t\t\t},",
          "            { \"sREST_TransactionLog\",\t\t        \"TransLog\",\t#\"sREST_TransactionLog\"\t\t\t\t}",
          "        }",
          "    )",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "23b68ff0-6348-4728-b80a-1684d9feb94a",
        "queryGroup": "SysData"
      },
      {
        "name": "SettingsConfig",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    Source = ",
          "            SettingsConfigDefault ",
          "            & (if #\"01 MODE\" = \"Desktop\" then LoadXMLSettingsConfig else []) ",
          "            & (if #\"21 MAX TREE PATHS COUNT\" > 0 then [MaxTreePathsCount = #\"21 MAX TREE PATHS COUNT\"] else [])",
          "            & (",
          "                if #\"22 ALIASES\" <> \"\" ",
          "                    then         ",
          "                        let",
          "                            SplitTextByDelimiter = Splitter.SplitTextByAnyDelimiter({\";\", \",\"}, QuoteStyle.None)(#\"22 ALIASES\"), ",
          "                            TrimAliases = List.Transform( SplitTextByDelimiter, each Text.Trim ( _ ) )",
          "                        in",
          "                            [AliasList = TrimAliases]",
          "                    else",
          "                        []",
          "                )",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "58d57b9f-b1e7-4fe9-9532-12c04e52c8d9",
        "queryGroup": "Settings\\Configuration"
      },
      {
        "name": "ConnectionConfig",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          },
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    Connection = ",
          "                [",
          "                      ConnectionType = if #\"02 CONNECTION TYPE\" = null then \"Service\" else #\"02 CONNECTION TYPE\"",
          "                    , #\"Host:Port\" = if #\"11 HTTP(S)://HOST:PORT\" = null then \"REST\" else #\"11 HTTP(S)://HOST:PORT\"",
          "                ],",
          "    Auth = ",
          "            if (#\"01 MODE\" = \"Desktop\") ",
          "            then",
          "                LoadXMLConnectionConfig",
          "            else",
          "                [",
          "                      Login = if #\"12 LOGIN\" = null then \"\" else #\"12 LOGIN\"",
          "                    , Password = if #\"13 PASSWORD\" = null then \"\" else #\"13 PASSWORD\"",
          "                    , Namespace = if #\"14 NAMESPACE\"  = null then \"\" else #\"14 NAMESPACE\"",
          "                ]",
          "in",
          "    Connection & Auth"
        ],
        "kind": "m",
        "lineageTag": "eeafee85-d327-40a2-8034-fa3a46e8d7a2",
        "queryGroup": "Settings\\Configuration"
      },
      {
        "name": "DataFiles_Dimensions",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Result = ",
          "        if ConnectionConfig[ConnectionType] = \"DataFiles\" then",
          "            let",
          "                //Source = ( try Table.Buffer(Folder.Files(ConnectionConfig[DataFilesPath])) otherwise Table.FromRecords({ [Name = null, Extension = null] }) )[[Name], [Extension]],",
          "                // Avoiding a dynamic data source when updating on the Service",
          "                Source = ( try Table.Buffer(Folder.Files(#\"31 DATA FILES PATH\")) otherwise Table.FromRecords({ [Name = null, Extension = null] }) )[[Name], [Extension]],",
          "                ExtSelection = Table.SelectRows(Source, each FileExtentions{[Name = \"Dimension\"]}[Extension] = Text.Lower([Extension])),",
          "                NameSelection = Table.SelectRows(ExtSelection, each ",
          "                                                        let ",
          "                                                            Name = [Name], ",
          "                                                            NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
          "                                                        in NameFilter",
          "                                ),",
          "                RemoveExtensionFromName = Table.ReplaceValue(  NameSelection",
          "                                                                , each [Extension]",
          "                                                                , each \"\"",
          "                                                                , Replacer.ReplaceText",
          "                                                                , {\"Name\"}  ",
          "                                                            ),                        ",
          "                RemovedExt = Table.RemoveColumns(RemoveExtensionFromName,{\"Extension\"}),",
          "                RenameColumn = Table.RenameColumns(RemovedExt,{{\"Name\", \"Dimension\"}})",
          "            in",
          "                RenameColumn",
          "        else null",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "ea764712-0866-4a33-a7f1-89b65cb627fc",
        "queryGroup": "Data\\UserData\\DataFilesLoad"
      },
      {
        "name": "DataFiles_TransactionLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Null"
          }
        ],
        "expression": [
          "let",
          "    Result = ",
          "        if ConnectionConfig[ConnectionType] = \"DataFiles\" then",
          "            let",
          "                Period = SettingsConfig[TransactionLogPeriodInDays],",
          "",
          "                Result = if (Period < 0)",
          "                then",
          "                    null",
          "                else",
          "                    let",
          "                        EndDateTime = DateTime.ToText(DateTime.LocalNow(), \"yyyyMMddhhmmss\"),",
          "                        StartDateTime = DateTime.ToText(Date.StartOfDay(DateTime.LocalNow() + #duration(-Period, 0, 0, 0)), \"yyyyMMddhhmmss\"),",
          "                        //Source = ( try Table.Buffer(Folder.Files(ConnectionConfig[LogFilesPath])) otherwise Table.FromRecords({ [Name = null, Extension = null] }) ),",
          "                        // Avoiding a dynamic data source when updating on the Service",
          "                        Source = ( try Table.Buffer(Folder.Files(#\"32 LOG FILES PATH\")) otherwise Table.FromRecords({ [Name = null, Extension = null] }) )[[Name], [Extension]],",
          "                        ExtSelection = Table.SelectRows(Source, each FileExtentions{[Name = \"TransactionLog\"]}[Extension] = Text.From([Extension])),",
          "                        LogNameSelection = Table.SelectRows(ExtSelection, each Text.StartsWith( [Name], KeyWords[TransactionLogRef] )),",
          "                        RemoveExtensionFromName = Table.ReplaceValue(  ",
          "                                                                        LogNameSelection",
          "                                                                        , each [Extension]",
          "                                                                        , each \"\"",
          "                                                                        , Replacer.ReplaceText",
          "                                                                        , {\"Name\"}  ",
          "                        ),",
          "                        PeriodSelection = Table.SelectRows(RemoveExtensionFromName, each ( ",
          "                                                                                            [Name] >= KeyWords[TransactionLogRef] & StartDateTime and [Name] <= KeyWords[TransactionLogRef] & EndDateTime ",
          "                                                                                            or [Name] = KeyWords[TransactionLogRef]",
          "                                                                                        )",
          "                        ),",
          "                        CombineFiles = Table.AddColumn(",
          "                                                        PeriodSelection",
          "                                                        , \"CombinedFiles\"",
          "                                                        , each try Table.Buffer(Csv.Document(",
          "                                                            [Content]",
          "                                                            , { \"SetId\", \"TimeStamp\", \"ReplicatiomTime\", \"User\", \"ValueType\", \"OldValue\", \"NewValue\", \"Cube\", \"Tuple\" }",
          "                                                            , \",\"",
          "                                                            , ExtraValues.List",
          "                                                            , 65001",
          "                                                        )) otherwise null",
          "                        ),",
          "                        ExpandCombineFiles = Table.ExpandTableColumn(Table.FromList(CombineFiles[CombinedFiles], Splitter.SplitByNothing(), {\"CombinedFiles\"}, null, ExtraValues.Ignore), \"CombinedFiles\", ",
          "                                                                                                { \"SetId\", \"TimeStamp\", \"User\", \"OldValue\", \"NewValue\", \"Cube\", \"Tuple\" }",
          "                        ),",
          "                        RemoveIrrelevant = Table.SelectRows(ExpandCombineFiles, each not Text.StartsWith( [SetId], \"#\") and [Cube] <> \"\" and [Cube] <> null),",
          "                        CubeNameSelection = Table.SelectRows(RemoveIrrelevant, each ",
          "                                                let ",
          "                                                    Name = [Cube], ",
          "                                                    NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
          "                                                in ",
          "                                                    NameFilter",
          "                        ),",
          "                        RemoveEmptyValues = if Table.RowCount( CubeNameSelection ) > 0",
          "                                            then Table.FromRecords(Table.TransformRows(CubeNameSelection",
          "                                                                                        , (row) => Record.TransformFields(row, {\"Tuple\", each List.Select( _ , each _ <> \"\" ) })",
          "                                                                                        )",
          "                                            )",
          "                                            else CubeNameSelection,",
          "                        ConvertToDateTime = Table.TransformColumns(RemoveEmptyValues,",
          "                                                                                        { \"TimeStamp\", ( value ) =>",
          "                                                                                            let ",
          "                                                                                                DateTimeZone = #datetimezone(",
          "                                                                                                    (try Number.FromText(Text.Middle(value, 0, 4)) otherwise 0)",
          "                                                                                                    , (try Number.FromText(Text.Middle(value, 4, 2)) otherwise 0)",
          "                                                                                                    , (try Number.FromText(Text.Middle(value, 6, 2)) otherwise 0)",
          "                                                                                                    , (try Number.FromText(Text.Middle(value, 8, 2)) otherwise 0)",
          "                                                                                                    , (try Number.FromText(Text.Middle(value, 10, 2)) otherwise 0)",
          "                                                                                                    , (try Number.FromText(Text.Middle(value, 12, 2)) otherwise 0)",
          "                                                                                                    , 0",
          "                                                                                                    , 0",
          "                                                                                                    )",
          "                                                                                            in",
          "                                                                                                if (try Logical.FromText(SettingsConfig{[Name = \"ConvertGMTLogTimeStampsToLocalTimeZone\"]}[Value]) otherwise SettingsConfigDefault{[Name = \"ConvertGMTLogTimeStampsToLocalTimeZone\"]}[Value])",
          "                                                                                                then fn_convertUTCtoLocalTimeZone(DateTimeZone)",
          "                                                                                                else DateTimeZone",
          "                                                                                        }",
          "                        ),",
          "                        Result = ConvertToDateTime[[TimeStamp], [User], [Cube], [Tuple], [OldValue], [NewValue]]",
          "                    in",
          "                        Result",
          "                in Result",
          "        else",
          "            null",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "028ae803-7c8b-4ec1-a041-5cee3e56bcc4",
        "queryGroup": "Data\\UserData\\DataFilesLoad"
      },
      {
        "name": "xDel_TabulateCube",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "",
          "/*        Axes  = #\"sREST_}StatsByCube\"[Axes], //Source_ElementAliases{1}[DataSource][Axes],",
          "        Cells = #\"sREST_}StatsByCube\"[Cells], //Source_ElementAliases{1}[DataSource][Cells],",
          "        Dim1 = \"}PerfCubes\",",
          "        Dim2 = \"}StatsStatsByCube\",",
          "        Dim3 = \"}TimeIntervals\", */",
          "        Axes  = #\"sREST_}CubeSecurity\"[Axes], ",
          "        Cells = #\"sREST_}CubeSecurity\"[Cells], ",
          "",
          "        Dim1 = \"}Cubes\",",
          "        Dim2 = \"}Groups\",",
          "        DimensionNames = {},//{ Dim1, Dim2 }",
          "",
          "",
          "",
          "",
          "        //1. Axes members",
          "        AxesNullCheck = if Axes = null then {} else Axes,",
          "        ConvertAxesToTable = Table.FromList(AxesNullCheck, Splitter.SplitByNothing(), {\"AxesRecordSet\"}, null, ExtraValues.Ignore),",
          "        ExpandAxesRecordSet = Table.ExpandRecordColumn(ConvertAxesToTable, \"AxesRecordSet\", {\"Tuples\"}),",
          "        ExpandTuplesList = Table.ExpandListColumn(ExpandAxesRecordSet, \"Tuples\"),",
          "        ExpandTuplesRecordSet = Table.ExpandRecordColumn(ExpandTuplesList, \"Tuples\", {\"Ordinal\", \"Members\"}, {\"Tuples.Ordinal\", \"Tuples.Members\"}),",
          "        GetTargetTable =  Table.TransformColumns(ExpandTuplesRecordSet, ",
          "                                        { \"Tuples.Members\", ( value ) => ",
          "                                                let",
          "                                                    CreateTableFromListOfRecords = try Table.FromRecords(value, {\"Name\", \"UniqueName\"}) otherwise Table.FromRows({}, {\"Name\", \"UniqueName\"}),",
          "                                                    GetDimensionNames = Table.TransformColumns(CreateTableFromListOfRecords, ",
          "                                                                        { \"UniqueName\", ( value ) => Text.BetweenDelimiters(value, \"[\", \"].\", {0, RelativePosition.FromStart}, {0, RelativePosition.FromStart}) }",
          "                                                    ),",
          "                                                    PivotTable = Table.Pivot(GetDimensionNames, List.Distinct(GetDimensionNames[UniqueName]), \"UniqueName\", \"Name\")",
          "                                                in",
          "                                                   PivotTable ",
          "                                        }",
          "        ),",
          "        ColumnSource = try Table.ColumnNames(GetTargetTable[Tuples.Members]{0}) otherwise {},",
          "        ColumnTarget = if (DimensionNames = null or List.IsEmpty(DimensionNames))",
          "                then ColumnSource",
          "                else DimensionNames,",
          "        ExpandTargetTable = Table.ExpandTableColumn(GetTargetTable, \"Tuples.Members\", ColumnSource, ColumnTarget),",
          "        ExpandMembersList = Table.ExpandListColumn(ExpandTuplesRecordSet, \"Tuples.Members\"),",
          "        ExpandMembersRecordSet = Table.ExpandRecordColumn(ExpandMembersList, \"Tuples.Members\", {\"Name\", \"UniqueName\"}, {\"Members.Name\", \"Members.Path\"}),",
          "        GetDimensionNames = Table.ReplaceValue(",
          "                                        ExpandMembersRecordSet",
          "                                        , each [Members.Path]",
          "                                        , each if [Members.Path] = null then null else Text.BetweenDelimiters([Members.Path], \"[\", \"]\", 0)",
          "                                        , Replacer.ReplaceValue",
          "                                        , {\"Members.Path\"}",
          "        ),",
          "        GroupMembers = Table.Group(GetDimensionNames, {\"Tuples.Ordinal\"}, { {\"Members.Name\", each List.Combine( {[Members.Name]} ) }, {\"Members.Path\", each List.Combine( {[Members.Path]} ) } }),",
          "        AddTuplesOrdinal = Table.ReplaceValue(",
          "                                        GroupMembers",
          "                                        , each [Members.Name]",
          "                                        , each if [Tuples.Ordinal] = null then [Members.Name] else List.Combine( {{[Tuples.Ordinal]}, [Members.Name]} )",
          "                                        , Replacer.ReplaceValue",
          "                                        , {\"Members.Name\"}",
          "        ), ",
          "        TableColumns = if (DimensionNames = null or List.IsEmpty(DimensionNames))",
          "                        then ",
          "                            if try ( List.IsEmpty( AddTuplesOrdinal[Members.Path]{0} ) or List.NonNullCount( AddTuplesOrdinal[Members.Path]{0} ) = 0 ) otherwise true",
          "                            then {\"Tuples.Ordinal\"}",
          "                            else {\"Tuples.Ordinal\"} & AddTuplesOrdinal[Members.Path]{0}",
          "                        else ",
          "                            {\"Tuples.Ordinal\"} & DimensionNames,",
          "        TuplesTable = Table.FromRows(AddTuplesOrdinal[Members.Name], TableColumns),",
          "",
          "",
          "        //2. Cells",
          "        CellsNullCheck = if Cells = null then {} else Cells,",
          "        ConvertCellsToTable = Table.FromList(CellsNullCheck, Splitter.SplitByNothing(), {\"CellsRecordSet\"}, null, ExtraValues.Ignore),",
          "        ExpandCellsRecordSet = Table.ExpandRecordColumn(ConvertCellsToTable, \"CellsRecordSet\", {\"Ordinal\", \"Value\"}, {\"Cells.Ordinal\", \"Cells.Value\"}),",
          "",
          "        //3. Cells next to the Members ",
          "        CellsAlongMembers = Table.NestedJoin(",
          "                                TuplesTable,",
          "                                \"Tuples.Ordinal\",   ",
          "                                ExpandCellsRecordSet,",
          "                                \"Cells.Ordinal\",",
          "                                \"Cells\",",
          "                                JoinKind.Inner",
          "        ),",
          "        ExpandCells = Table.ExpandTableColumn(CellsAlongMembers, \"Cells\", {\"Cells.Value\"}, {\"Value\"})",
          "    in",
          "        ExpandCells"
        ],
        "kind": "m",
        "lineageTag": "950a5308-18e2-44b0-83e6-7c811f417859"
      },
      {
        "name": "xDel_HttpRequest",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "expression": [
          "let",
          "                // Request parameteres",
          "                RequstNo = 1, ",
          "                AttemptNo = 1, ",
          "                RequestContent = \"ModelCubes()?$select=Name,Rules\",",
          "                RawBody = null,",
          "                HttpRequestPool = 120, ",
          "                HttpRequestLatencySec = 0,",
          "                HttpRequestRecurringLatencySec = 60,",
          "                HttpRequestMaxAttempts = 3,",
          "                HttpRequestTimeoutSec = 1200,",
          "                ResponseMetaData =  #table(type table[",
          "                                                            RequstNo = number",
          "                                                            , RequestContent = text",
          "                                                            , RequestBody = text",
          "                                                            , AttemptNo = number",
          "                                                            , RequestDelay = number",
          "                                                            , RequestResponseTime = datetime",
          "                                                            , HasError = logical",
          "                                                            , ErrorReason = text",
          "                                                            , ErrorMessage = text",
          "                                                            , ErrorDetails = text",
          "                                                            , HttpResponseStatus = number",
          "                                                        ], {})",
          "            ,",
          "",
          "                AuthType = \"Basic\" ,",
          "                Auth = Binary.ToText(Text.ToBinary(\"admin\" & \":\" & \"apple\"), BinaryEncoding.Base64), ",
          "            ",
          "                NumberInPool = if (RequstNo = null) then 0 else RequstNo,  ",
          "                RequestDelay = if (AttemptNo <= 1)",
          "                                then ",
          "                                    if (Number.Mod(NumberInPool, HttpRequestPool) = 0) //Pooling",
          "                                    then HttpRequestLatencySec",
          "                                    else 0",
          "                                else (AttemptNo - 1) * HttpRequestRecurringLatencySec",
          "                ,",
          "                                    ",
          "                //Request URL, headers, options",
          "                Request = \"https://localhost:8886\" & \"/api/v1/\",",
          "                Options = [",
          "                        Headers = [",
          "                                    #\"Authorization\" = AuthType & \" \" & Auth, ",
          "                                    #\"Content-Type\" = \"application/json;charset=utf-8\",",
          "                                    #\"Cache-Control\" = \"no-cache, must-revalidate\"",
          "                        ],",
          "                        RelativePath = RequestContent,",
          "                        Content = Text.ToBinary(RawBody),",
          "                        Timeout = #duration(0, 0, 0, HttpRequestTimeoutSec),",
          "                        IsRetry = true,",
          "                        ManualStatusHandling = ",
          "                            {",
          "                                200, 201, 202,                  // Success, record the request result  ",
          "                                408, 429, 503, 504, 509,        // Handled error, repeat the request, if failure again - record the request result",
          "                                401, 403, 404                   // Handled error, record the request result  ",
          "                            }",
          "                ], ",
          "",
          "                //Send Request & BufferData",
          "                SendRequest = Function.InvokeAfter( () => try Web.Contents(Request, Options), #duration(0, 0, 0, RequestDelay) ),",
          "                BufferedData = SendRequest[[HasError]] & [Value = Binary.Buffer(SendRequest[Value])],  //avoid a risk of multple PQ calls      ",
          "",
          "                //fn_checkRequestError Start",
          "                fn_checkRequestError = (Response as any) as record =>",
          "                    if Response[HasError]?",
          "                        then [HasError = Response[HasError]?, ErrorReason = Response[Error]?[Reason]?, ErrorMessage = Response[Error]?[Message]?, ErrorDetails = Response[Error]?[Details]?]",
          "                        else ",
          "                          let",
          "                              ServerResponse = try Value.Metadata(SendRequest[Value]?)[Response.Status]?,",
          "                              ServerError = ",
          "\t\t\t\t\t    if ServerResponse[HasError]? ",
          "\t\t\t\t\t    then",
          "\t\t\t\t\t        [ HasError = ServerResponse[HasError]?, ErrorReason = ServerResponse[Error]?[Reason]?, ErrorMessage = ServerResponse[Error]?[Message]?, ErrorDetails = ServerResponse[Error]?[Details]? ]",
          "\t\t\t\t\t    else if not ServerResponse[HasError] and ServerResponse[Value] = null",
          "\t\t\t\t\t    then ",
          "\t\t\t\t\t        [ HasError = true, ErrorReason = \"Unknown\", ErrorMessage = \"Incorrect connection or authorization parameters may have been specified\", ErrorDetails = null ]",
          "\t\t\t\t\t    else",
          "\t\t\t\t\t\t[ HasError = false, ErrorReason = null, ErrorMessage = null, ErrorDetails = null ]",
          "                          in",
          "                            ServerError",
          "                ,",
          "                //fn_checkRequestError End",
          "",
          "                Error = fn_checkRequestError(BufferedData),",
          "                xDel_HttpResponse = Value.Metadata(SendRequest[Value]?), ",
          "                HttpResponseStatus = try Value.Metadata(SendRequest[Value]?)[Response.Status]? otherwise null, ",
          "                RequestResponseTime = if HttpResponseStatus <> null then DateTime.LocalNow() else null, // making sure the RequestStartTime and RequestResponseTime queries are executed in the correct order (the lazy evaluation effect)",
          "                AppendResponseMetaData = Table.InsertRows(    ResponseMetaData",
          "                                                            , Table.RowCount(ResponseMetaData)",
          "                                                            , {[  RequstNo = RequstNo",
          "                                                                , RequestContent = RequestContent",
          "                                                                , RequestBody = RawBody",
          "                                                                , AttemptNo = AttemptNo",
          "                                                                , RequestDelay = RequestDelay",
          "                                                                , RequestResponseTime = RequestResponseTime",
          "                                                                , HasError = Error[HasError]",
          "                                                                , ErrorReason = Error[ErrorReason]",
          "                                                                , ErrorMessage = Error[ErrorMessage]",
          "                                                                , ErrorDetails = Error[ErrorDetails]",
          "                                                                , HttpResponseStatus = HttpResponseStatus",
          "                                                            ]}",
          "                                                        ), ",
          "                RequestResult = if (Error[HasError]) ",
          "                then ",
          "                    Record.AddField([], \"@metadata\", AppendResponseMetaData)",
          "                else",
          "                    let                                ",
          "                        HttpRequestResult = if (List.MatchesAny({null, 408, 429, 503, 504, 509}, each _ = Value.Metadata(BufferedData)[Response.Status]?) and AttemptNo < HttpRequestMaxAttempts)",
          "                                        then",
          "                                            \"OK\"//@fn_trySendRequest(AttemptNo + 1, AppendResponseMetaData)                                                       // Repeat the request",
          "                                        else ",
          "                                            Record.AddField(try Json.Document(BufferedData[Value]) otherwise [], \"@metadata\", AppendResponseMetaData)       // Add @metadata field to the request result",
          "                    in",
          "                        HttpRequestResult",
          "",
          "        //fn_trySendReques End",
          "                ",
          "                ",
          "",
          "in",
          "    RequestResult"
        ],
        "kind": "m",
        "lineageTag": "ba47fb73-9cb9-4b61-a5af-ca6b3926eec5"
      },
      {
        "name": "02 CONNECTION TYPE",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": [
          "Mandatory. Select \"REST\" or \"DataFiles\". ",
          "The \"DataFile\" connection does not require a running model but the functionality is limited"
        ],
        "expression": "\"REST\" meta [IsParameterQuery=true, List={\"REST\", \"DataFiles\"}, DefaultValue=\"REST\", Type=\"Text\", IsParameterQueryRequired=true]",
        "kind": "m",
        "lineageTag": "a6974d72-bf94-47c9-8622-9cd1a19e007e",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "xDel_fn_getRelatedObjects",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "(TextToParse as text, KeyWords as list, ParamNos as list) =>",
          "let    ",
          "  // Function: Prepare Variables Dictionary",
          "    // ***************************************",
          "    fn_getVariablesDict = (TextToParse as text, VariableQuote as text) as list =>  ",
          "    let",
          "    // Select variables: keys cannot contain special symbols, values are not functions",
          "        Rows = Text.Split(TextToParse, \";\"),",
          "        RawsKeyValue = List.Transform(Rows, each if Text.Contains( _ , \"=\" ) then Splitter.SplitTextByAnyDelimiter({ \"@=\", \"=\" })( _ ) else { null, _ } ),",
          "        VariableDict = List.Select(RawsKeyValue, each _{0} <> null and not Text_ContainsAnyOf( _{0} , { \"(\", \"[\" } ) and not Text_ContainsAnyOf( _{1} , { \"(\", \"[\" } )),",
          "",
          "        //Replace variable references with real values",
          "        // 0 - Key, 1 - Value",
          "        Counter = List.Count(VariableDict),",
          "        fn_getRealVairableValue = (i as number, optional DictToSearchIn as list) as list =>",
          "            let",
          "                ReferredVariableKey = VariableDict{i}{1},",
          "                VariableNewValue = if Text.Contains( ReferredVariableKey, VariableQuote ) then ReferredVariableKey else try List.Last(List.Select(DictToSearchIn, each _{0} = ReferredVariableKey)){1} otherwise VariableQuote & VariableQuote,",
          "                TransformedVariableDict = if DictToSearchIn = null then {{ VariableDict{i}{0}, VariableNewValue }} else DictToSearchIn & {{ VariableDict{i}{0}, VariableNewValue }}",
          "            in",
          "                if i >= Counter - 1",
          "                    then TransformedVariableDict",
          "                    else @fn_getRealVairableValue(i + 1, TransformedVariableDict),",
          "        ",
          "        ReplaceVariableReferenceWithValue = fn_getRealVairableValue(0)",
          "    in",
          "        ReplaceVariableReferenceWithValue,",
          "",
          "    // Function: Get Metadata List",
          "    // ***************************************",
          "    // Append a list of entries for a next KeyWord",
          "    fn_appendObjectToList_KeyWordNo = (KeyWordsEntriesList as list, KeyWordNo as number) as list =>",
          "    let",
          "      // Append next entry for the current KeyWord",
          "        fn_appendObjectToList_EntryNo = (EntriesList as list, KeyWord as text, EntryNo as number) as list =>  ",
          "        let",
          "            NextFunction = Text_BetweenOuterDelimiters(Text.AfterDelimiter(TextToParse, KeyWord & \"(\", EntryNo), \"(\", \")\"),",
          "            AppendedList = if NextFunction = \"\"",
          "                then EntriesList",
          "                else ",
          "                    let ",
          "                        // Escaping any inner commas for subsequent splitting",
          "                        TransformNestedOpeningParenthesis = Text.Replace(NextFunction, \"(\", \"\"\"(\"),",
          "                        TransformNestedClosingParenthesis = Text.Replace(TransformNestedOpeningParenthesis, \")\", \")\"\"\"),",
          "                        TransformSingleQuotes = Text.Replace(TransformNestedClosingParenthesis, \"'\", \"\"\"'\"),",
          "                        ",
          "                        // Extracting parametres",
          "                        ParameterList = Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(TransformSingleQuotes),",
          "                        ReplaceVariablesWithValue = List.Transform(ParameterList, ( val ) => if Text.StartsWith ( val , \"'\") then val else try List.Last(List.Select(VariablesDict, each _{0} = val)){1} otherwise \"''\"),",
          "                        RemovedQuotationsParameterList = List.Transform(ReplaceVariablesWithValue, each Text.Remove( _ , {\"'\"} )),",
          "                        Object = RemovedQuotationsParameterList{ParamNos{KeyWordNo}},",
          "                        EntriesList = ",
          "                            if Object <> null and Object <> \"\" and not List.Contains(EntriesList, Object)",
          "                            then EntriesList & { Object }",
          "                            else EntriesList",
          "                        ,",
          "                        Recursion = @fn_appendObjectToList_EntryNo(EntriesList, KeyWords{KeyWordNo}, EntryNo + 1)",
          "                    in ",
          "                        Recursion               ",
          "        in ",
          "            AppendedList,",
          "",
          "        KeyWordsEntriesList = List.Combine({KeyWordsEntriesList, fn_appendObjectToList_EntryNo({}, KeyWords{KeyWordNo}, 0 )})",
          "    in",
          "    if KeyWordNo = Counter - 1",
          "        then KeyWordsEntriesList",
          "        else @fn_appendObjectToList_KeyWordNo(KeyWordsEntriesList, KeyWordNo + 1)",
          "    ,",
          "",
          "    // 1. Prepare Variables Dictionary",
          "    VariablesDict = fn_getVariablesDict(TextToParse, \"'\"),",
          "",
          "    // 2. Main",
          "    Counter = List.Count(KeyWords),",
          "    Entires = fn_appendObjectToList_KeyWordNo({}, 0),",
          "    DistinctList = List.Distinct(Entires)",
          "in ",
          "    DistinctList"
        ],
        "kind": "m",
        "lineageTag": "4f1d9a2d-6552-405b-a4f5-b30c76603a4f",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "xDel_extractFunctionEntries",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "List"
          }
        ],
        "expression": [
          "let    ",
          "",
          "// Function: Prepare Variables Dictionary",
          "// ++++++++++++++++++++++++++++++++++++++",
          "fn_getVariablesDict = (TextToParse as text, VariableQuote as text) as list =>  ",
          "let",
          "// Select variables: keys cannot contain special symbols, values are not functions",
          "    Rows = Text.Split(TextToParse, \";\"),",
          "    RawsKeyValue = List.Transform(Rows, each if Text.Contains( _ , \"=\" ) then Splitter.SplitTextByAnyDelimiter({ \"@=\", \"=\" })( _ ) else { null, _ } ),",
          "    // 0 - Key, 1 - Value",
          "    VariableDict = List.Select(RawsKeyValue, each _{0} <> null and not Text_ContainsAnyOf( _{0} , { \"(\", \"[\" } ) and not Text_ContainsAnyOf( _{1} , { \"(\", \"[\" } )),",
          "    ",
          "    Counter = List.Count(VariableDict),",
          "    // Private function replaces variable references with real values   ",
          "    fn_getRealVairableValue = (i as number, optional DictToSearchIn as list) as list =>",
          "        let",
          "            ReferredVariableKey = VariableDict{i}{1},",
          "            VariableNewValue = if Text.Contains( ReferredVariableKey, VariableQuote ) then ReferredVariableKey else try List.Last(List.Select(DictToSearchIn, each _{0} = ReferredVariableKey)){1} otherwise VariableQuote & VariableQuote,",
          "            TransformedVariableDict = if DictToSearchIn = null then {{ VariableDict{i}{0}, VariableNewValue }} else DictToSearchIn & {{ VariableDict{i}{0}, VariableNewValue }}",
          "        in",
          "            if i >= Counter - 1",
          "                then TransformedVariableDict",
          "                else @fn_getRealVairableValue(i + 1, TransformedVariableDict),",
          "    ",
          "    ReplaceVariableReferenceWithValue = fn_getRealVairableValue(0)",
          "in",
          "    ReplaceVariableReferenceWithValue",
          ",",
          "// ++++++++++++++++++++++++++++++++++++++",
          "",
          "// Extract Entries:",
          "// ++++++++++++++++",
          " fn_appendObjectToList_EntryNo = (EntriesList as list, KeyWord as text, EntryNo as number) as list =>  ",
          "                let",
          "                    NextFunction = Text_BetweenOuterDelimiters(Text.AfterDelimiter(TextToParse, KeyWord & \"(\", EntryNo), \"(\", \")\"),",
          "                    AppendedList = if NextFunction = \"\"",
          "                        then EntriesList",
          "                        else ",
          "                            let ",
          "                                // Escaping any inner commas for subsequent splitting",
          "                                TransformNestedOpeningParenthesis = Text.Replace(NextFunction, \"(\", \"\"\"(\"),",
          "                                TransformNestedClosingParenthesis = Text.Replace(TransformNestedOpeningParenthesis, \")\", \")\"\"\"),",
          "                                TransformSingleQuotes = Text.Replace(TransformNestedClosingParenthesis, \"'\", \"\"\"'\"),",
          "",
          "                                // Extracting parametres",
          "                                ParameterList = Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(TransformSingleQuotes),",
          "                                ReplaceVariablesWithValue = ",
          "                                    if VariablesDict = null or List.IsEmpty(VariablesDict) // Only for Processes ",
          "                                    then ParameterList ",
          "                                    else List.Transform(ParameterList, ( val ) => if Text.StartsWith ( val , \"'\") then val else try List.Last(List.Select(VariablesDict, each _{0} = val)){1} otherwise \"''\")",
          "                                ,",
          "                                RemovedQuotationsParameterList = List.Transform(ReplaceVariablesWithValue, each Text.Remove( _ , {\"'\"} )),",
          "                                Object = RemovedQuotationsParameterList{ParamNos{KeyWordNo}},",
          "                                EntriesList = ",
          "                                    if Object <> null and Object <> \"\" and not List.Contains(EntriesList, Object)",
          "                                    then EntriesList & { Object }",
          "                                    else EntriesList",
          "                                ,",
          "                                Recursion = @fn_appendObjectToList_EntryNo(EntriesList, KeyWords{KeyWordNo}, EntryNo + 1)",
          "                            in ",
          "                                Recursion               ",
          "                in ",
          "                    AppendedList,",
          "",
          "EntriesListByKeyWords = {} & fn_appendObjectToList_EntryNo({}, KeyWords{KeyWordNo}, 0 ),",
          "// ++++++++++++++++",
          "",
          "",
          "",
          "    // +++ PARAMS",
          "    // +++ Test Rules",
          "    KeyWords = KeyWords[RuleCubeRef], ",
          "    ParamNos = {0, 1, 1, 1, 1, 2},",
          "",
          "    // +++ Test Processes",
          "    //KeyWords = KeyWords[ProcessProcessRef],",
          "    //ParamNos = {0},",
          "",
          "    // +++ Test Cubes-Processes",
          "    //KeyWords = KeyWords[ProcessCubeRef],",
          "    //ParamNos = {1, 1, 1, 1},",
          "",
          "    TextToParse = xDel_RuleProcessText,",
          "    ",
          "    // 1. Prepare Text for Parsing",
          "    PreparedText =  fn_prepareCodeContent(TextToParse),",
          "    ",
          "    // 2. Prepare Variables Dictionary",
          "    VariablesDict = fn_getVariablesDict(PreparedText, \"'\"),",
          "",
          "    // 3. Prepare Key Words",
          "",
          "    Counter = List.Count(KeyWords),",
          "    ",
          "    KeyWordNo = 0,",
          "    KeyWord = KeyWords{KeyWordNo},",
          "    EntryNo = 0,",
          "",
          "    // 5. Main",
          "    NextFunction = Text_BetweenOuterDelimiters(Text.AfterDelimiter(PreparedText, KeyWord & \"(\", EntryNo), \"(\", \")\"),",
          "",
          "    // Escaping any inner commas for subsequent splitting",
          "    TransformNestedOpeningParenthesis = Text.Replace(NextFunction, \"(\", \"\"\"(\"),",
          "    TransformNestedClosingParenthesis = Text.Replace(TransformNestedOpeningParenthesis, \")\", \")\"\"\"),",
          "    TransformSingleQuotes = Text.Replace(TransformNestedClosingParenthesis, \"'\", \"\"\"'\"),",
          "",
          "    // Extracting parametres",
          "    ParameterList = Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(TransformSingleQuotes),",
          "    ReplaceVariablesWithValue = ",
          "        if VariablesDict = null or List.IsEmpty(VariablesDict) // Only for Processes ",
          "        then ParameterList ",
          "        else List.Transform(ParameterList, ( val ) => if Text.StartsWith ( val , \"'\") then val else try List.Last(List.Select(VariablesDict, each _{0} = val)){1} otherwise \"''\")",
          "    ,",
          "    RemovedQuotationsParameterList = List.Transform(ReplaceVariablesWithValue, each Text.Remove( _ , {\"'\"} )),",
          "    Object = RemovedQuotationsParameterList{ParamNos{KeyWordNo}},",
          "",
          "    // 6. Final  ",
          "    // DistinctList = Object",
          "    // DistinctList =  EntriesListByKeyWords",
          "    DistinctList = fn_extractFunctionEntries(PreparedText, KeyWords, ParamNos, fn_getVariablesDict(PreparedText, \"'\"))",
          "in",
          "    DistinctList"
        ],
        "kind": "m",
        "lineageTag": "724c05a6-7630-43b7-8744-ae06098af857"
      },
      {
        "name": "xDel_Text_BetweenOuterDelimiters",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    //Text.BetweenDelimiters(text as nullable text, startDelimiter as text, endDelimiter as text, optional startIndex as any, optional endIndex as any) as any",
          "   ",
          "   //Main",
          "    EntryNo = 0,",
          "    //Text = \"CellPutN( Numbr ( v28 ) , pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,v23, v24, v25, v26, v27 );\",",
          "    //Text = \"CellPutN( CellPutN( CellPutN('str', pTargetCube12, b, b1, b2) , pTargetCube1, vv1, vv2, vv3) , pTargetCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,v23, v24, v25, v26, v27 );\",",
          "    //Text = \"CellPutN(CellGetS('str', pSourceCube, sv1, sv2, sv3), pTargetCube, tv1, tv2, tv3)\",",
          "    //Text = \"CellPutN( 'str'; pTargetCube, v1, v2, v3  );\",",
          "    //Text = \"CellPutN( 'str', pTargetCube, v1, v2, v3  ); CellPutN( 'str1', pTargetCube, v11, v12, v13  )\",",
          "    //Text = DEL_RuleProcess_Text,",
          "   //Text = \"['Потребность на период (ед. изм.)'] = N:DB('Материалы_потребность_по_виду',!Год,!Месяц,!Версии,!Зоны_ответственности,'Итого проекты',!Виды_материала,ATTRS('Номенклатура', !Номенклатура, 'Бренд'),'Потребность');\",",
          "   Text = \"FORMAT==100",
          "#Region System",
          "FEEDSTRINGS;",
          "SKIPCHECK;",
          "#EndRegion",
          "",
          "#DB('Бюджет_продаж_номенклатура',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,!П_Бюджет_продаж_номенклатура)",
          "",
          "",
          "[] = N: IF(DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Итого кубы','Фильтр')= 1, continue, stet);",
          "[] = N: IF(attrs('Версии',!Версии, 'Тип_версии') @='Сценарий', continue, stet);",
          "[] = N: IF(!Год @= ATTRS('Год', !Год, 'Текущий'), CONTINUE, STET);",
          "[] = S: IF(!Год @= ATTRS('Год', !Год, 'Текущий'), CONTINUE, STET);",
          "",
          "['-'] = 0;",
          "",
          "[] = N: IF ( !Проекты @= DB('Параметры_номенклатуры',!Номенклатура,'Проект'), continue, stet);",
          "[] = S: IF ( !Проекты @= DB('Параметры_номенклатуры',!Номенклатура,'Проект'), continue, stet);",
          "",
          "[{'Свойства1', 'Свойства2', 'Свойства3', 'Свойства4', 'Свойства5', 'Свойства6', 'Свойства7', 'Свойства8', 'Свойства9', 'Свойства10', 'Свойства11','Свойства12', 'Свойства13'}] = S:",
          "\tDB('Параметры_номенклатуры',!Номенклатура,attrs('П_Бюджет_продаж_номенклатура', !П_Бюджет_продаж_номенклатура, 'Наименование'));",
          "",
          "#расчет сценариев",
          "#[{'План оптим', 'План пессим'}, {'Отгрузки ЭКСПЕРТ , экз.', 'Сумма отгрузки с НДС ЭКСПЕРТ , руб.', 'ИТОГО Расчет, экз'}] = N: ['План'] * (1+ DB('Параметры_год',!Год,!Версии,'Отклонение от базовой версии'));",
          "",
          "['План','Отгрузки ЭКСПЕРТ , экз.']\t= N: ['Отгрузки ЭКСПЕРТ (загр)']",
          "\t+ DB('Продукция_ЭП_движение',!Год,!Месяц,!Версии,DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Продукция_ЭП_движение','Расчет'),!Проекты,!Номенклатура,'Продажи');",
          "",
          "['План','Сумма отгрузки с НДС ЭКСПЕРТ , руб.'] = N: ['Сумма отгрузки с НДС ЭКСПЕРТ (загр)']",
          "\t+ DB('Продукция_ЭП_продажи',!Год,!Месяц,!Версии,DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Продукция_ЭП_движение','Расчет'),!Проекты,!Номенклатура,'Продажи с НДС, руб');",
          "",
          "#['Отгрузки Расчет, экз.'] - загружаются процессом с учетом сезонности",
          "['План','ИТОГО Расчет, экз'] = N: ['Отгрузки Расчет, экз.']",
          "\t+  DB('Продукция_ЭП_движение',!Год,!Месяц,!Версии,DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Продукция_ЭП_движение','Расчет'),!Проекты,!Номенклатура,'Продажи, экз.');",
          "",
          "['Расчетная цена с НДС'] =   ['Сумма отгрузки с НДС ЭКСПЕРТ , руб.'] \\ ['Отгрузки ЭКСПЕРТ , экз.'];",
          "",
          "['План','Сезонность продаж, %'] = N: DB('Параметры_сезонности',!Год,!Месяц,!Версии,attrs('Номенклатура',!Номенклатура, 'Учебник/Шлейф'),'% сезонности продаж');",
          "['План','Сезонность продаж, %', 'Учебник']= C: DB('Параметры_сезонности',!Год,!Месяц,!Версии,'Учебник','% сезонности продаж');",
          "['План','Сезонность продаж, %', 'Шлейф'] = C: DB('Параметры_сезонности',!Год,!Месяц,!Версии,'Шлейф','% сезонности продаж');",
          "['План','Итого номенклатура','Сезонность продаж, %']  = C:  (['Учебник'] + ['Шлейф'])\\2;",
          "",
          "",
          "['План','Прайсовая цена Просвещения с НДС, руб.'] = C: ConsolidatedAvg (2, 'Бюджет_продаж_номенклатура',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'Прайсовая цена Просвещения с НДС, руб.');",
          "['План','Прайсовая цена Просвещения с НДС, руб.'] = N: IF ( attrs('Номенклатура', !Номенклатура, 'ЭП') @= '1',",
          "\tDB('Продукция_ЭП_продажи',!Год,'Годовое значение',!Версии,'Ответственный по ЭП',!Проекты,!Номенклатура,'Цена продажи с НДС'),",
          "\tDB('Параметры_номенклатуры_месяцы',!Год,!Месяц,!Версии,!Номенклатура,'Прайс с НДС'));",
          "",
          "['План','% скидки'] = C: ConsolidatedAvg (2, 'Бюджет_продаж_номенклатура',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'% скидки');",
          "['План','% скидки'] = N: DB('Параметры_номенклатуры',!Номенклатура,'% скидки');",
          "",
          "['Сумма отгрузки Расчет с НДС, руб.'] = N: ['ИТОГО Расчет, экз'] * (['Прайсовая цена Просвещения с НДС, руб.'] \t-  ['Прайсовая цена Просвещения с НДС, руб.'] * DB('Параметры_номенклатуры',!Номенклатура,'% скидки'));",
          "",
          "['Сумма отгрузки Расчет без НДС, руб.'] = N: ['Сумма отгрузки Расчет с НДС, руб.'] \\ ( 1 + DB('Параметры_номенклатуры',!Номенклатура,'НДС ставка'));",
          "",
          "['Поступления с учетом отсрочки, руб.'] = N: \tDB('Бюджет_продаж_номенклатура',!Год, str(numbr(attrs('Месяц',!Месяц, 'Номер')) - DB('Параметры_год',!Год,!Версии,'Отсрочка продажи, мес'), 2, 0)",
          "\t,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'Сумма отгрузки Расчет с НДС, руб.');",
          "",
          "['План','янв', 'ДЗ/КЗ'] = N:  ['Сумма отгрузки Расчет с НДС, руб.'] - ['Поступления с учетом отсрочки, руб.'];",
          "['План','ДЗ/КЗ'] = N: DB('Бюджет_продаж_номенклатура',!Год,attrs('Месяц',!Месяц,'Предыдущий'),!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'ДЗ/КЗ')",
          "\t+ ['Сумма отгрузки Расчет с НДС, руб.'] - ['Поступления с учетом отсрочки, руб.'];",
          "['План','ДЗ/КЗ'] = C: IF ( ellev('Месяц',!Месяц) <> 0",
          "\t, DB('Бюджет_продаж_номенклатура',!Год,elcomp('Месяц',!Месяц,elcompn('Месяц',!Месяц)),!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'ДЗ/КЗ')",
          "\t, continue);",
          "",
          "#средневсзвешенный НДС для расчета начислений по регионам",
          "['План','НДС, %'] = N: IF ( ['Отгрузки ЭКСПЕРТ , экз.'] <> 0, DB('Параметры_номенклатуры_год',!Год,!Версии,!Номенклатура,'НДС ставка'), 0)\\100;",
          "['План','НДС, %'] = C: ConsolidatedAvg (2, 'Бюджет_продаж_номенклатура',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'НДС, %');",
          "",
          "",
          "FEEDERS;",
          "#['План',{'Отгрузки ЭКСПЕРТ , экз.', 'Сумма отгрузки с НДС ЭКСПЕРТ , руб.', 'ИТОГО Расчет, экз'}] => ['План оптим'], ['План пессим'];",
          "#['План','ИТОГО Расчет, экз']  => ['План оптим','Сумма отгрузки Расчет с НДС, руб.'], ['План оптим','Сумма отгрузки Расчет без НДС, руб.'], ['План оптим','Поступления с учетом отсрочки, руб.'],",
          "#\t['План пессим','Сумма отгрузки Расчет с НДС, руб.'], ['План пессим','Сумма отгрузки Расчет без НДС, руб.'], ['План пессим','Поступления с учетом отсрочки, руб.'];",
          "",
          "['План','Отгрузки ЭКСПЕРТ (загр)']=> ['План','Отгрузки ЭКСПЕРТ , экз.'];",
          "['План','Сумма отгрузки с НДС ЭКСПЕРТ (загр)'] => ['План','Сумма отгрузки с НДС ЭКСПЕРТ , руб.'] ;",
          "['План','Отгрузки Расчет, экз.'] => ['План','ИТОГО Расчет, экз'], ['План','Сезонность продаж, %'];",
          "['План','ИТОГО Расчет, экз']  => ['План','Сумма отгрузки Расчет с НДС, руб.'], ['План','Прайсовая цена Просвещения с НДС, руб.'] , ['План','% скидки'] , ['План','Сумма отгрузки Расчет без НДС, руб.'],",
          "\t['План','Поступления с учетом отсрочки, руб.'], ['План','ДЗ/КЗ'], ['План','Расчетная цена с НДС'];",
          "['План','Отгрузки ЭКСПЕРТ , экз.'] => ['План','НДС, %'];",
          "",
          "",
          "[{'Отгрузки ЭКСПЕРТ , экз.', 'ИТОГО Расчет, экз'}] =>",
          "\tDB('Бюджет_продаж_по_сегментам',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,DB('Параметры_номенклатуры',!Номенклатура,'Учебник/Шлейф'),'Натуральное выражение, ед.'),",
          "\tDB('Бюджет_продаж_по_сегментам',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,DB('Параметры_номенклатуры',!Номенклатура,'Учебник/Шлейф'),'Стоимостное выражение, руб.'),",
          "\tDB('Бюджет_продаж_по_центрам',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,DB('Параметры_номенклатуры',!Номенклатура,'Учебник/Шлейф'),'Натуральное выражение, ед.'),",
          "\tDB('Бюджет_продаж_по_центрам',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура, DB('Параметры_номенклатуры',!Номенклатура,'Учебник/Шлейф'),'Стоимостное выражение, руб.');",
          "",
          "",
          "#План печати",
          "['Отгрузки Расчет, экз.']=> DB('План_печати', !Год, !Месяц, !Версии, DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','План_печати','Фидер'), !Проекты, !Номенклатура, 'Продажи');",
          "['Отгрузки ЭКСПЕРТ (загр)' ]  => DB('План_печати', !Год, !Месяц, !Версии,DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','План_печати','Фидер'), !Проекты, !Номенклатура, 'Продажи');",
          "",
          "['Отгрузки ЭКСПЕРТ (загр)' ]  => DB('Расчет_авторские_гонорары',!Год,!Месяц,!Версии,",
          "\tDB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Расчет_авторские_гонорары','Фидер'),!Проекты,!Номенклатура,'План продаж');",
          "['Отгрузки Расчет, экз.'] => DB('Расчет_авторские_гонорары',!Год,!Месяц,!Версии,",
          "\tDB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Расчет_авторские_гонорары','Фидер'),!Проекты,!Номенклатура,'План продаж');",
          "",
          "[{'ИТОГО Расчет, экз', 'Отгрузки ЭКСПЕРТ , экз.'}] =>",
          "\tDB('Бюджет_роялти', !Год, !Месяц, !Версии,DB('Матрица_зоны_отв_кубы',!Зоны_ответственности,'Бюджет_продаж_номенклатура','Бюджет_роялти','Фидер'), !Проекты, !Номенклатура, 'План продаж');",
          "",
          "",
          "['Сумма отгрузки с НДС ЭКСПЕРТ , руб.'] => DB('Рентабельность_номекл',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'Выручка от реализации','Экспертно');",
          "['Сумма отгрузки Расчет с НДС, руб.'] => DB('Рентабельность_номекл',!Год,!Месяц,!Версии,!Зоны_ответственности,!Проекты,!Номенклатура,'Выручка от реализации','Расчетно');",
          "",
          "",
          "",
          "\",",
          "",
          "",
          "   // KeyWord = \"CellPutN(\",",
          "    KeyWord = \"DB(\",",
          "    // KeyWord = \"(\",",
          "    text = Text.AfterDelimiter(Text, KeyWord, EntryNo),",
          "",
          "    //Params",
          "    StartInnerDelimiter =  \"(\",",
          "    EndInnerDelimeter = \")\",",
          "",
          "    //Function",
          "",
          "      SplitByStartInnerDelimiter = Text.Split(text, StartInnerDelimiter),",
          "      InnerDelimitersCount = List.Count(List.FirstN(SplitByStartInnerDelimiter, each not Text.Contains( _ , EndInnerDelimeter))),",
          "      OuterSubstring = Text.BeforeDelimiter(text, EndInnerDelimeter, InnerDelimitersCount) ",
          "   in",
          "      OuterSubstring"
        ],
        "kind": "m",
        "lineageTag": "6fd48b7a-6be8-4e7e-a6d8-093b1526b7a3"
      },
      {
        "name": "Text_ContainsAnyOf",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let func = (text as nullable text, ListOfSubstrings as list) as logical =>",
          "        List.Count(Splitter.SplitTextByAnyDelimiter(ListOfSubstrings)(text)) > 1,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" Text_ContainsAnyOf \",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Detects whether text contains any value in ListOfSubstrings \",",
          "    Documentation.Category = \" Text \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.0 \",",
          "    Documentation.Author = \" Alexet Zaitsev \",",
          "    Documentation.Examples = {[Description =  \" TBD \",",
          "    Code = \" Text_ContainsAnyOf(\"\"#TODO\"\", {\"\"#\"\", \"\"//\"\", \"\"--\"\"}) \",",
          "    Result = \" \"\"true\"\" \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "7b079654-b2b1-4faa-89d1-427977067d47",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "Text_BetweenOuterDelimiters",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let func = (text as text, StartInnerDelimiter as text, EndInnerDelimeter as text) as any =>",
          "   let",
          "      SplitByStartInnerDelimiter = Text.Split(text, StartInnerDelimiter),",
          "      InnerDelimitersCount = List.Count(List.FirstN(SplitByStartInnerDelimiter, each not Text.Contains( _ , EndInnerDelimeter))),",
          "      OuterSubstring = Text.BeforeDelimiter(text, EndInnerDelimeter, InnerDelimitersCount) ",
          "   in",
          "      OuterSubstring,",
          "",
          "   documentation = [",
          "   Documentation.Name =  \" Text_BetweenOuterDelimiters \",",
          "   Documentation.Description = \" \",",
          "   Documentation.LongDescription = \" Returns the portion of text outside the nested delimiters \",",
          "   Documentation.Category = \" Text \",",
          "   Documentation.Source = \" \",",
          "   Documentation.Version = \" 1.0 \",",
          "   Documentation.Author = \" Alexet Zaitsev \",",
          "   Documentation.Examples = {[Description =  \" TBD \",",
          "   Code = \" Text_BetweenOuterDelimiters(\"\"CellGetS('str', pSourceCube, sv1, sv2, sv3), pTargetCube, tv1, tv2, tv3);\"\", \"\"(\"\", \"\")\"\" )\",",
          "   Result = \" CellGetS('str', pSourceCube, sv1, sv2, sv3), pTargetCube, tv1, tv2, tv3 \"]}",
          "   ]",
          " in  ",
          "   Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "bc578fcf-625c-4748-b26e-d0461287f815",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "Tree:Processes:Source>Target",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "\tNullTable = Table.FromRows( {}, ",
          "\t\t\t\t\t\t\t\t{",
          "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(0)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(1)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(2)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(3)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(4)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(5)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(6)",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(7)            ",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(8)                                    ",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(9)                                   ",
          "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(10)                                                                 ",
          "\t\t\t\t\t\t\t\t}",
          "\t),",
          "",
          "\tExtractCodeOnly = Source_Processes,",
          "\tRelatedObjects = Table.AddColumn(",
          "                    ExtractCodeOnly",
          "                    , \"RelatedObjects\"",
          "                    , each fn_extractFunctionEntries( Text.From([TextContent]), KeyWords[ProcessProcessRef], {0}, fn_getProcessVariablesDict(Text.From([TextContent]), \"'\") )",
          "        ),",
          "\t// remove a circular reference to the same object and non-evaluated expressions",
          "\tRemoveCircularRefs = if Table.RowCount( RelatedObjects ) > 0",
          "\t\t\t\t\t\tthen Table.FromRecords(Table.TransformRows(RelatedObjects",
          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, (r) => Record.TransformFields(r, {\"RelatedObjects\", each List.Select( _ , each _ <> r[Name] and not Text.Contains( _ , \"|\") ) })",
          "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
          "\t\t\t\t\t\t\t)",
          "\t\t\t\t\t\telse RelatedObjects,                                   ",
          "\t\t\t\t\t\t",
          "\t// ToDo: Move Check to The Function",
          "\t//RowsWithoutErrors = Table.SelectRows(RemoveCircularRefs, each try Text.Length(Text.Combine([RelatedObjects])) >= 0 otherwise false),",
          "",
          "\tMaxTreeDepth = fn_calcMaxTreeDepth(RemoveCircularRefs[RelatedObjects]),",
          "\tResultTable = xDel_fn_createHierarchyPath_ByList(RemoveCircularRefs[[Name], [RelatedObjects]], \"Name\", \"RelatedObjects\", SysName[ProcTreeNodeName], MaxTreeDepth)",
          "in",
          "\tResultTable"
        ],
        "kind": "m",
        "lineageTag": "7e36231c-3fa6-43ae-839a-ca9ad1a1a997",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "fn_calcMaxTreeDepth",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "expression": [
          "( RelatedObjects as list ) as number =>",
          "let   ",
          "    MaxTreePathsCount = SettingsConfig[MaxTreePathsCount],",
          "    InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "    AvgRelatedObjects1 = ",
          "        Value_SafeDivision( ",
          "            try List.Count(List.Combine(RelatedObjects)) ",
          "            otherwise try  List.Count( Table.ExpandTableColumn(Table.FromList(RelatedObjects, Splitter.SplitByNothing(), {\"RelatedObjects\"}, null, ExtraValues.Error), \"RelatedObjects\", { \"RelatedObjects\" } )[RelatedObjects] )",
          "            otherwise 1",
          "        , List.Count(RelatedObjects) ",
          "        ), ",
          "    AvgRelatedObjects2 = if AvgRelatedObjects1 < 1 then 1 else AvgRelatedObjects1 ,",
          "    CalcMaxTreeDepth = Number.RoundDown( Number.Log( Value_SafeDivision(MaxTreePathsCount, List.Count(RelatedObjects)),  AvgRelatedObjects2 )),",
          "    MaxTreeDepth = if Number.IsNaN(CalcMaxTreeDepth) or CalcMaxTreeDepth <= 1 or CalcMaxTreeDepth > InterfaceMaxTreeDepth then InterfaceMaxTreeDepth else CalcMaxTreeDepth",
          "in",
          "    MaxTreeDepth"
        ],
        "kind": "m",
        "lineageTag": "dd9d78af-84ef-465f-8209-3d6a62efcd8a",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "Value_SafeDivision",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let func = (value_1 as any, value_2 as any) =>",
          "    let",
          "        Quotient = try value_1 / value_2 otherwise 0",
          "    in",
          "        if List.Contains({ Number.PositiveInfinity,  Number.NegativeInfinity, null }, Quotient) or Number.IsNaN(Quotient) then 0 else Quotient",
          "    ,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" Value_SafeDivision \",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Safe arithmetic division operation \",",
          "    Documentation.Category = \" Value \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.0 \",",
          "    Documentation.Author = \" Alexey Zaitsev \",",
          "    Documentation.Examples = {[Description =  \" TBD \",",
          "    Code = \" Value_SafeDivision( 10, 0 ),  Value_SafeDivision( 10, \"\"zero\"\" )\",",
          "    Result = \" 0 \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "5863547e-071f-4c3e-9ec7-46246c69d59d",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "fn_reverseHierarchy",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(Source as table, fields as list, optional HierarchyPath as text) as table =>",
          "    Table.FromRecords(",
          "\t\tTable.TransformRows(Source, (row) => ",
          "\t\t\tlet",
          "\t\t\t\tRecordToReverse = Record.SelectFields(row, fields),",
          "\t\t\t\tReversedRow = List.Select(List.Reverse(Record.ToList(RecordToReverse)), each _ <> null),",
          "\t\t\t\tFieldsCount = List.Count(ReversedRow),",
          "\t\t\t\tReversedRecord = Record.FromList(ReversedRow, List.FirstN(fields, FieldsCount)),",
          "\t\t\t\tReversedPath = if (HierarchyPath = null) then [] else [HierarchyPath = Text.Combine( ReversedRow , \"|\")],",
          "\t\t\t\t// CompleteRecord = Record.SelectFields(row, List.RemoveItems(Table.ColumnNames(Source), fields & { HierarchyPath })) & ReversedRecord & ReversedPath",
          "\t\t\t\tCompleteRecord = Record.SelectFields(row, List.RemoveItems(Record.FieldNames(row), fields & { HierarchyPath })) & ReversedRecord & ReversedPath",
          "\t\t\tin",
          "\t\t\t\tCompleteRecord",
          "\t\t)",
          "\t, Table.ColumnNames(Source), MissingField.UseNull)"
        ],
        "kind": "m",
        "lineageTag": "91b4874f-4067-44d2-99d5-38abba244d60",
        "queryGroup": "Functions\\Utils"
      },
      {
        "name": "xDel_Query1",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Number"
          }
        ],
        "expression": [
          "let",
          "    RelatedObjects = xDel_Query2[Definitions],",
          "    //RelatedObjects = #\"xDel_Tree:Rules:Target<Source\"[RelatedObjects],",
          "    MaxTreePathsCount = SettingsConfig[MaxTreePathsCount],",
          "    InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "    AvgRelatedObjects1 = ",
          "        Value_SafeDivision( ",
          "            try List.Count(List.Combine(RelatedObjects)) ",
          "            otherwise try  List.Count( Table.ExpandTableColumn(Table.FromList(RelatedObjects, Splitter.SplitByNothing(), {\"RelatedObjects\"}, null, ExtraValues.Error), \"RelatedObjects\", { \"RelatedObjects\" } )[RelatedObjects] )",
          "            otherwise 1",
          "        , List.Count(RelatedObjects) ",
          "        ), ",
          "    AvgRelatedObjects2 = if AvgRelatedObjects1 < 1 then 1 else AvgRelatedObjects1 ,",
          "    CalcMaxTreeDepth = Number.RoundDown( Number.Log( Value_SafeDivision(MaxTreePathsCount, List.Count(RelatedObjects)),  AvgRelatedObjects2 )),",
          "    MaxTreeDepth = if Number.IsNaN(CalcMaxTreeDepth) or CalcMaxTreeDepth <= 1 or CalcMaxTreeDepth > InterfaceMaxTreeDepth then InterfaceMaxTreeDepth else CalcMaxTreeDepth",
          "in",
          "    MaxTreeDepth"
        ],
        "kind": "m",
        "lineageTag": "0482a7b0-c89c-4af2-996b-4b9b6968288c"
      },
      {
        "name": "Tree:Feeders:Source>Target",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "\tNullTable = Table.FromRows( {}, ",
          "\t\t\t\t\t\t\t\t{",
          "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(0)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(1)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(2)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(3)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(4)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(5)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(6)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(7)            ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(8)                                    ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(9)                                   ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(10)                                                                 ",
          "\t\t\t\t\t\t\t\t}",
          "\t),",
          "",
          "    ExtractFeedersOnly = Table.TransformColumns(Source_Rules, { \"TextContent\", ( text ) => Text.AfterDelimiter(text, Text.Upper(KeyWords[FeederRef])) }),",
          "    RelatedObjects = Table.AddColumn(",
          "                    ExtractFeedersOnly",
          "                    , \"RelatedObjects\"",
          "                    , each fn_extractFunctionEntries(Text.From([TextContent]), KeyWords[RuleCubeRef], {0})",
          "    ),",
          "    // remove a circular reference to the same object",
          "    RemoveCircularRefs = if Table.RowCount( RelatedObjects ) > 0",
          "                            then Table.FromRecords(Table.TransformRows(RelatedObjects",
          "                                                                        , (r) => Record.TransformFields(r, {\"RelatedObjects\", each List.RemoveItems( _ , { r[Name] } ) })",
          "                                                                        )",
          "                                )",
          "                            else RelatedObjects,                                   ",
          "                            ",
          "   // ToDo: Move Check to The Function",
          "   // RowsWithoutErrors = Table.SelectRows(RemoveCircularRefs, each try Text.Length(Text.Combine([RelatedObjects])) >= 0 otherwise false),",
          "\t",
          "    MaxTreeDepth = fn_calcMaxTreeDepth(RemoveCircularRefs[RelatedObjects]),",
          "    //ResultTable = fn_createHierarchyPath_ByList(RemoveCircularRefs[[Name], [RelatedObjects]], \"Name\", \"RelatedObjects\", SysName[CubeTreeNodeName], MaxTreeDepth)",
          "    ResultTable = fn_createHierarchyPath(RemoveCircularRefs[[Name], [RelatedObjects]], \"Name\", \"RelatedObjects\", SysName[CubeTreeNodeName], MaxTreeDepth)",
          "in",
          "    ResultTable"
        ],
        "kind": "m",
        "lineageTag": "30b34c68-5d23-4088-bf7c-414d5f81a4c2",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "fn_nestedExpressionsCount",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "(TextToParse as text, Expression as text, NestedExpressions as list) as number =>",
          "let",
          "\tfn_appendObjectToList_EntryNo = (EntriesList as list, KeyWord as text, EntryNo as number) as list =>  ",
          "\tlet",
          "\t\tNextEntry = Text_BetweenOuterDelimiters(Text.AfterDelimiter(TextToParse, KeyWord & \"(\", EntryNo), \"(\", \")\"),",
          "\t\tAppendedList = if NextEntry = \"\"",
          "\t\t\tthen EntriesList",
          "\t\t\telse ",
          "\t\t\t\tlet ",
          "\t\t\t\t\tEntriesList = EntriesList & { NextEntry },",
          "\t\t\t\t\tRecursion = @fn_appendObjectToList_EntryNo(EntriesList, KeyWord, EntryNo + 1)",
          "\t\t\t\tin",
          "\t\t\t\t\tRecursion",
          "\tin",
          "\t\tAppendedList,",
          "\t\t\t\t\t",
          "\tEntriesList = fn_appendObjectToList_EntryNo({}, Expression, 0 ),",
          "\tEntriesWithNestedExpressions = List.Select(EntriesList, each Text_ContainsAnyOf( _ , NestedExpressions))",
          "in",
          "\tList.Count(EntriesWithNestedExpressions)"
        ],
        "kind": "m",
        "lineageTag": "cd51457d-0c9d-45ec-9d3f-643e409639ee",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "xDel_Query2",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "expression": [
          "Table.ReplaceValue(",
          "    Table.FromRecords({",
          "        [Name = \"Cindy\", Country = \"US\"],",
          "        [Name = \"Bob\", Country = \"CA\"]",
          "    }),",
          "    each [Country] = \"US\",",
          "    \"?\",",
          "    (currentValue, isUS, replacementValue) =>",
          "        if isUS then",
          "            Text.Repeat(replacementValue, Text.Length(currentValue))",
          "        else",
          "            currentValue,",
          "    {\"Name\", \"Country1\"}",
          ")"
        ],
        "kind": "m",
        "lineageTag": "f1e5d632-ef4b-4023-91aa-9c43baf93283"
      },
      {
        "name": "01 MODE",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": [
          "Mandatory. Select \"Service\" or \"Desktop\".",
          "Use \"Service\" on the Power BI Portal and \"Desktop\" in the Power BI Desktop"
        ],
        "expression": "\"Service\" meta [IsParameterQuery=true, List={\"Service\", \"Desktop\"}, DefaultValue=\"Service\", Type=\"Text\", IsParameterQueryRequired=true]",
        "kind": "m",
        "lineageTag": "7842af7f-fea2-425c-abd0-a6391010802f",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "21 MAX TREE PATHS COUNT",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "description": "Mandatory. The maximum number of calculated paths in the model chains. The value depends on the Power BI Server performance",
        "expression": "10000000 meta [IsParameterQuery=true, Type=\"Number\", IsParameterQueryRequired=true]",
        "kind": "m",
        "lineageTag": "e855521e-cd44-462d-aaa6-240907f71ce4",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "31 DATA FILES PATH",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Text"
          }
        ],
        "description": [
          "Optional. The absolute path to the model data files. Used with the CONNECTION TYPE = \"DataFiles\"",
          "Format: \"Full_path_to_the_directory\\\"",
          "Default value: \"X:\\\""
        ],
        "expression": "\"C:\\Program Files\\ibm\\cognos\\tm1_64\\samples\\tm1\\sample_outdoors\\datafiles\\\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "e7f3af23-5e36-4889-986a-86140c53fbe9",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "32 LOG FILES PATH",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "description": [
          "Optional. The absolute path to the model log files. Used with the CONNECTION TYPE = \"DataFiles\"",
          "Format: \"Full_path_to_the_directory\\\"",
          "Default value: \"X:\\\""
        ],
        "expression": "\"C:\\Program Files\\ibm\\cognos\\tm1_64\\samples\\tm1\\sample_outdoors\\logfiles\\\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "b3995e1c-1fc1-4ed1-aad3-973a0328f3f4",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "22 ALIASES",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "description": "Optional. Aliases listed here separated by commas or semicolons will limit the loading of other aliases in the model, which can significantly speed up the overall data loading",
        "expression": "null meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]",
        "kind": "m",
        "lineageTag": "c8491541-15c9-443b-ab1c-e0f7e1487bf0",
        "queryGroup": "Settings\\Params"
      },
      {
        "name": "Source_MessageLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    ///TODO - check fields!!!",
          "    NullTable = #table(type table[TimeStamp = datetime, Level = text, Message = text], {}),",
          "    ",
          "    Source = ",
          "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
          "        then",
          "            if (try not fn_isSuccessfulHttpRequest(sREST_MessageLog[#\"@metadata\"]) otherwise true) ",
          "            then     ",
          "                NullTable",
          "            else",
          "                let",
          "                    Value = sREST_MessageLog[value],",
          "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
          "                    ExpandMessageLog = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"TimeStamp\", \"Level\", \"Message\"})",
          "                in",
          "                    ExpandMessageLog",
          "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
          "        then",
          "            let",
          "                SourceTable = ",
          "                    if DataFiles_MessageLog = null ",
          "                    then NullTable ",
          "                    else ",
          "                        let ",
          "                            Source = DataFiles_MessageLog",
          "                        in",
          "                           Source ",
          "            in",
          "                SourceTable",
          "        else",
          "            NullTable,",
          "        ",
          "    MessagesPattern = Record.ToList(SysMessageLog),",
          "    Selection = Table.SelectRows(Source, each ",
          "                                                let ",
          "                                                    Msg = [Message], ",
          "                                                    Filter = List.MatchesAny( MessagesPattern, each Text.Contains ( Msg, _ ))",
          "                                                in ",
          "                                                    Filter",
          "                                        ),",
          "    TransformColumnTypes = Table.TransformColumnTypes(Selection, {{\"TimeStamp\", type datetime}, {\"Level\", type text}, {\"Message\", type text}})",
          "in",
          "    TransformColumnTypes"
        ],
        "kind": "m",
        "lineageTag": "f683b3c1-14ab-4b16-a102-d8cdf3d555b4",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "SysMessageLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "let",
          "    Source = [",
          "\t\t\t\t  ProcessFeedersMsg = \"Done computing feeders for base cube\"",
          "\t\t\t \t, ElapsedTimeMsg = \"TM1 Server is ready, elapsed time\"",
          "\t\t\t]",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "2fe35bcc-a952-4388-a564-29de2b286cf6",
        "queryGroup": "SysData"
      },
      {
        "name": "sREST_MessageLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          }
        ],
        "expression": [
          "//let",
          "    //Period = SettingsConfig[MessageLogPeriodInDays],",
          "    ",
          "    //Result = if (Period < 0)",
          "    //then",
          "    //    null",
          "    //else",
          "        let",
          "            //StartDate = Date.StartOfDay(DateTime.LocalNow() + #duration(-Period, 0, 0, 0)),",
          "            //ODataStartDate = DateTime.ToText( StartDate, \"yyyy-MM-dd\" ) & \"T00:00:00Z\",",
          "            Source = ",
          "                if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
          "                //then fn_sendHttpRequest(\"MessageLog()?$filter=TimeStamp ge \" & ODataStartDate, null, fn_getRequestNo(SysHttpRequests, \"sREST_MessageLog\"))",
          "                then fn_sendHttpRequest(\"MessageLog()\", null, fn_getRequestNo(SysHttpRequests, \"sREST_MessageLog\"))",
          "                else null",
          "        in",
          "            Source",
          "//in",
          "//    Result"
        ],
        "kind": "m",
        "lineageTag": "0573f5ea-25e8-4910-8d82-cc359b8a4012",
        "queryGroup": "Data\\UserData\\RESTLoad"
      },
      {
        "name": "DataFiles_MessageLog",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "    Result = ",
          "      if ConnectionConfig[ConnectionType] = \"DataFiles\" then",
          "            let",
          "                //Source = try Table.Buffer(Csv.Document(File.Content(ConnectionConfig[LogFilesPath] & \"tm1server.log\")), [Delimiter = \"#(lf)\", Columns = {\"Row\"}, Encoding = 65001, QuoteStyle = QuoteStyle.None])) otherwise Table.FromRecords({ [Row = null] }),",
          "                // Avoiding a dynamic data source when updating on the Service",
          "                Source =  try Table.Buffer(Csv.Document(File.Contents(#\"32 LOG FILES PATH\" & \"tm1server.log\"), [Delimiter = \"#(lf)\", Columns = {\"Row\"}, Encoding = 65001, QuoteStyle = QuoteStyle.None])) otherwise Table.FromRecords({ [Row = null] }),",
          "                SplitRows = Table.FromList(Source[Row], Splitter.SplitTextByDelimiter(\"   \", QuoteStyle.None), { \"ThreadID\", \"[]\", \"Level\", \"TimeStamp\", \"Logger\", \"Message\" }, null, ExtraValues.Ignore),",
          "                SelectNotNull = Table.SelectRows(SplitRows, each [TimeStamp] <> null)",
          "        in",
          "            SelectNotNull[[TimeStamp], [Level], [Message]]",
          "    else null",
          "in",
          "    Result"
        ],
        "kind": "m",
        "lineageTag": "6b2ed82e-2631-4bef-b143-9c7dbbd85b80",
        "queryGroup": "Data\\UserData\\DataFilesLoad"
      },
      {
        "name": "SysHttpRequests",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "List"
          }
        ],
        "expression": [
          "let",
          "    Source = {",
          "\t\t\t\t\"sREST_Rules\"",
          "\t\t\t\t, \"sREST_Processes\"",
          "\t\t\t\t, \"sREST_Configuration\"",
          "\t\t\t\t, \"sREST_Server\"",
          "\t\t\t\t, \"sREST_CubeDimensions\"",
          "\t\t\t\t, \"sREST_DimensionAttributes\"",
          "\t\t\t\t, \"sREST_DimensionElements\"",
          "\t\t\t\t, \"sREST_Users\"",
          "\t\t\t\t, \"sREST_}ClientGroups\"",
          "\t\t\t\t, \"sREST_}CubeSecurity\"",
          "\t\t\t\t, \"sREST_}ElementAttributes_}Groups\"",
          "\t\t\t\t, \"sREST_}StatsByCube\"",
          "\t\t\t\t, \"sREST_}StatsByClient\"",
          "\t\t\t\t, \"sREST_}StatsForServer\"",
          "\t\t\t\t, \"sREST_MessageLog\"",
          "\t\t\t\t, \"sREST_TransactionLog\"",
          "\t\t\t}",
          "in",
          "    Source"
        ],
        "kind": "m",
        "lineageTag": "1575c016-f711-4317-9ede-aecc2b192c3c",
        "queryGroup": "SysData"
      },
      {
        "name": "fn_extractFunctionEntries",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "// Function returns a list of objects extracted from the text, defined by incoming keywords and a marker-function.",
          "// Parameters: ",
          "//\t\tTextToParse: Prepared text ( returned by prepareCodeContent() )",
          "//\t\tKeyWords: one or several combined values from KeyWords or any other source;",
          "//      ParamNos: parameter number in KeyWords functions",
          "//\t\tVariablesDict: if variables Dictionary is needed (see fn_getProcessVariablesDict())",
          "//      EntriesListByKeyWords: list of target entries by all KeyWords",
          "//      KeyWordNo: KeyWord iterator",
          "//\t\tEntriesList: accumulated list of target entries while parsing",
          "//\t\tEntryNo: entry iterator for a KeyWord",
          "",
          "",
          "(TextToParse as text, KeyWords as list, ParamNos as list, optional VariablesDict as list) as list =>",
          "    let",
          "        fn_appendObjectToList_KeyWordNo = (EntriesListByKeyWords as list, KeyWordNo as number) as list =>",
          "            let",
          "            // Append next entry for the current KeyWord",
          "                fn_appendObjectToList_EntryNo = (EntriesList as list, KeyWord as text, EntryNo as number) as list =>  ",
          "                let",
          "                    NextFunction = Text_BetweenOuterDelimiters(Text.AfterDelimiter(TextToParse, KeyWord & \"(\", EntryNo), \"(\", \")\"),",
          "                    AppendedList = if NextFunction = \"\"",
          "                        then EntriesList",
          "                        else ",
          "                            let ",
          "                                // Escaping any inner commas for subsequent splitting",
          "                                TransformNestedOpeningParenthesis = Text.Replace(NextFunction, \"(\", \"\"\"(\"),",
          "                                TransformNestedClosingParenthesis = Text.Replace(TransformNestedOpeningParenthesis, \")\", \")\"\"\"),",
          "                                TransformSingleQuotes = Text.Replace(TransformNestedClosingParenthesis, \"'\", \"\"\"'\"),",
          "",
          "                                // Extracting parametres",
          "                                ParameterList = Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(TransformSingleQuotes),",
          "                                ReplaceVariablesWithValue = ",
          "                                    if VariablesDict = null or List.IsEmpty(VariablesDict) // Only for Processes ",
          "                                    then ParameterList ",
          "                                    else List.Transform(ParameterList, ( val ) => if Text.StartsWith ( val , \"'\") then val else try List.Last(List.Select(VariablesDict, each _{0} = val)){1} otherwise \"''\")",
          "                                ,",
          "                                RemovedQuotationsParameterList = List.Transform(ReplaceVariablesWithValue, each Text.Remove( _ , {\"'\"} )),",
          "                                Object = RemovedQuotationsParameterList{ParamNos{KeyWordNo}},",
          "                                EntriesList = ",
          "                                    if Object <> null and Text.Trim(Object) <> \"\" and not List.Contains(EntriesList, Object)",
          "                                    then EntriesList & { Object }",
          "                                    else EntriesList",
          "                                ,",
          "                                Recursion = @fn_appendObjectToList_EntryNo(EntriesList, KeyWords{KeyWordNo}, EntryNo + 1)",
          "                            in ",
          "                                Recursion               ",
          "                in ",
          "                    AppendedList,",
          "",
          "                EntriesListByKeyWords = List.Combine({EntriesListByKeyWords, fn_appendObjectToList_EntryNo({}, KeyWords{KeyWordNo}, 0 )})",
          "            in",
          "                if KeyWordNo = List.Count(KeyWords) - 1",
          "                    then EntriesListByKeyWords",
          "                    else @fn_appendObjectToList_KeyWordNo(EntriesListByKeyWords, KeyWordNo + 1)",
          "            ,",
          "            ",
          "        Entires = fn_appendObjectToList_KeyWordNo({}, 0),",
          "        DistinctList = List.Distinct(Entires)",
          "    in ",
          "        DistinctList"
        ],
        "kind": "m",
        "lineageTag": "334a0b76-23de-4ac6-a533-aaff43b4cf4c",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "fn_getProcessVariablesDict",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "expression": [
          "// Function prepares Processes variables Dictionary",
          "// Parameters: ",
          "//      TextToParse: Prepared code ( returned by prepareCodeContent() );",
          "//      VariableQuote = \"'\" for Processes",
          "// ++++++++++++++++++++++++++++++++++++++++++++++++",
          "(TextToParse as text, VariableQuote as text) as list =>  ",
          "let",
          "// Select variables: keys cannot contain special symbols, values are not functions",
          "    Rows = Text.Split(TextToParse, \";\"),",
          "    RawsKeyValue = List.Transform(Rows, each if Text.Contains( _ , \"=\" ) then Splitter.SplitTextByAnyDelimiter({ \"@=\", \"=\" })( _ ) else { null, _ } ),",
          "    // 0 - Key, 1 - Value",
          "    VariableDict = List.Select(RawsKeyValue, each _{0} <> null and not Text_ContainsAnyOf( _{0} , { \"(\", \"[\" } ) and not Text_ContainsAnyOf( _{1} , { \"(\", \"[\" } )),",
          "    ",
          "    Counter = List.Count(VariableDict),",
          "    // Private function replaces variable references with real values   ",
          "    fn_getRealVairableValue = (i as number, optional DictToSearchIn as list) as list =>",
          "        let",
          "            ReferredVariableKey = VariableDict{i}{1},",
          "            VariableNewValue = if Text.Contains( ReferredVariableKey, VariableQuote ) then ReferredVariableKey else try List.Last(List.Select(DictToSearchIn, each _{0} = ReferredVariableKey)){1} otherwise VariableQuote & VariableQuote,",
          "            TransformedVariableDict = if DictToSearchIn = null then {{ VariableDict{i}{0}, VariableNewValue }} else DictToSearchIn & {{ VariableDict{i}{0}, VariableNewValue }}",
          "        in",
          "            if i >= Counter - 1",
          "                then TransformedVariableDict",
          "                else @fn_getRealVairableValue(i + 1, TransformedVariableDict),",
          "    ",
          "    ReplaceVariableReferenceWithValue = fn_getRealVairableValue(0)",
          "in",
          "    ReplaceVariableReferenceWithValue"
        ],
        "kind": "m",
        "lineageTag": "587e057a-492f-47d0-8fb5-85400f3ff4dc",
        "queryGroup": "Functions\\RulesProcessesHandling\\Private"
      },
      {
        "name": "fn_createHierarchyPath",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "(SourceTable as table, KeyField as any, ChildrenObjectsField as text, TreeNodeName as text, HierarchyDepth as number, optional DefinitionMap as list) =>",
          "   let",
          "      fn_nextNode = (NodesTable as table, NodeNo as number) =>",
          "         let",
          "            ExpandLevel_N = Table_ExpandAnyColumn(",
          "                                                      NodesTable",
          "                                                      , TreeNodeName & Text.From(NodeNo)",
          "                                                      , if DefinitionMap = null then null else DefinitionMap // to handle properly the entirely null nodes ",
          "                                                      , if DefinitionMap = null then null else { TreeNodeName & Text.From(NodeNo), TreeNodeName & Text.From(NodeNo) & \": \" & SysName[CubeTreeAreaDefinition] }",
          "                                                      , if DefinitionMap = null then null else type table // to handle properly the entirely null nodes ",
          "                                                ),",
          "            RemoveCircularRefLevel_N = Table.ReplaceValue(",
          "                                                      ExpandLevel_N",
          "                                                      , each Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo)))",
          "                                                      , each null",
          "                                                      , (currentValue, isTrue, replacementValue) => if isTrue then replacementValue else currentValue  ",
          "                                                      , List.Select(Table.ColumnNames(ExpandLevel_N), each Text.StartsWith( _ , TreeNodeName & Text.From(NodeNo) ))",
          "                                                   ),",
          "            //Update hierarchy path with new meaningful values",
          "            AppendHierarchyPath = Table.ReplaceValue(",
          "                                                         RemoveCircularRefLevel_N ",
          "                                                         , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) = null",
          "                                                         , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) ",
          "                                                         , (currentValue, isTrue, replacementValue) => if isTrue then currentValue else Text.Combine({ currentValue, Splitter, replacementValue })  ",
          "                                                         , {\"HierarchyPath\"}                                                       ",
          "                                                      ),",
          "            ",
          "            NextNodeTable = ",
          "               if (NodeNo = InterfaceMaxTreeDepth - 2) then LastNodeTable ",
          "               else if (NodeNo = HierarchyDepth - 1) then LastNodeTable ",
          "               else if (NodeNo < HierarchyDepth - 1) then SourceTable ",
          "               else NullNodeTable,           ",
          "            HierarchyTable = if (NodeNo >= InterfaceMaxTreeDepth - 1)",
          "                                 then",
          "                                     AppendHierarchyPath       ",
          "                                 else ",
          "                                    let",
          "                                       AddNextNodeTable = Table.NestedJoin(",
          "                                                  AppendHierarchyPath",
          "                                                , TreeNodeName & Text.From(NodeNo)",
          "                                                , NextNodeTable",
          "                                                , KeyField",
          "                                                , \"TableColumn\"",
          "                                                , JoinKind.LeftOuter ",
          "                                             ),",
          "                                       ExpandedNextNodeTable = Table.ExpandTableColumn(AddNextNodeTable, \"TableColumn\", { ChildrenObjectsField }, { TreeNodeName & Text.From(NodeNo + 1) })",
          "                                    in ",
          "                                       @fn_nextNode(ExpandedNextNodeTable, NodeNo + 1) ",
          "         in",
          "            HierarchyTable,",
          "",
          "",
          "      InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "      RootNodeTable = Table.AddColumn(Table.RenameColumns(SourceTable, {{ KeyField, TreeNodeName & Text.From(0) }, { ChildrenObjectsField, TreeNodeName & Text.From(1) }}), \"HierarchyPath\", each Record.Field( _ , TreeNodeName & Text.From(0))),",
          "      LastNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each {\"[ ... ]\"}),",
          "      NullNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each null),",
          "      Splitter = \"|\",",
          "      ",
          "      Return = fn_nextNode(RootNodeTable, 1)",
          "   in ",
          "      Return"
        ],
        "kind": "m",
        "lineageTag": "371b48d7-3c41-427f-ad4c-3832baa17964",
        "queryGroup": "Functions\\RulesProcessesHandling"
      },
      {
        "name": "List_ItemsByPositions",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (List as list, Positions as list) as list =>",
          "   let",
          "      fn_getPos = (Output as list, i as number) => ",
          "         let",
          "            Output = Output & { List{ Positions{i} } }",
          "         in",
          "            if i < List.Count(Positions) - 1",
          "               then @fn_getPos(Output, i + 1)",
          "               else Output",
          "      ,",
          "      Positions = if List.IsEmpty(Positions) then List.Positions(List) else Positions,      ",
          "      Output = fn_getPos( {}, 0 )",
          "   in",
          "      Output,",
          "",
          "   documentation = [",
          "   Documentation.Name =  \" List_ItemsByPositions\",",
          "   Documentation.Description = \" \",",
          "   Documentation.LongDescription = \" Returns the result pulling specific items from the List \",",
          "   Documentation.Category = \" List \",",
          "   Documentation.Source = \" \",",
          "   Documentation.Version = \" 1.0 \",",
          "   Documentation.Author = \" Alexey Zaitsev \",",
          "   Documentation.Examples = {[Description =  \" \",",
          "   Code = \" List_ItemsByPositions({10, 11 ,12, 13, 14}, {0, 4}) \",",
          "   Result = \" {10, 14} \"]}",
          "   ]",
          "in  ",
          "   Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "d8587da4-d8eb-49b6-bdbf-adff9383f504",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "xDel_createHierarchyPath_ByMap",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let   ",
          "    ExtractRulesOnly = Table.TransformColumns(Source_Rules, { \"TextContent\", ( text ) => Text.BeforeDelimiter(text, Text.Upper(KeyWords[FeederRef])) }),",
          "   ",
          "    ParseTextContent = Table.AddColumn(",
          "                    ExtractRulesOnly",
          "                    , \"Definitions\"",
          "                    , each ",
          "                            let",
          "                                TextToParse = _[TextContent] ,",
          "                                Rows = Text.Split(TextToParse, \";\"),",
          "                                HasRelation = List.Select(Rows, each Text_ContainsAnyOf( _ , KeyWords[RuleCubeRef])),",
          "                                // 0 - Area definition (left), 1 - Formula (right)",
          "                                LeftRight = List.Transform(HasRelation, each if Text.Contains( _ , \"=\" ) then { Text.BeforeDelimiter( _ , \"=\", { 0, RelativePosition.FromStart }) } & { Text.AfterDelimiter( _ , \"=\", { 0, RelativePosition.FromStart }) } else null ),                           ",
          "                                RemoveNulls = List.Select(LeftRight, each _ <> null )",
          "                            in",
          "                                RemoveNulls",
          "",
          "    ),",
          "    ExtractRelatedObjects = ",
          "        Table.TransformColumns(",
          "                                ParseTextContent,",
          "                                { ",
          "                                    \"Definitions\"",
          "                                    , each",
          "                                        let ",
          "                                            RelatedObjects = List.Transform( _ , ( map ) => { map{0}} & { fn_extractFunctionEntries( map{1}, KeyWords[RuleCubeRef], {0, 1, 1, 1, 1, 2} )} ),",
          "                                            MappingTables = List.Transform( RelatedObjects , ( map ) => Table.FromColumns( { map{1}, { map{0} } }, { \"RelatedObjects\", \"Area definition\" }) ),",
          "                                            AreaDefinitionFillDown = List.Transform( MappingTables , ( table ) => Table.FillDown( table, { \"Area definition\" } )),",
          "                                            RemoveDuplicates = List.Distinct(AreaDefinitionFillDown),",
          "                                            ExpandMappingTable = Table.ExpandTableColumn(Table.FromList(RemoveDuplicates, Splitter.SplitByNothing(), {\"Definitions\"}, null, ExtraValues.Error), \"Definitions\", { \"RelatedObjects\", \"Area definition\" }),",
          "                                            MappingTablesGrouping = Table.Group(ExpandMappingTable, {\"RelatedObjects\"}, {{\"Area definition\", each Text.Combine([Area definition], \"#(cr)#(lf)\") }})",
          "                                        in",
          "                                            MappingTablesGrouping",
          "                                }",
          "    ),                             ",
          "    MaxTreeDepth = fn_calcMaxTreeDepth(ExtractRelatedObjects[Definitions]),",
          "   ",
          "   ",
          "    // 1. Definition area",
          "    SourceTable = ExtractRelatedObjects,",
          "",
          "    KeyField = \"Name\",",
          "    ChildrenObjectsField = \"Definitions\",",
          "    DefinitionMap = {\"RelatedObjects\", \"Area definition\"},",
          "    TreeNodeName = SysName[CubeTreeNodeName],",
          "    HierarchyDepth = 3,",
          "    NodeNo = 1,",
          "",
          "    InterfaceMaxTreeDepth = SettingsConfig[InterfaceMaxTreeDepth],",
          "    RootNodeTable = Table.AddColumn(Table.RenameColumns(SourceTable, {{ KeyField, TreeNodeName & Text.From(0) }, { ChildrenObjectsField, TreeNodeName & Text.From(1) }}), \"HierarchyPath\", each Record.Field( _ , TreeNodeName & Text.From(0))),",
          "    LastNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each \"[ ... ]\"),",
          "    NullNodeTable = Table.AddColumn(Table.SelectColumns(SourceTable, KeyField), ChildrenObjectsField, each null),",
          "    Splitter = \"|\",",
          "",
          "    ",
          "    // +++ Node 01",
          "    //ExpandLevel_N_1 = Table.ExpandTableColumn(RootNodeTable, TreeNodeName & Text.From(NodeNo), DefinitionMap, { TreeNodeName & Text.From(NodeNo), TreeNodeName & Text.From(NodeNo) & \": Area definition\" }),",
          "    ExpandLevel_N_1 = Table_ExpandAnyColumn(RootNodeTable, TreeNodeName & Text.From(NodeNo), null,  { TreeNodeName & Text.From(NodeNo), TreeNodeName & Text.From(NodeNo) & \": \" & SysName[CubeTreeAreaDefinition] }),",
          "    RemoveCircularRefLevel_N_1 = Table.ReplaceValue(",
          "                                        ExpandLevel_N_1",
          "                                        , each Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo)))",
          "                                        , each null",
          "                                        , (currentValue, isTrue, replacementValue) => if isTrue then replacementValue else currentValue                                                     ",
          "                                        , List.Select(Table.ColumnNames(ExpandLevel_N_1), each Text.StartsWith( _ , TreeNodeName & Text.From(NodeNo) ))",
          "                                        ),",
          "    //Update hierarchy path with new meaningful values",
          "   /* AppendHierarchyPath_1 = Table.ReplaceValue(",
          "                                                    RemoveCircularRefLevel_N_1",
          "                                                    , each Record.Field( _ ,  \"HierarchyPath\")",
          "                                                    , each if Record.Field( _ , TreeNodeName & Text.From(NodeNo)) = null",
          "                                                                then Record.Field( _ ,  \"HierarchyPath\")",
          "                                                                else Text.Combine({Record.Field( _ ,  \"HierarchyPath\"), Splitter, Record.Field( _ , TreeNodeName & Text.From(NodeNo))} )",
          "                                                    , Replacer.ReplaceValue",
          "                                                    , {\"HierarchyPath\"}                                                       ",
          "                                                ),",
          "    */",
          "    AppendHierarchyPath_1 = Table.ReplaceValue(",
          "                                                RemoveCircularRefLevel_N_1 ",
          "                                                , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) = null",
          "                                                , each Record.Field( _ , TreeNodeName & Text.From(NodeNo)) ",
          "                                                , (currentValue, isTrue, replacementValue) => if isTrue then currentValue else Text.Combine({ currentValue, Splitter, replacementValue })  ",
          "                                                , {\"HierarchyPath\"}                                                       ",
          "                                            ),",
          "",
          "",
          "    NextNodeTable_1 = ",
          "               if (NodeNo = InterfaceMaxTreeDepth - 2) then LastNodeTable ",
          "               else if (NodeNo = HierarchyDepth - 1) then LastNodeTable ",
          "               else if (NodeNo < HierarchyDepth - 1) then SourceTable ",
          "               else NullNodeTable,  ",
          "",
          "   ",
          "   // +++ Add Node 02                   ",
          "    AddNextNodeTable_1 = Table.NestedJoin(",
          "                                                    AppendHierarchyPath_1",
          "                                                    , TreeNodeName & Text.From(NodeNo)",
          "                                                    , NextNodeTable_1",
          "                                                    , KeyField",
          "                                                    , \"TableColumn\"",
          "                                                    , JoinKind.LeftOuter ",
          "                                                ),",
          "    ExpandNextNodeTable_1 = Table.ExpandTableColumn(AddNextNodeTable_1, \"TableColumn\", { ChildrenObjectsField }, { TreeNodeName & Text.From(NodeNo + 1) }),",
          "",
          "",
          "// +++ Node 02",
          "    // ExpandLevel_N_2 = Table.ExpandTableColumn(ExpandNextNodeTable_1, TreeNodeName & Text.From(NodeNo + 1), DefinitionMap, { TreeNodeName & Text.From(NodeNo + 1), TreeNodeName & Text.From(NodeNo + 1) & \": Area definition\" }),",
          "    ExpandLevel_N_2 = Table_ExpandAnyColumn(ExpandNextNodeTable_1, TreeNodeName & Text.From(NodeNo + 1), null,  { TreeNodeName & Text.From(NodeNo + 1), TreeNodeName & Text.From(NodeNo + 1) & \": Area definition\" }),",
          "    RemoveCircularRefLevel_N_2 = Table.ReplaceValue(",
          "                                        ExpandLevel_N_2",
          "                                        , each Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo + 1))) //Record.Field( _ , TreeNodeName & Text.From(NodeNo))",
          "                                        , each null//if Text.EndsWith(Splitter & Record.Field( _ ,  \"HierarchyPath\"), Splitter & Record.Field( _ , TreeNodeName & Text.From(NodeNo)))",
          "                                                //  then null",
          "                                                //  else Record.Field( _ , TreeNodeName & Text.From(NodeNo))",
          "                                        , (currentValue, isCircular, replacementValue) =>",
          "                                            if isCircular then replacementValue",
          "                                            else currentValue                                                     ",
          "                                        //Replacer.ReplaceValue",
          "                                        , List.Select(Table.ColumnNames(ExpandLevel_N_2), each Text.StartsWith( _ , TreeNodeName & Text.From(NodeNo + 1) ))",
          "                                    ),",
          "    //Update hierarchy path with new meaningful values",
          "    AppendHierarchyPath_2 = Table.ReplaceValue(",
          "                                                    RemoveCircularRefLevel_N_2",
          "                                                    , each Record.Field( _ ,  \"HierarchyPath\")",
          "                                                    , each if Record.Field( _ , TreeNodeName & Text.From(NodeNo + 1)) = null",
          "                                                                then Record.Field( _ ,  \"HierarchyPath\")",
          "                                                                else Text.Combine({Record.Field( _ ,  \"HierarchyPath\"), Splitter, Record.Field( _ , TreeNodeName & Text.From(NodeNo + 1))} )",
          "                                                    , Replacer.ReplaceValue",
          "                                                    , {\"HierarchyPath\"}                                                       ",
          "                                                ),",
          "    ",
          "    NextNodeTable_2 = ",
          "               if (NodeNo = InterfaceMaxTreeDepth - 2) then LastNodeTable ",
          "               else if (NodeNo = HierarchyDepth - 1) then LastNodeTable ",
          "               else if (NodeNo < HierarchyDepth - 1) then SourceTable ",
          "               else NullNodeTable,  ",
          "",
          "   // +++ Add Node 03     ",
          "    AddNextNodeTable = Table.NestedJoin(",
          "                                                    AppendHierarchyPath_2",
          "                                                    , TreeNodeName & Text.From(NodeNo + 1)",
          "                                                    , NextNodeTable_2",
          "                                                    , KeyField",
          "                                                    , \"TableColumn\"",
          "                                                    , JoinKind.LeftOuter ",
          "                                                ),",
          "    ExpandNextNodeTable_2 = Table.ExpandTableColumn(AddNextNodeTable, \"TableColumn\", { ChildrenObjectsField }, { TreeNodeName & Text.From(NodeNo + 2) })",
          "in",
          "    ExpandNextNodeTable_2"
        ],
        "kind": "m",
        "lineageTag": "65588b96-0fde-43d9-9347-c70242a7a280"
      },
      {
        "name": "Table_ExpandAnyColumn",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Function"
          }
        ],
        "expression": [
          "let func = (Table as table, FieldToExpand as text, optional ColumnNames as list, optional NewColumnNames as list, optional PersistentType as type) as table =>",
          "let",
          "    Value = if PersistentType = null ",
          "            then try Record.Field(Table.SelectRows(Table, ( row ) =>  Value.Is(Record.Field(row, FieldToExpand), type list) or Value.Is(Record.Field(row, FieldToExpand), type table) ){0}, FieldToExpand) otherwise null",
          "            else null,",
          "    ExpendedTable = if PersistentType = type list or Value.Is(Value, type list) then Table.ExpandListColumn(Table, FieldToExpand) else ",
          "                    if PersistentType = type table or Value.Is(Value, type table) then Table.ExpandTableColumn(Table, FieldToExpand, if (ColumnNames = null) then Table.ColumnNames(Value) else ColumnNames, NewColumnNames) else",
          "                    Table",
          "in",
          "    ExpendedTable ,",
          "",
          "    documentation = [",
          "    Documentation.Name =  \" Table_TransformAllColumns \",",
          "    Documentation.Description = \" \",",
          "    Documentation.LongDescription = \" Transforms all columns of a <code>table</code> with one <code>function</code> and one <code>type</code>. Optionial <code>ColumnNames</code> to limit to a specific list. \",",
          "    Documentation.Category = \" Table \",",
          "    Documentation.Source = \" \",",
          "    Documentation.Version = \" 1.1 \",",
          "    Documentation.Author = \" Internet \",",
          "    Documentation.Examples = {[Description =  \" TBD \",",
          "    Code = \" Table_ExpandAnyColumn (SourceTable, ListOrTableType, null,  { new_1, new_2 }), \",",
          "    Result = \" Table with expanded ListOrTableType Field \"]}",
          "    ]",
          " in  ",
          "    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))"
        ],
        "kind": "m",
        "lineageTag": "5b64d225-6748-4feb-9fe2-33e015012bfc",
        "queryGroup": "Functions\\Lib\\BasicEx"
      },
      {
        "name": "xDel_Tree:Rules:Target<Source",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "expression": [
          "let",
          "\tNullTable = Table.FromRows( {}, ",
          "\t\t\t\t\t\t\t\t{",
          "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(0)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(1)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(2)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(3)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(4)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(5)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(6)",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(7)            ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(8)                                    ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(9)                                   ",
          "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(10)                                                                 ",
          "\t\t\t\t\t\t\t\t}",
          "\t),",
          "",
          "    ExtractRulesOnly = Table.TransformColumns(Source_Rules, { \"TextContent\", ( text ) => Text.BeforeDelimiter(text, Text.Upper(KeyWords[FeederRef])) }),",
          "    RelatedObjects = Table.AddColumn(",
          "                    ExtractRulesOnly",
          "                    , \"RelatedObjects\"",
          "                    , each fn_extractFunctionEntries(Text.From([TextContent]), KeyWords[RuleCubeRef], {0, 1, 1, 1, 1, 2})",
          "    ),",
          "    // remove a circular reference to the same object",
          "    /*RemoveCircularRefs = if Table.RowCount( RelatedObjects ) > 0",
          "                            then Table.FromRecords(Table.TransformRows(RelatedObjects",
          "                                                                        , (r) => Record.TransformFields(r, {\"RelatedObjects\", each List.RemoveItems( _ , { r[Name] } ) })",
          "                                                                        )",
          "                                )",
          "                            else RelatedObjects,                                   ",
          "     */                       ",
          "    // ToDo: Move Check to The Function",
          "    //RowsWithoutErrors = Table.SelectRows(RemoveCircularRefs, each try Text.Length(Text.Combine([RelatedObjects])) >= 0 otherwise false),",
          "\t",
          "    MaxTreeDepth = fn_calcMaxTreeDepth(RelatedObjects[RelatedObjects]),",
          "    ResultTable = xDel_fn_createHierarchyPath_ByList(RelatedObjects[[Name], [RelatedObjects]], \"Name\", \"RelatedObjects\", SysName[CubeTreeNodeName], MaxTreeDepth)",
          "in",
          "    ResultTable"
        ],
        "kind": "m",
        "lineageTag": "8eb89c45-e520-4d3e-9d1f-129145ee65fb",
        "queryGroup": "Data\\UserData"
      },
      {
        "name": "xDel_RESTs",
        "annotations": [
          {
            "name": "PBI_NavigationStepName",
            "value": "Navigation"
          },
          {
            "name": "PBI_ResultType",
            "value": "List"
          }
        ],
        "expression": [
          "let",
          "    // MDX = \"{ \"\"MDX\"\":\"\"SELECT { [}Clients].MEMBERS * [}Groups].MEMBERS } ON COLUMNS FROM [}ClientGroups]  \"\"}\",",
          "   //MDX = \"{ \"\"MDX\"\":\"\"SELECT { [Номенклатура].MEMBERS * [П_Параметры_номенклатуры].MEMBERS } ON COLUMNS FROM [Параметры_номенклатуры]  \"\"}\",",
          "   //  MDX = \"{ \"\"MDX\"\":\"\"SELECT { [Products].MEMBERS } * { [P_Products].MEMBERS } ON COLUMNS FROM [Products]  \"\"}\",",
          "    MDX = null,",
          "   // URL = \"https://localhost:8881/api/v1/Dimensions?$select=Name&$expand=Hierarchies($select=Name,ElementAttributes;$expand=ElementAttributes($select=*))\",",
          "// Request = \"https://localhost:8886/api/v1/Users\",",
          "   // URL = \"https://localhost:8881/api/v1/ExecuteMDX?$expand=Axes($expand=Hierarchies/$ref,Tuples($expand=Members/$ref)),Cells\",",
          "   // URL = \"https://localhost:7005/api/v1/ExecuteMDX?ExecuteMDX?$expand=Axes($expand=Hierarchies($select=UniqueName),Tuples($expand=Members($select=Name,Attributes/Description))),Cells($select=Ordinal,Value,FormattedValue,RuleDerived,Consolidated,Updateable)\",",
          "   //URL = \"https://localhost:8881/api/v1/Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=*;$expand=Edges($select=*)))\",",
          "   // URL = \"http://localhost:8881/api/v1/Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=Name,Type,Level,Index,Attributes/Caption,Attributes/BusinessUnit_English,Attributes/BusinessUnit_Russian))\",",
          "   // URL = \"https://localhost:8881/api/v1/Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=Name,Type,Level,Index,Attributes))\",",
          "    //URL = \"https://localhost:8881/api/v1/Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=*))\",",
          "    Request = \"https://localhost:8886/api/v1/\",",
          "   // RequestTail = \"Dimensions?$select=Name&$expand=Hierarchies($select=Name,Elements;$expand=Elements($select=Name,Type,Level,Index,Attributes,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name,Parents;$expand=Parents($select=Name))))))))))))\",",
          "    RequestTail = \"Users\",",
          "    Options = [",
          "                Headers = [",
          "                            #\"Authorization\" = \"Basic \" & Binary.ToText(Text.ToBinary(\"admin\" & \":\" & \"apple\"), BinaryEncoding.Base64), ",
          "                            #\"Content-Type\" = \"application/json;charset=utf-8\",",
          "                            #\"Cache-Contol\" = \"private, no-store, no-cache, must-revalidate\"",
          "                ],",
          "                ManualStatusHandling = {400, 401, 403, 404}, ",
          "                RelativePath = RequestTail,",
          "                Content = Text.ToBinary(MDX)",
          "    ],",
          "    ",
          "    SendRequest = Web.Contents(Request, Options),",
          "    MetaData = Value.Metadata(SendRequest),",
          "    SendRequestBinary = Binary.Buffer(SendRequest),",
          "    #\"Imported JSON\" = Json.Document(SendRequestBinary,65001),",
          "    value = #\"Imported JSON\"[value]",
          "in",
          "    value"
        ],
        "kind": "m",
        "lineageTag": "f0b6b459-d328-476a-8935-7af442b3e559"
      }
    ],
    "queryGroups": [
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Settings"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "2"
          }
        ],
        "folder": "Data"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Functions"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Data\\MetaData"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "4"
          }
        ],
        "folder": "SysData"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "2"
          }
        ],
        "folder": "Data\\UserData"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Functions\\Lib"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Data\\Measures"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Settings\\Configuration"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Settings\\Params"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Data\\UserData\\DataFilesLoad"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Data\\UserData\\RESTLoad"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "2"
          }
        ],
        "folder": "Functions\\RulesProcessesHandling"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Functions\\Lib\\BasicEx"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "4"
          }
        ],
        "folder": "Functions\\Utils"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "3"
          }
        ],
        "folder": "Functions\\StatCubesHandling"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "1"
          }
        ],
        "folder": "Functions\\DataExtraction"
      },
      {
        "annotations": [
          {
            "name": "PBI_QueryGroupOrder",
            "value": "0"
          }
        ],
        "folder": "Functions\\RulesProcessesHandling\\Private"
      }
    ],
    "relationships": [
      {
        "name": "81f7ae21-e07f-4496-946a-dd8644e0328c",
        "fromColumn": "TimeStamp",
        "fromTable": "TransactionLog",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_1df1e6a0-dc05-444d-a2e4-554e3cdfc54f"
      },
      {
        "name": "bb66983c-033f-4b32-9249-2501d6096149",
        "fromColumn": "RecordNo",
        "fromTable": "TransactionLogDimensions",
        "toColumn": "RecordNo",
        "toTable": "TransactionLog"
      },
      {
        "name": "272bc34b-063d-4d39-973a-52928e491f87",
        "crossFilteringBehavior": "bothDirections",
        "fromColumn": "Cube",
        "fromTable": "CubeDimensions",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "453860e3-9123-453b-847e-cd892d6b28b3",
        "fromColumn": "Dimension",
        "fromTable": "CubeDimensions",
        "toColumn": "Dimension",
        "toTable": "Dimensions"
      },
      {
        "name": "b5819ff1-f6cc-41be-8d7e-80ce0b8dfd26",
        "crossFilteringBehavior": "bothDirections",
        "fromColumn": "Group",
        "fromTable": "CubeSecurity",
        "toCardinality": "many",
        "toColumn": "InGroup",
        "toTable": "UserGroups"
      },
      {
        "name": "2cd461c1-969e-432c-94d8-eae203407846",
        "fromColumn": "User",
        "fromTable": "UserGroups",
        "toColumn": "User",
        "toTable": "Users"
      },
      {
        "name": "e728d89d-a48e-4515-9644-9f30b5c1c55a",
        "crossFilteringBehavior": "bothDirections",
        "fromColumn": "Dimension",
        "fromTable": "CubeDimensions",
        "toCardinality": "many",
        "toColumn": "Dimension",
        "toTable": "DimensionElements"
      },
      {
        "name": "8993e64f-8b62-4a7f-8c8d-fe2f9c6d0f60",
        "fromColumn": "User",
        "fromTable": "UserStats",
        "toColumn": "User",
        "toTable": "Users"
      },
      {
        "name": "2d774232-0404-4d21-b18b-7d0789af20b2",
        "fromColumn": "Cube",
        "fromTable": "TransactionLog",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "caa0e2ce-d7ad-4bce-ac43-7526d484f117",
        "fromColumn": "ElementKey",
        "fromTable": "ElementAliases",
        "toCardinality": "many",
        "toColumn": "ElementKey",
        "toTable": "DimensionElements"
      },
      {
        "name": "d773b225-5008-4da1-aa15-e4477f6c8a5e",
        "fromColumn": "ElementKey",
        "fromTable": "ElementAliases",
        "isActive": false,
        "toCardinality": "many",
        "toColumn": "ElementKey",
        "toTable": "TransactionLogDimensions"
      },
      {
        "name": "7b75d40c-9ffa-47dc-877c-00cc75b3b5de",
        "crossFilteringBehavior": "bothDirections",
        "fromColumn": "Dimension",
        "fromTable": "DimensionAttributes",
        "securityFilteringBehavior": "bothDirections",
        "toCardinality": "many",
        "toColumn": "Dimension",
        "toTable": "CubeDimensions"
      },
      {
        "name": "0a7dfcf0-a15b-4841-953e-5f4d23dc2543",
        "fromColumn": "LastRefreshDate",
        "fromTable": "SysLastRefresh",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_85cfbfb2-c37d-49e6-bd66-cc7c131b7f6d"
      },
      {
        "name": "c8b110b9-c295-4753-a3c3-697e0dbbaab8",
        "fromColumn": "DateTime",
        "fromTable": "CubeStats",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_62b35232-6337-4bdc-884b-ef3497043f39"
      },
      {
        "name": "aa947d0a-7b40-4551-98ae-03532ce1ecce",
        "fromColumn": "DateTime",
        "fromTable": "UserStats",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_026736a1-5a83-4784-ab3f-ab7eae229ff8"
      },
      {
        "name": "6219d8c6-accf-46f0-9c04-73afa1a0ebc0",
        "fromColumn": "DateTime",
        "fromTable": "ServerStats",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_cebce91d-7993-49a6-bab1-d5ee5f5698e9"
      },
      {
        "name": "9166b81d-0945-4908-b36d-32b4edddb3f3",
        "fromColumn": "CubeLevel_0",
        "fromTable": "Tree:Rules:Source>Target",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "a58ec9c5-0697-4147-99a6-b63b82126f2f",
        "crossFilteringBehavior": "bothDirections",
        "fromColumn": "Cube",
        "fromTable": "CubeProcessesRelation",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "a3998994-e9a6-4be4-9fd1-7221811e0132",
        "fromColumn": "ProcLevel_0",
        "fromTable": "Tree:Processes:Target<Source",
        "toCardinality": "many",
        "toColumn": "Process",
        "toTable": "CubeProcessesRelation"
      },
      {
        "name": "e0bc6d0b-1372-4597-b733-a0684b718af1",
        "crossFilteringBehavior": "bothDirections",
        "fromCardinality": "one",
        "fromColumn": "Cube",
        "fromTable": "Cubes",
        "toColumn": "Rule",
        "toTable": "PerformanceStats"
      },
      {
        "name": "85bcf1f9-b760-4fb2-9d51-62a9e38e8973",
        "fromColumn": "CubeLevel_0",
        "fromTable": "Tree:Feeders:Target<Source",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "29860615-6446-4d89-ad75-14113fb843b0",
        "fromColumn": "TimeStamp",
        "fromTable": "FeedersProcessing",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_45bf4bf2-be77-4a04-96f1-83e5771ea845"
      },
      {
        "name": "385333e0-64a3-4f9d-84e5-6dfd57febca7",
        "fromColumn": "TimeStamp",
        "fromTable": "ModelElapsedTime",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_7d42e85f-721c-45bc-884d-f132081c47a6"
      },
      {
        "name": "ef5d2aac-1652-4075-98d9-491baa68ae19",
        "fromColumn": "Cube",
        "fromTable": "FeedersProcessing",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "3943db31-905f-4caa-9100-1f4f8d76c42c",
        "fromColumn": "Cube",
        "fromTable": "CubeStats",
        "toColumn": "Cube",
        "toTable": "CubesWithOthers"
      },
      {
        "name": "ff82ebf5-cafb-47a2-9821-80c1ac6b98e8",
        "fromColumn": "Cube",
        "fromTable": "FeedersProcessing",
        "toColumn": "Cube",
        "toTable": "CubesWithOthers"
      },
      {
        "name": "2932b729-1523-46ec-b415-9ce8414171d8",
        "fromColumn": "Cube",
        "fromTable": "CubeStats",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "18718c3f-6727-4d3d-a501-77cb8af461f4",
        "fromColumn": "Indicator",
        "fromTable": "CubeStats",
        "toColumn": "Metric",
        "toTable": "MemoryMetrics"
      },
      {
        "name": "5c44ae54-de29-4c9e-b515-bf82e5b8a310",
        "fromColumn": "HoursOffset",
        "fromTable": "CubeStats",
        "toColumn": "HoursOffset",
        "toTable": "MetricsTimeScale"
      },
      {
        "name": "b032fa4c-6f80-4b6a-b475-0380dbf6d5d7",
        "fromColumn": "HoursOffset",
        "fromTable": "ServerStats",
        "toColumn": "HoursOffset",
        "toTable": "MetricsTimeScale"
      },
      {
        "name": "cd323da0-cfb7-45b8-8bea-66ff753d3f0c",
        "fromColumn": "CubeLevel_0",
        "fromTable": "Tree:Rules:Target<Source",
        "toColumn": "Cube",
        "toTable": "Cubes"
      },
      {
        "name": "63cfd62b-5cc6-4330-a9fe-933023c2d019",
        "fromColumn": "RequestStartTime",
        "fromTable": "SysHttpRequestLog",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_0a6d63cb-0bf7-40e4-ba3d-f419d320cfe4"
      },
      {
        "name": "eb2fb744-3288-48ec-a40e-8a09db52752b",
        "fromColumn": "RequestResponseTime",
        "fromTable": "SysHttpRequestLog",
        "joinOnDateBehavior": "datePartOnly",
        "toColumn": "Date",
        "toTable": "LocalDateTable_f035155e-96fa-46b9-872c-c4374c8524dc"
      }
    ],
    "sourceQueryCulture": "ru-RU",
    "tables": [
      {
        "name": "DateTableTemplate_8f415b77-7ec2-46f7-a121-3c125f36f7d4",
        "annotations": [
          {
            "name": "__PBI_TemplateDateTable",
            "value": "true"
          },
          {
            "name": "DefaultItem",
            "value": "DateHierarchy"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "340d4978-d631-4e16-961d-2e7c5b3f1e68",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "d9832da1-5c39-4939-b015-dd63b7818e2a",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "b2ab6981-2314-4696-8249-ba9fc5f02f69",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "56e1a986-a74f-49c4-954e-48a91da32690",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "e7975e10-37e2-4796-8586-467b6a59a2f0",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "7351fe9c-636f-4f7e-b494-43fbde64e642",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "21a2d6ab-d3ab-4259-8074-35bc12d55c8f",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "a963b304-f9d0-443f-bf7d-d9284d5fc13a",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "b603b701-68a4-4a1c-aceb-c6bfad5c58cb",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "d9444181-1707-4ff3-9528-0b54d3cee1e6",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "8dbebb82-a566-46ba-a6bc-a34f8747966c",
                "ordinal": 3
              }
            ],
            "lineageTag": "7714d17a-080c-4b61-87ba-adb49958c32c"
          }
        ],
        "isHidden": true,
        "isPrivate": true,
        "lineageTag": "8d21ac09-c9df-47af-9bd4-615a8d2b9065",
        "partitions": [
          {
            "name": "DateTableTemplate_8f415b77-7ec2-46f7-a121-3c125f36f7d4-204f0d2f-715d-41c6-b5bd-20b05208997c",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(2015,1,1), Date(2015,1,1))",
              "type": "calculated"
            }
          }
        ]
      },
      {
        "name": "Cubes",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "364db336-4346-4535-ac8b-38c5c47d54de",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "86694008-8ea7-4635-b4a9-665b8a41f103",
        "partitions": [
          {
            "name": "Cubes-9d349fba-0619-4ef5-a902-d21ba4dba739",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Cube = text], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_CubeDimensions[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                Table.FromList(List.Distinct(CubeDimensions[Cube]), Splitter.SplitByNothing(), {\"Cube\"}, null, ExtraValues.Ignore)     ",
                "           else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "           then",
                "               Table.Distinct(DataFiles_Cubes)",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Amount measures",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Dummy",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "54d29cd3-93ba-4a1a-a447-9deaa2b89694",
            "sourceColumn": "Dummy",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "95036771-47d6-4515-a3bb-6cc590c5d13d",
        "measures": [
          {
            "name": "Cubes: Target<Source",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Target<Source",
            "expression": [
              "",
              "    VAR ItrLevel = [HierarchyBrowseDepth]",
              "    VAR LevelItem = PATHITEM(MAX('Tree:Rules:Target<Source'[HierarchyPath]), ItrLevel)",
              "    VAR LevelPathCount = COUNTROWS(FILTER(ALL('Tree:Rules:Target<Source'), LEFT('Tree:Rules:Target<Source'[HierarchyPath], LEN(MIN('Tree:Rules:Target<Source'[HierarchyPath]))) = MIN('Tree:Rules:Target<Source'[HierarchyPath]) ))",
              "",
              "    VAR NextLevelCount = ",
              "        SWITCH( ItrLevel",
              "                , 1, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_1])",
              "                , 2, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_2])",
              "                , 3, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_3])",
              "                , 4, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_4])",
              "                , 5, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_5])",
              "                , 6, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_6])",
              "                , 7, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_7])",
              "                , 8, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_8])",
              "                , 9, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_9])",
              "                , 10, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_10])",
              "                , 11, 0",
              "        ) + 0",
              "",
              "    VAR Result = CALCULATE( NextLevelCount, FILTER('Tree:Rules:Target<Source', PATHITEM('Tree:Rules:Target<Source'[HierarchyPath], ItrLevel) = LevelItem ))",
              "",
              "    VAR SupressBlanks = [HierarchyBrowseDepth] = 0 || LevelPathCount > 1 || [Cubes: Target<Source: Max Path Length] < -1",
              "    RETURN",
              "            IF  (SupressBlanks, BLANK(), Result)"
            ],
            "formatString": "0",
            "lineageTag": "686cbd1a-3f90-4a85-beff-39f852d5ab36"
          },
          {
            "name": "Cubes < Proс Target < Proc Source",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Maps\\Tree:Processes:Target<Source",
            "expression": [
              "",
              "    VAR ItrLevel = [HierarchyBrowseDepth]",
              "    VAR LevelItem = ",
              "        SWITCH( ItrLevel",
              "\t\t, 1, SELECTEDVALUE( CubeProcessesRelation[Cube] )",
              "                , 2, SELECTEDVALUE( CubeProcessesRelation[Process] )",
              "                //, 2, SELECTEDVALUE('ProcessTree_TargetToSource'[ProcLevel_0])",
              "                , 3, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_1])",
              "                , 4, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_2])",
              "                , 5, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_3])",
              "                , 6, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_4])",
              "                , 7, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_5])",
              "                , 8, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_6])",
              "                , 9, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_7])",
              "                , 10, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_8])",
              "                , 11, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_9])",
              "                , 12, SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_10])",
              "        ) ",
              "",
              "    VAR NextLevelCount = ",
              "        SWITCH( ItrLevel",
              "                , 1, SELECTEDVALUE( CubeProcessesRelation[Process] )",
              "\t        //, 1, DISTINCTCOUNTNOBLANK('ProcessTree_TargetToSource'[ProcLevel_0])",
              "                , 2, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_1]) ",
              "                , 3, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_2])",
              "                , 4, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_3])",
              "                , 5, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_4])",
              "                , 6, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_5])",
              "                , 7, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_6])",
              "                , 8, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_7])",
              "                , 9, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_8])",
              "                , 10, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_9])",
              "                , 11, DISTINCTCOUNTNOBLANK('Tree:Processes:Target<Source'[ProcLevel_10])",
              "                , 12, 0",
              "        ) + 0",
              "",
              "    VAR Result = ",
              "            IF (ItrLevel > 1",
              "            , CALCULATE( NextLevelCount, FILTER('Tree:Processes:Target<Source', PATHITEM('Tree:Processes:Target<Source'[HierarchyPath], ItrLevel) = LevelItem ))",
              "            , CALCULATE( DISTINCTCOUNTNOBLANK (CubeProcessesRelation[Process])) + 0",
              "            )",
              "",
              "    RETURN",
              "            IF (ISBLANK(LevelItem), BLANK(), Result)"
            ],
            "formatString": "0",
            "lineageTag": "c723ccec-8be3-4354-8e1c-f5252c3cbc6b"
          },
          {
            "name": "Elements in Hierarchy",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    IF(",
              "         [IsHierarchySelected]",
              "        , COUNTROWS('DimensionElements') ",
              "        , IF ( ",
              "                [IsDimensionSelected]",
              "                , COUNTX(FILTER('DimensionElements', 'DimensionElements'[Hierarchy] = SELECTEDVALUE(DimensionElements[Dimension])), DimensionElements[Hierarchy])",
              "                , 0",
              "        )",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "dc3f3553-9545-4c34-8258-a0b3fec729b7"
          },
          {
            "name": "Cubes",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Result = COUNTROWS(DISTINCT(ALL(Cubes[Cube])))",
              "    RETURN",
              "        IF (ISBLANK(Result), 0, Result)"
            ],
            "formatString": "0",
            "lineageTag": "ba0144fe-d627-4968-8099-f179b4bf9042"
          },
          {
            "name": "Dimensions in Cube",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    IF( [IsCubeSelected], COUNTROWS(ALLSELECTED('CubeDimensions')), 0)",
              ""
            ],
            "formatString": "0",
            "lineageTag": "5b98cc63-68d7-483e-a18e-42f6c0e416d5"
          },
          {
            "name": "Cells in Cube",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR ShortAmount = ",
              "        SWITCH (",
              "            TRUE (),",
              "            [Cells] >= 1000000000000, CONCATENATE ( ROUND( [Cells] / 1000000000000, 0 ), \" T\" ),",
              "            [Cells] >= 1000000000, CONCATENATE ( ROUND( [Cells] / 1000000000, 0 ), \" bn\" ),",
              "            [Cells] >= 1000000, CONCATENATE ( ROUND( [Cells] / 1000000, 0 ), \" M\" ),",
              "            [Cells] >= 1000, CONCATENATE ( ROUND( [Cells] / 1000, 0 ), \" K\" ),",
              "            [Cells] < 1000, [Cells]",
              "        )",
              "",
              "    RETURN",
              "        IF (ISBLANK(ShortAmount), \"0\", ShortAmount)"
            ],
            "lineageTag": "08fea48d-064c-4536-8569-cd81c9f00762"
          },
          {
            "name": "HierarchyBrowseDepth",
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "displayFolder": "Maps",
            "expression": [
              "",
              "//Only one area is in scope",
              "",
              "// Rules: Target < Source",
              "  ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_0] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_1] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_2] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_3] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_4] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_5] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_6] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_7] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_8] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_9] )",
              "+ ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_10] )",
              "",
              "// Rules: Source > Targe",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_0] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_1] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_2] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_3] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_4] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_5] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_6] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_7] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_8] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_9] )",
              "+ ISFILTERED ( 'Tree:Rules:Source>Target'[CubeLevel_10] )",
              "        ",
              "        // Feeders: Target < Source",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_0] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_1] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_2] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_3] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_4] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_5] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_6] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_7] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_8] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_9] )",
              "+ ISFILTERED ( 'Tree:Feeders:Target<Source'[CubeLevel_10] )",
              "",
              "// Cubes < Proс Target < Proc Source]",
              "+ ISFILTERED ( CubeProcessesRelation[Cube] )",
              "+ ISFILTERED ( CubeProcessesRelation[Process] )",
              "//+ ISFILTERED ( ProcessTree_TargetToSource[ProcLevel_0] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_1] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_2] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_3] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_4] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_5] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_6] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_7] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_8] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_9] )",
              "+ ISFILTERED ( 'Tree:Processes:Target<Source'[ProcLevel_10] )",
              ""
            ],
            "formatString": "0",
            "lineageTag": "b132df2e-5506-4aed-ad74-7f0aea85ec80"
          },
          {
            "name": "TopN Cubes: Size in memory",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    // get the cubes for which we want to calculate TopN + Others ",
              "    VAR CubesAll = SELECTCOLUMNS(ALL(CubesWithOthers), \"RankCube\", CubesWithOthers[Cube])  ",
              "    // add a measure that we use for ranking",
              "    VAR CubesWithValue = ADDCOLUMNS( CubesAll, \"RankMeasure\", CALCULATE([Cube Memory], ALL(Cubes)) )",
              "    // add a column with the rank of the measure within the cubes ",
              "    VAR CubesWithRank = ADDCOLUMNS(CubesWithValue, \"Rank\", RANKX(CubesWithValue, [RankMeasure], [RankMeasure], DESC, Dense)) ",
              "    // calculate whether the Cube is a Top-item or belongs to Others ",
              "    VAR CubesWithTop = ADDCOLUMNS(CubesWithRank, \"TopOrOthers\", IF([Rank] <= MAX('CubesTopN'[Number]), [RankCube], [cOthers]))",
              "    // select the final items for which the value is calculated ",
              "    VAR CubesFinal = SELECTCOLUMNS( // we only select a single column to be used with TREATAS() in the final filter",
              "        FILTER(",
              "            CubesWithTop, ",
              "            CONTAINSROW(VALUES(CubesWithOthers[Cube]), [TopOrOthers]) // need to obey current filters on _wOthers table. e.g. after Drill-Down",
              "            && CONTAINSROW(VALUES(Cubes[Cube]), [RankCube]) // need to obey current filters on base table",
              "        ) ",
              "        , \"TopN_Others\"",
              "        , [RankCube]",
              "    ) ",
              "    RETURN      ",
              "    CALCULATE(",
              "        [Cube Memory], ",
              "        TREATAS(CubesFinal, CubesWithOthers[Cube])",
              "    )"
            ],
            "formatString": "0",
            "lineageTag": "e9ac555d-78cd-4621-9248-bc68924c4d42"
          },
          {
            "name": "_tm1",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "expression": [
              "",
              "   // VAR LevelPath = CALCULATE(COUNTROWS('Tree:Rules:Target<Source'), CONTAINSSTRING('Tree:Rules:Target<Source'[HierarchyPath],  MIN('Tree:Rules:Target<Source'[HierarchyPath])) )",
              "    VAR LevelPath = COUNTROWS(FILTER(ALL('Tree:Rules:Target<Source'), LEFT('Tree:Rules:Target<Source'[HierarchyPath], LEN(MIN('Tree:Rules:Target<Source'[HierarchyPath]))) = MIN('Tree:Rules:Target<Source'[HierarchyPath]) ))",
              "    RETURN",
              "            LevelPath"
            ],
            "lineageTag": "2bafc003-6a13-4f47-98d6-8aa803310907"
          },
          {
            "name": "_tm2",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "expression": [
              "//original measure",
              "    VAR ItrLevel = [HierarchyBrowseDepth]",
              "    VAR LevelPath = COUNTROWS(FILTER(ALL('Tree:Rules:Target<Source'), LEFT('Tree:Rules:Target<Source'[HierarchyPath], LEN(MIN('Tree:Rules:Target<Source'[HierarchyPath]))) = MIN('Tree:Rules:Target<Source'[HierarchyPath]) ))",
              "    VAR LevelItem = PATHITEM(MIN('Tree:Rules:Target<Source'[HierarchyPath]), ItrLevel)",
              "       ",
              "",
              "    VAR NextLevelCount = ",
              "        SWITCH( ItrLevel",
              "                , 1, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_1])",
              "                , 2, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_2])",
              "                , 3, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_3])",
              "                , 4, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_4])",
              "                , 5, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_5])",
              "                , 6, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_6])",
              "                , 7, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_7])",
              "                , 8, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_8])",
              "                , 9, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_9])",
              "                , 10, DISTINCTCOUNTNOBLANK('Tree:Rules:Target<Source'[CubeLevel_10])",
              "                , 11, 0",
              "        ) + 0",
              "",
              "    VAR Result = ",
              "            CALCULATE( NextLevelCount, FILTER('Tree:Rules:Target<Source', PATHITEM('Tree:Rules:Target<Source'[HierarchyPath], ItrLevel) = LevelItem ))",
              "",
              "    VAR SupressBlanks =  [Cubes: Target<Source: Max Path Length] < -1",
              "    RETURN",
              "            IF  ( [HierarchyBrowseDepth] = 0, BLANK(), Result)"
            ],
            "lineageTag": "585ac27b-bc9e-445d-8c4e-98301dc271e4"
          },
          {
            "name": "Cube Memory",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    CALCULATE( SUM( 'CubeStats'[Value] ) / (1024 * 1024) ",
              "                , TREATAS({ \"Total Memory Used\", \"Memory Used for Views\", \"Memory Used for Calculations\", \"Memory Used for Feeders\", \"Memory Used for Input Data\" }, 'CubeStats'[Indicator] )",
              "                , FILTER('CubeStats', 'CubeStats'[DateTime] = MAX('CubeStats'[DateTime]))",
              "    )",
              ""
            ],
            "lineageTag": "97c5120d-5cb8-4535-a31c-ca57a12edef6"
          },
          {
            "name": "DimHierarchyMaxDepth",
            "displayFolder": "Cube Info",
            "expression": "MAX('DimensionElements'[HierarchyDepth])",
            "isHidden": true,
            "lineageTag": "c213dc92-25f6-4cad-ac8e-a76a2dc9acba"
          },
          {
            "name": "Element Level",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    IF(",
              "        [DimHierarchyBrowseDepth] > [DimHierarchyMaxDepth],",
              "        BLANK(),",
              "        MAX('DimensionElements'[ElementLevel])",
              "    )"
            ],
            "lineageTag": "4cc4cb0a-306f-4720-a0b7-8e11c750b19c"
          },
          {
            "name": "Element Index",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    IF(",
              "        [DimHierarchyBrowseDepth] > [DimHierarchyMaxDepth],",
              "        BLANK(),",
              "        CALCULATE(SELECTEDVALUE('DimensionElements'[ElementIndex]), FILTER('DimensionElements', 'DimensionElements'[HierarchyDepth] = MIN('DimensionElements'[HierarchyDepth])))",
              "    )"
            ],
            "lineageTag": "7a8f9047-ecbf-4a15-999f-666070456813"
          },
          {
            "name": "DimHierarchyBrowseDepth",
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "      ISINSCOPE( 'DimensionElements'[Element_0] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_1] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_2] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_3] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_4] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_5] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_6] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_7] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_8] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_9] )",
              "    + ISINSCOPE( 'DimensionElements'[Element_10] )"
            ],
            "isHidden": true,
            "lineageTag": "b45e5eb5-4365-40c9-8636-ac63ab683e76"
          },
          {
            "name": "Total Users",
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    VAR TotalUsers = COUNTROWS(DISTINCT(ALL('Users'[User])))",
              "    RETURN",
              "        IF (ISBLANK(TotalUsers), 0, TotalUsers)",
              ""
            ],
            "lineageTag": "2f5b54cf-3100-43c6-927c-1aa0f37dfb67"
          },
          {
            "name": "Current Active Users",
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    VAR CurrentActiveUsers = COUNTROWS(FILTER(ALL('Users'), 'Users'[IsUserActive]))",
              "/*",
              "    VAR LastHourActiveUsers = ",
              "        CALCULATE(    DISTINCTCOUNT('UserStats'[User])",
              "                    , FILTER('UserStats', 'UserStats'[DateTime] = MAX('UserStats'[DateTime]))",
              "                    , FILTER('UserStats', [MessageCount] > 0)",
              "        )",
              "*/",
              "RETURN",
              "    IF(ISBLANK(CurrentActiveUsers), 0, CurrentActiveUsers)"
            ],
            "formatString": "0",
            "lineageTag": "9aa73b61-6e01-4077-b18c-a9a4b51ed612"
          },
          {
            "name": "Max Active Users",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    // get unique list of the DateTimes",
              "    VAR DateTimes = SELECTCOLUMNS(ALL(UserStats), \"DateTime\", UserStats[DateTime]) ",
              "    // add a count of unique users for each DateTime period",
              "    VAR UsersCount = ADDCOLUMNS( DateTimes, \"UserCount\", [Active Users] )",
              "    // calculate maximum number of users at the same DateTime period",
              "    VAR MaxActiveUsers = MAXX(UsersCount, [UserCount])",
              "RETURN",
              "    IF(ISBLANK(MaxActiveUsers), [Current Active Users], MaxActiveUsers)"
            ],
            "formatString": "0",
            "lineageTag": "d752a514-d47e-46f4-901b-40baa873941c"
          },
          {
            "name": "MessageCount",
            "displayFolder": "User Stats",
            "expression": "CALCULATE(SUM('UserStats'[Value]), FILTER('UserStats', 'UserStats'[Indicator] = \"Message Count\"))",
            "lineageTag": "959d39dd-556c-4ed8-a33a-5208fc1e964c"
          },
          {
            "name": "User Queries Intensity",
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    // get unique list of the DateTimes",
              "    VAR DateTimes = SELECTCOLUMNS(ALL(UserStats), \"DateTime\", UserStats[DateTime]) ",
              "    // add a count of unique users for each DateTime period",
              "    VAR UsersCount = ADDCOLUMNS( DateTimes, ",
              "                                \"MessageCount\", ",
              "                                CALCULATE([MessageCount], REMOVEFILTERS(UserStats[User]), REMOVEFILTERS(Users) )",
              "    )",
              "    // calculate maximum messages quantity at the same DateTime period",
              "    VAR MaxIntensiry =  MAXX(UsersCount, [MessageCount])",
              "",
              "RETURN",
              "    DIVIDE([MessageCount], MaxIntensiry, 0)"
            ],
            "formatString": "0%;-0%;0%",
            "lineageTag": "87a789b9-54b9-4e2d-bb1f-75e9c26adc53"
          },
          {
            "name": "Active Users",
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    VAR ActiveUsers = CALCULATE(    DISTINCTCOUNT('UserStats'[User])",
              "                                    , FILTER('UserStats', 'UserStats'[Indicator] = \"Message Count\")",
              "                                    , FILTER('UserStats', [MessageCount] > 0)",
              "    )",
              "RETURN",
              "    IF(ISBLANK(ActiveUsers), 0, ActiveUsers)"
            ],
            "lineageTag": "27e5ee35-4e60-4c65-8112-3537022b50d7"
          },
          {
            "name": "Last Activity",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isCustom\":true}"
              }
            ],
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    VAR LastActivityTime = MAXX(FILTER(UserStats, [Active Users] > 0), 'UserStats'[DateTime])",
              "    RETURN",
              "        IF(ISBLANK(LastActivityTime), \"\", FORMAT(LastActivityTime, \"dd.mm.yyyy hh:nn\"))"
            ],
            "formatString": "dd.mm.yyyy hh:nn",
            "lineageTag": "31392ee8-62f9-410c-94a8-fdefcb4e424e"
          },
          {
            "name": "HierarchyMaxDepth",
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "displayFolder": "Maps",
            "expression": [
              "",
              "    SWITCH( SELECTEDMEASURENAME() ",
              "        , [Cubes: Target<Source], MAX('Tree:Rules:Target<Source'[PathLength])",
              "        , [Cubes: Source>Target], MAX('Tree:Rules:Source>Target'[PathLength])",
              "        , [Feeders: Target < Source], MAX('Tree:Feeders:Target<Source'[PathLength])",
              "        , [Cubes < Proс Target < Proc Source], MAX('Tree:Processes:Target<Source'[PathLength])",
              "    )"
            ],
            "lineageTag": "11f9243b-c0cc-4a0b-85f6-8f9ef62e3404"
          },
          {
            "name": "Element Alias",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    IF(",
              "        NOT [IsDimensionElementsFiltered] || [DimHierarchyBrowseDepth] > [DimHierarchyMaxDepth]",
              "        , BLANK()",
              "        , CALCULATE(                ",
              "            //    CALCULATE( COUNTA('ElementAliases'[ElementAlias]), REMOVEFILTERS('DimensionElements') ) ",
              "              SELECTEDVALUE('ElementAliases'[Element], \" \")",
              "            , FILTER('DimensionElements', 'DimensionElements'[HierarchyDepth] = MIN('DimensionElements'[HierarchyDepth]))",
              "        )",
              "    )"
            ],
            "lineageTag": "997f2cb1-9a87-47e5-a417-4697a4fb0861"
          },
          {
            "name": "Hierarchy Depth",
            "displayFolder": "Cube Info",
            "expression": "IF([IsDimensionSelected] || [IsHierarchySelected], MAX('DimensionElements'[ElementLevel]), 0)",
            "formatString": "0",
            "lineageTag": "d2858980-e0fd-4d32-b8a7-6b2feced9e59"
          },
          {
            "name": "Tr Element Alias",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Transaction Log",
            "expression": [
              "",
              "        IF( [IsTransactionLogRowSelected]   ",
              "            , VAR SelectedElementALias = CALCULATE( MIN('ElementAliases'[ElementAlias]), USERELATIONSHIP('TransactionLogDimensions'[ElementKey], 'ElementAliases'[ElementKey]))",
              "            RETURN",
              "               IF ( ISBLANK(SelectedElementAlias), SELECTEDVALUE('TransactionLogDimensions'[Element]), SelectedElementAlias )",
              "            , BLANK()",
              "        )"
            ],
            "lineageTag": "c1693a3e-c6f9-4e72-8362-1e41de2f7aee"
          },
          {
            "name": "Cubes by user",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Security",
            "expression": [
              "",
              "    IF ( SELECTEDMEASURENAME() = [Selected Security Item] ",
              "    , DISTINCTCOUNTNOBLANK( CubeSecurity[Cube] )",
              "    , BLANK()",
              "    )"
            ],
            "lineageTag": "20ea2a37-b5a9-4ef6-a8a2-ff6d63443f1a"
          },
          {
            "name": "Rules",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Result = COUNTROWS(DISTINCT(ALL('Tree:Rules:Target<Source'[CubeLevel_0])))",
              "    RETURN",
              "        IF (ISBLANK(Result), 0, Result)"
            ],
            "lineageTag": "f6919536-766f-4827-a3c6-1c0f01c1ab60"
          },
          {
            "name": "Processes",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Result = COUNTROWS(DISTINCT(ALL(CubeProcessesRelation[Process])))",
              "    RETURN",
              "        IF (ISBLANK(Result), 0, Result)"
            ],
            "lineageTag": "af624e04-985e-4766-a572-2761b847243d"
          },
          {
            "name": "_tm3",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "expression": [
              "",
              "           MAX('Tree:Rules:Target<Source'[HierarchyPath]) & \" ** \"& MIN('Tree:Rules:Target<Source'[HierarchyPath])"
            ],
            "lineageTag": "f92ded05-df6d-4755-b614-edadbc0c0e3d"
          },
          {
            "name": "IsCubeSelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "       NOT ISBLANK(SELECTEDVALUE('Cubes'[Cube]))",
              "    || NOT ISBLANK(SELECTEDVALUE('CubeDimensions'[Cube]))",
              "    || NOT ISBLANK(SELECTEDVALUE('CubeProcessesRelation'[Cube]))"
            ],
            "lineageTag": "a25d1ff7-91db-492b-90ce-4034d45a899a"
          },
          {
            "name": "Users by cube",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Security",
            "expression": [
              "",
              "    IF ( SELECTEDMEASURENAME() = [Selected Security Item] ",
              "    , DISTINCTCOUNTNOBLANK( UserGroups[User] )",
              "    , BLANK()",
              "    )"
            ],
            "lineageTag": "0b284c0f-cd6c-48a9-842a-d0d22389c858"
          },
          {
            "name": "IsDimensionSelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "       NOT ISBLANK(SELECTEDVALUE('CubeDimensions'[Dimension]))",
              "    || NOT ISBLANK(SELECTEDVALUE('DimensionElements'[Dimension]))"
            ],
            "lineageTag": "db0f41c1-f023-4e89-a73f-c7d587b20290"
          },
          {
            "name": "IsHierarchySelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "    NOT ISBLANK(SELECTEDVALUE('DimensionElements'[Hierarchy]))"
            ],
            "lineageTag": "9d4aca0e-3d11-499a-9c13-ce9d1e87d4b3"
          },
          {
            "name": "Populated Cells in Cube",
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    VAR Amount = IF( [IsCubeSelected], [Populated Cells], 0 )",
              "    ",
              "    VAR ShortAmount = ",
              "        SWITCH (",
              "            TRUE (),",
              "            Amount >= 1000000000000, CONCATENATE ( ROUND( Amount / 1000000000000, 0 ), \" T\" ),",
              "            Amount >= 1000000000, CONCATENATE ( ROUND( Amount / 1000000000, 0 ), \" bn\" ),",
              "            Amount >= 1000000, CONCATENATE ( ROUND( Amount / 1000000, 0 ), \" M\" ),",
              "            Amount >= 1000, CONCATENATE ( ROUND( Amount / 1000, 0 ), \" K\" ),",
              "            Amount < 1000, Amount",
              "        )",
              "",
              "    RETURN",
              "        IF (ISBLANK(ShortAmount), 0, ShortAmount)"
            ],
            "formatString": "0",
            "lineageTag": "fc4e6a5d-3e73-496a-a3cb-2960f1182e66"
          },
          {
            "name": "Selected Security Item",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Security",
            "expression": "SELECTEDVALUE( 'SecurityToggle'[Name] )",
            "lineageTag": "127a5c53-9284-4af4-aa3c-10a0bb807f6f"
          },
          {
            "name": "IsCubeSecuritySelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "       NOT ISBLANK(SELECTEDVALUE('CubeSecurity'[Cube]))"
            ],
            "lineageTag": "0c66f807-e095-4f26-81cd-3e400474129f"
          },
          {
            "name": "IsUserSelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "       NOT ISBLANK(SELECTEDVALUE('Users'[User]))",
              "    || NOT ISBLANK(SELECTEDVALUE('Users'[UserName]))"
            ],
            "lineageTag": "34b9b574-2588-4b4d-8b91-4b916b464518"
          },
          {
            "name": "Access Level",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Security",
            "expression": [
              "",
              "    IF ( ([Cubes by user] > 0 && ISINSCOPE(CubeSecurity[Cube])) || ([Users by cube] > 0 && ISINSCOPE(Users[UserName] )) ",
              "        , IF ( COUNTAX(FILTER('CubeSecurity', CubeSecurity[AccessLevel] = \"WRITE\" || CubeSecurity[AccessLevel] = \"ADMIN\"), CubeSecurity[AccessLevel]) > 0",
              "                , 2",
              "                , IF ( COUNTAX(FILTER(CubeSecurity, CubeSecurity[AccessLevel] = \"READ\"), CubeSecurity[AccessLevel]) > 0",
              "                    , 1",
              "                )",
              "        )",
              "    )"
            ],
            "lineageTag": "0efb7dde-5a78-4026-b247-4a368af771c2"
          },
          {
            "name": "New Value",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Transaction Log",
            "expression": "SELECTEDVALUE('TransactionLog'[NewValue])",
            "lineageTag": "fdd00684-6fc9-4f3b-8ff4-5780e4c86eb8"
          },
          {
            "name": "Old Value",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Transaction Log",
            "expression": "SELECTEDVALUE('TransactionLog'[OldValue])",
            "lineageTag": "500d940a-1f29-4a20-b29b-f6af8e41a06a"
          },
          {
            "name": "IsTransactionLogRowSelected",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "    NOT ISBLANK(SELECTEDVALUE(TransactionLog[TimeStamp]))"
            ],
            "lineageTag": "9f85fc5a-6acc-427b-80e9-483c30087256"
          },
          {
            "name": "Security Groups",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Security",
            "expression": [
              "",
              "    VAR SecurityGroups = DISTINCTCOUNT(UserGroups[GroupName])",
              "    RETURN",
              "        IF(ISBLANK(SecurityGroups), 0, SecurityGroups)"
            ],
            "lineageTag": "731cde0c-84ed-417e-a619-08a5bdb28252"
          },
          {
            "name": "Model Memory",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Server Stats",
            "expression": [
              "",
              "    CALCULATE( SUM( 'ServerStats'[Value] ) / (1024 * 1024) ",
              "                , TREATAS({ \"Memory Used\", \"Memory in Garbage\" }, 'ServerStats'[Indicator] )",
              "                , FILTER('ServerStats', 'ServerStats'[DateTime] = MAX('ServerStats'[DateTime]))",
              "    )"
            ],
            "lineageTag": "4ccfee34-2a6b-46dc-b588-bd9da9bbda8d"
          },
          {
            "name": "Model Numbers",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Server Stats",
            "expression": [
              "",
              "    CALCULATE( SUM( 'ServerStats'[Value] )",
              "                , TREATAS({ \"Number of Active Threads\", \"Number of Connected Clients\" }, 'ServerStats'[Indicator] )",
              "                , FILTER('ServerStats', 'ServerStats'[DateTime] = MAX('ServerStats'[DateTime]))",
              "    )"
            ],
            "lineageTag": "86fc3f1b-03dc-4f7f-a725-1e33952e2493"
          },
          {
            "name": "Cubes: Source>Target",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Source>Target",
            "expression": [
              "",
              "    VAR ItrLevel = [HierarchyBrowseDepth]",
              "    VAR LevelItem = PATHITEM(MAX('Tree:Rules:Source>Target'[HierarchyPath]), ItrLevel)",
              "    VAR LevelPathCount = COUNTROWS(FILTER(ALL('Tree:Rules:Source>Target'), LEFT('Tree:Rules:Source>Target'[HierarchyPath], LEN(MIN('Tree:Rules:Source>Target'[HierarchyPath]))) = MIN('Tree:Rules:Source>Target'[HierarchyPath]) ))",
              "",
              "    VAR NextLevelCount = ",
              "        SWITCH( ItrLevel",
              "                , 1, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_1])",
              "                , 2, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_2])",
              "                , 3, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_3])",
              "                , 4, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_4])",
              "                , 5, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_5])",
              "                , 6, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_6])",
              "                , 7, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_7])",
              "                , 8, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_8])",
              "                , 9, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_9])",
              "                , 10, DISTINCTCOUNTNOBLANK('Tree:Rules:Source>Target'[CubeLevel_10])",
              "                , 11, 0",
              "        ) + 0",
              "",
              "    VAR Result = ",
              "            CALCULATE( NextLevelCount, FILTER('Tree:Rules:Source>Target', PATHITEM('Tree:Rules:Source>Target'[HierarchyPath], ItrLevel) = LevelItem ))",
              "",
              "    VAR SupressBlanks = [HierarchyBrowseDepth] = 0 || LevelPathCount > 1 || [Cubes: Source>Target: Max Path Length] < -1",
              "    RETURN",
              "            IF  (SupressBlanks, BLANK(), Result)"
            ],
            "lineageTag": "a8d09724-a458-4e9e-b536-a8c682078bb0"
          },
          {
            "name": "ProcessLevelFormatting",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "displayFolder": "Maps",
            "expression": [
              "",
              "        IF (",
              "                NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_0]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_1]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_2]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_3]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_4]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_5]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_6]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_7]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_8]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_9]))",
              "                || NOT ISBLANK(SELECTEDVALUE('Tree:Processes:Target<Source'[ProcLevel_10]))",
              "        , 1, 2)"
            ],
            "isHidden": true,
            "lineageTag": "5bc9ab50-0a18-4a27-b1d9-6e7268609a6b"
          },
          {
            "name": "IsDimensionElementsFiltered",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "        ISFILTERED('DimensionElements'[Dimension])"
            ],
            "lineageTag": "96835932-80bc-48d7-8824-9e0248b9a2d2"
          },
          {
            "name": "Skipcheck",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = SELECTEDVALUE('PerformanceStats'[SKIPCHECK])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", VAR _status = IF(_value , 0, 3) RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )"
            ],
            "lineageTag": "4ed385fe-b139-486e-8ddf-3d0b193568ca"
          },
          {
            "name": "Feeders",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = SELECTEDVALUE('PerformanceStats'[FEEDERS])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", VAR _status = IF(_value , 0, 3) RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )"
            ],
            "lineageTag": "993d488b-4c94-492a-9e7e-df3f5ba1ee8b"
          },
          {
            "name": "Nested IFs",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = SELECTEDVALUE('PerformanceStats'[Nested IFs])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", ",
              "                    VAR _ratio = DIVIDE(_value, SELECTEDVALUE('PerformanceStats'[IFs]), 0)",
              "                        VAR _status = ",
              "                            SWITCH(",
              "                                TRUE()",
              "                                , _ratio > 0.5, 2",
              "                                , _ratio > 0, 1",
              "                                , 3",
              "                            )",
              "                    RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )"
            ],
            "formatString": "0",
            "lineageTag": "da71ac31-733e-43f8-a738-0e8061f63320"
          },
          {
            "name": "Сondit. Feeders",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = SELECTEDVALUE('PerformanceStats'[Сonditional Feeders])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", VAR _status = IF(_value = 0, 3, 1) RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )"
            ],
            "formatString": "0",
            "lineageTag": "1f2a2e74-c10d-4b6e-892b-ae1f29bd4059"
          },
          {
            "name": "Populated Cells",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    CALCULATE( SUM( 'CubeStats'[Value] )",
              "                        , TREATAS({ \"Number of Populated String Cells\", \"Number of Populated Numeric Cells\" }, 'CubeStats'[Indicator] )",
              "                        , FILTER('CubeStats', 'CubeStats'[DateTime] = MAX('CubeStats'[DateTime]))",
              "            )"
            ],
            "lineageTag": "16b71215-df93-48e3-8803-b198fc29c1c6"
          },
          {
            "name": "Fed Cells",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    CALCULATE( SUM( 'CubeStats'[Value] )",
              "                        , TREATAS({ \"Number of Fed Cells\" }, 'CubeStats'[Indicator] )",
              "                        , FILTER('CubeStats', 'CubeStats'[DateTime] = MAX('CubeStats'[DateTime]))",
              "            )"
            ],
            "lineageTag": "4a1cad06-dad9-4d06-a5d2-d9ec1371f7b9"
          },
          {
            "name": "Overfeed",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = IF ([Populated Cells] > 0, DIVIDE([Fed Cells], [Populated Cells], 0), [Fed Cells])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", ",
              "                VAR _status = ",
              "                    SWITCH(",
              "                        TRUE()",
              "                        , _value > 100, 2",
              "                        , _value > 50, 1 ",
              "                        , _value > 0, 0",
              "                        , 3",
              "                    )",
              "                RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )"
            ],
            "formatString": "#,0",
            "lineageTag": "00b85cd6-5003-4f7b-a7b2-1ea63a6dcc68"
          },
          {
            "name": "IFs",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": "IF( [RuleExists], SELECTEDVALUE('PerformanceStats'[IFs]), BLANK() )",
            "lineageTag": "78f9654d-123a-4c43-9dfc-29b21a0fa866"
          },
          {
            "name": "RuleExists",
            "displayFolder": "Selected Metadata",
            "expression": [
              "",
              "    NOT ISBLANK(SELECTEDVALUE('PerformanceStats'[Rule]))"
            ],
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "9ec46188-cfe4-4e8c-944f-32acd382f5e1"
          },
          {
            "name": "Dimensions",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Result = COUNTROWS(DISTINCT(VALUES('Dimensions'[Dimension])))",
              "    RETURN",
              "        IF (ISBLANK(Result), 0, Result)"
            ],
            "lineageTag": "eb479d22-f6e0-40d8-8692-a4eeb0a3d9c7"
          },
          {
            "name": "Dimensionality",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": "IF( [RuleExists], COUNTROWS('CubeDimensions'), BLANK())",
            "lineageTag": "61ca090c-2454-4045-934f-88e283f27b31"
          },
          {
            "name": "Dense",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Denominator = DIVIDE([Cells], [Populated Cells], 0)",
              "",
              "    VAR ShortAmount = ",
              "    SWITCH (",
              "        TRUE (),",
              "        Denominator >= 1000000000000, CONCATENATE ( ROUND( Denominator / 1000000000000, 0 ), \" T\" ),",
              "        Denominator >= 1000000000, CONCATENATE ( ROUND( Denominator / 1000000000, 0 ), \" bn\" ),",
              "        Denominator >= 1000000, CONCATENATE ( ROUND( Denominator / 1000000, 0 ), \" M\" ),",
              "        Denominator >= 1000, CONCATENATE ( ROUND( Denominator / 1000, 0 ), \" K\" ),",
              "        Denominator < 1000, ROUND ( Denominator, 0 )",
              "    )",
              "",
              "    RETURN",
              "        IF (ShortAmount = 0, 0, CONCATENATE(\"1 / \" , ShortAmount))"
            ],
            "lineageTag": "6d5d36ac-1815-42b2-a40d-734dd0d36e05"
          },
          {
            "name": "Cells",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Info",
            "expression": [
              "",
              "    VAR Amount = ",
              "    IF( [IsCubeSelected]",
              "        , PRODUCTX(",
              "                    SUMMARIZE(    ALL(DimensionElements[Dimension])",
              "                                , DimensionElements[Dimension]",
              "                                , \"ElementsCount\", COUNTROWS(DimensionElements)",
              "                    ), ",
              "                    [ElementsCount]",
              "        )",
              "        , 0",
              "    )",
              "",
              "    RETURN",
              "        IF (ISBLANK(Amount), 0, Amount)"
            ],
            "lineageTag": "932b3137-59a2-4b0d-82cf-ac642d499531"
          },
          {
            "name": "Feeders: Target < Source",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Feeders:Target<Source",
            "expression": [
              "",
              "    VAR ItrLevel = [HierarchyBrowseDepth]",
              "    VAR LevelItem = PATHITEM(MAX('Tree:Feeders:Target<Source'[HierarchyPath]), ItrLevel)",
              "",
              "    VAR NextLevelCount = ",
              "        SWITCH( ItrLevel",
              "                , 1, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_1])",
              "                , 2, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_2])",
              "                , 3, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_3])",
              "                , 4, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_4])",
              "                , 5, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_5])",
              "                , 6, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_6])",
              "                , 7, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_7])",
              "                , 8, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_8])",
              "                , 9, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_9])",
              "                , 10, DISTINCTCOUNTNOBLANK('Tree:Feeders:Target<Source'[CubeLevel_10])",
              "                , 11, 0",
              "        ) + 0",
              "",
              "    VAR Result = ",
              "            CALCULATE( NextLevelCount, FILTER('Tree:Feeders:Target<Source', PATHITEM('Tree:Feeders:Target<Source'[HierarchyPath], ItrLevel) = LevelItem ))",
              "",
              "    RETURN",
              "            IF (ISBLANK(LevelItem) || LevelItem = \"\", BLANK(), Result)"
            ],
            "lineageTag": "fd342f9d-9551-42eb-b7ad-38e38260d353"
          },
          {
            "name": "Direct. Feeders",
            "changedProperties": [
              {
                "property": "FormatString"
              }
            ],
            "displayFolder": "Performance Stats",
            "expression": [
              "",
              "    VAR _value = SELECTEDVALUE('PerformanceStats'[Directional Feeders])",
              "    VAR _return = ",
              "    SWITCH(SELECTEDVALUE(ValueToggle[Metric])",
              "        , \"Numbers\", _value",
              "        , \"Markers\", VAR _status = IF(_value = 0, 3, 1) RETURN LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              "        , _value",
              "    )",
              "    RETURN ",
              "        IF( [RuleExists], _return, BLANK() )",
              ""
            ],
            "formatString": "0",
            "lineageTag": "8f7fcadc-a212-4792-b345-4c4d72ec5e51"
          },
          {
            "name": "Feeders Processing",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "        CALCULATE( SUM( 'FeedersProcessing'[msDuration] ) / (1000 * 60)",
              "                , CALCULATETABLE(FeedersProcessing, FILTER(VALUES('FeedersProcessing'), 'FeedersProcessing'[TimeStamp] = MAXX(FILTER('FeedersProcessing', EARLIER('FeedersProcessing'[Cube]) = 'FeedersProcessing'[Cube]), 'FeedersProcessing'[TimeStamp])))",
              "        )"
            ],
            "lineageTag": "f8bb53ed-9cbc-43b7-b529-8a9683600e53"
          },
          {
            "name": "TopN Cubes: Feeders Processing",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Cube Stats",
            "expression": [
              "",
              "    // get the cubes for which we want to calculate TopN + Others ",
              "    VAR CubesAll = SELECTCOLUMNS(ALL(CubesWithOthers), \"RankCube\", CubesWithOthers[Cube])  ",
              "    // add a measure that we use for ranking",
              "    VAR CubesWithValue = ADDCOLUMNS( CubesAll, \"RankMeasure\", CALCULATE([Feeders Processing], ALL(Cubes)) )",
              "    // add a column with the rank of the measure within the cubes ",
              "    VAR CubesWithRank = ADDCOLUMNS(CubesWithValue, \"Rank\", RANKX(CubesWithValue, [RankMeasure], [RankMeasure], DESC, Dense)) ",
              "    // calculate whether the Cube is a Top-item or belongs to Others ",
              "    VAR CubesWithTop = ADDCOLUMNS(CubesWithRank, \"TopOrOthers\", IF([Rank] <= MAX('CubesTopN'[Number]), [RankCube], [cOthers]))",
              "    // select the final items for which the value is calculated ",
              "    VAR CubesFinal = SELECTCOLUMNS( // we only select a single column to be used with TREATAS() in the final filter",
              "        FILTER(",
              "            CubesWithTop, ",
              "            CONTAINSROW(VALUES(CubesWithOthers[Cube]), [TopOrOthers]) // need to obey current filters on _wOthers table. e.g. after Drill-Down",
              "            && CONTAINSROW(VALUES(Cubes[Cube]), [RankCube]) // need to obey current filters on base table",
              "        ) ",
              "        , \"TopN_Others\"",
              "        , [RankCube]",
              "    ) ",
              "    RETURN      ",
              "    CALCULATE(",
              "        [Feeders Processing], ",
              "        TREATAS(CubesFinal, CubesWithOthers[Cube])",
              "    )"
            ],
            "lineageTag": "38df77c6-2bcb-4d4a-897c-5f4721cc4e12"
          },
          {
            "name": "Model Elapsed Time",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Server Stats",
            "expression": [
              "",
              "    FORMAT(",
              "        CALCULATE( SELECTEDVALUE( 'ModelElapsedTime'[Time] ) ",
              "                , FILTER('ModelElapsedTime', 'ModelElapsedTime'[TimeStamp] = MAX('ModelElapsedTime'[TimeStamp]))",
              "        )",
              "    , \"hh:nn:ss\")"
            ],
            "lineageTag": "da60d02f-b4ce-4ce3-abde-ec521c4f25c0"
          },
          {
            "name": "Target Cube Definitions >",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Target<Source",
            "expression": [
              "",
              "    VAR Definition = ",
              "        SWITCH( SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_])",
              "            , 0, MIN('Tree:Rules:Target<Source'[CubeLevel_1: Area definition])",
              "            , 1, MIN('Tree:Rules:Target<Source'[CubeLevel_2: Area definition])",
              "            , 2, MIN('Tree:Rules:Target<Source'[CubeLevel_3: Area definition])",
              "            , 3, MIN('Tree:Rules:Target<Source'[CubeLevel_4: Area definition])",
              "            , 4, MIN('Tree:Rules:Target<Source'[CubeLevel_5: Area definition])",
              "            , 5, MIN('Tree:Rules:Target<Source'[CubeLevel_6: Area definition])",
              "            , 6, MIN('Tree:Rules:Target<Source'[CubeLevel_7: Area definition])",
              "            , 7, MIN('Tree:Rules:Target<Source'[CubeLevel_8: Area definition])",
              "            , 8, MIN('Tree:Rules:Target<Source'[CubeLevel_9: Area definition])",
              "            , 9, MIN('Tree:Rules:Target<Source'[CubeLevel_10: Area definition])",
              "            , 10, \"[...]\"",
              "        )",
              "    VAR Result = ",
              "        CALCULATE( Definition, FILTER('Tree:Rules:Target<Source', PATHITEM('Tree:Rules:Target<Source'[HierarchyPath], SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 2) = [> Source Cube]) )",
              "    ",
              "    RETURN",
              "        IF( NOT ISBLANK([Target Cube >]) && NOT ISBLANK( [> Source Cube]), Result, BLANK() )"
            ],
            "lineageTag": "a8f3581a-30c8-4e6d-b565-dddc8122fdb3"
          },
          {
            "name": "Cubes: Target<Source: Max Path Length",
            "displayFolder": "Maps\\Tree:Rules\\Target<Source",
            "expression": "MAX('Tree:Rules:Target<Source'[PathLength]) - [HierarchyBrowseDepth]",
            "formatString": "0",
            "lineageTag": "6dd60a1f-3a35-4791-81c2-4daae6958c38"
          },
          {
            "name": "_tm4",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": [
              "",
              "    VAR ItrLevel1 =",
              "      ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_0] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_1] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_2] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_3] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_4] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_5] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_6] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_7] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_8] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_9] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_10] )",
              "",
              "    VAR ItrLevel2 =",
              "      ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_0] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_1] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_2] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_3] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_4] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_5] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_6] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_7] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_8] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_9] )",
              "    + ISFILTERED ( 'Tree:Rules:Target<Source'[CubeLevel_10] )",
              "",
              "    RETURN \"FILTER: \" & ItrLevel1 & \" SCOPE: \" & ItrLevel2"
            ],
            "lineageTag": "d49b1381-5bda-408b-b569-577a9c57c327"
          },
          {
            "name": "Target Cube >",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Target<Source",
            "expression": [
              "",
              "    IF( [HierarchyBrowseDepth] > 0 && NOT ISBLANK([> Source Cube]), PATHITEM(MIN('Tree:Rules:Target<Source'[HierarchyPath]), SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 1), BLANK() )"
            ],
            "lineageTag": "1d5ae2d5-df07-41ef-9f2a-a73cc67a8e21"
          },
          {
            "name": "> Source Cube",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Target<Source",
            "expression": [
              "",
              "    IF( [HierarchyBrowseDepth] > 0, PATHITEM(MIN('Tree:Rules:Target<Source'[HierarchyPath]), SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 2), BLANK() )"
            ],
            "lineageTag": "62563def-24d1-43f3-9c1f-4000542247fe"
          },
          {
            "name": "> Target Cube Definitions",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Source>Target",
            "expression": [
              "",
              "    VAR Definition = ",
              "        SWITCH( SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_])",
              "            , 0, MIN('Tree:Rules:Source>Target'[CubeLevel_1: Area definition])",
              "            , 1, MIN('Tree:Rules:Source>Target'[CubeLevel_2: Area definition])",
              "            , 2, MIN('Tree:Rules:Source>Target'[CubeLevel_3: Area definition])",
              "            , 3, MIN('Tree:Rules:Source>Target'[CubeLevel_4: Area definition])",
              "            , 4, MIN('Tree:Rules:Source>Target'[CubeLevel_5: Area definition])",
              "            , 5, MIN('Tree:Rules:Source>Target'[CubeLevel_6: Area definition])",
              "            , 6, MIN('Tree:Rules:Source>Target'[CubeLevel_7: Area definition])",
              "            , 7, MIN('Tree:Rules:Source>Target'[CubeLevel_8: Area definition])",
              "            , 8, MIN('Tree:Rules:Source>Target'[CubeLevel_9: Area definition])",
              "            , 9, MIN('Tree:Rules:Source>Target'[CubeLevel_10: Area definition])",
              "            , 10, \"[...]\"",
              "        )",
              "    VAR Result = ",
              "        CALCULATE( Definition, FILTER('Tree:Rules:Source>Target', PATHITEM('Tree:Rules:Source>Target'[HierarchyPath], SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 2) = [Source Cube >]) )",
              "    ",
              "    RETURN",
              "        IF( NOT ISBLANK([> Target Cube]) && NOT ISBLANK( [Source Cube >]), Result, BLANK() )"
            ],
            "lineageTag": "9b841030-39f4-45c4-aa6e-d705c572fea9"
          },
          {
            "name": "> Target Cube",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Source>Target",
            "expression": [
              "",
              "    IF( [HierarchyBrowseDepth] > 0, PATHITEM(MIN('Tree:Rules:Source>Target'[HierarchyPath]), SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 2), BLANK() )"
            ],
            "lineageTag": "8c6739b6-4934-4da5-b5f9-46bc67abc368"
          },
          {
            "name": "Source Cube >",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Source>Target",
            "expression": [
              "",
              "    IF( [HierarchyBrowseDepth] > 0  && NOT ISBLANK([> Target Cube]), PATHITEM(MIN('Tree:Rules:Source>Target'[HierarchyPath]), SELECTEDVALUE('Tree:Rules:Details'[CubeLevel_]) + 1), BLANK() )"
            ],
            "lineageTag": "69c45cfd-f342-4992-880f-811ae9cc60e1"
          },
          {
            "name": "Cubes: Source>Target: Max Path Length",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "Maps\\Tree:Rules\\Source>Target",
            "expression": "MAX('Tree:Rules:Source>Target'[PathLength]) - [HierarchyBrowseDepth]",
            "lineageTag": "4acf4237-6459-4985-abf2-29a9b2b5792e"
          },
          {
            "name": "Inactive Users",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "displayFolder": "User Stats",
            "expression": [
              "",
              "    VAR InactiveUsers = CALCULATE(DISTINCTCOUNT(Users[User]), FILTER(Users, [Active Users] < 1))",
              "    RETURN",
              "        IF(ISBLANK(InactiveUsers), 0, InactiveUsers)"
            ],
            "lineageTag": "e8c34ce4-fd0f-4c11-a54d-2216b702386e"
          },
          {
            "name": "_tm5",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": [
              "",
              "    SWITCH(",
              "                   TRUE(),",
              "                   0 = 0, \"Black\",",
              "                   0 = 1, \"#FFC200\",",
              "                   \"Grey\"",
              "                 )"
            ],
            "lineageTag": "9d37e615-380f-4b61-b369-5970bc9a4f12"
          }
        ],
        "partitions": [
          {
            "name": "Amount measures-4fcd014e-c56a-4c19-8de1-539e24397633",
            "mode": "import",
            "queryGroup": "Data\\Measures",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Dummy = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Dummy\", type text}})",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "System measures",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Dummy",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "dad4803f-f08f-4ea9-9b2d-d99820d78056",
            "sourceColumn": "Dummy",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "346a8bdf-79c0-4e01-88b8-be26e83fa089",
        "measures": [
          {
            "name": "Report Status",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": [
              "",
              "    VAR _status = MAX('SysReportStatus'[Status]) //Report Health Status",
              "    RETURN ",
              "        LOOKUPVALUE('SysStatusNo'[Symbol], 'SysStatusNo'[No], _status)",
              ""
            ],
            "lineageTag": "9dc88a96-56fa-4752-9789-50767d4a1063"
          },
          {
            "name": "Report Date",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": "FORMAT(LASTDATE('SysLastRefresh'[LastRefreshDate]), \"dd.mm.yyyy hh:nn\")",
            "lineageTag": "a6693f59-39c9-44b2-945d-a0a4fdcecf16"
          },
          {
            "name": "Config Status",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": [
              "",
              "    VAR ConfigStatus = SELECTEDVALUE('SysConfigStatus'[Value])",
              "    RETURN ",
              "        SWITCH( ConfigStatus ",
              "            , \"FALSE\", UNICHAR( 10006 )",
              "            , \"TRUE\", UNICHAR( 10004 )",
              "            , ConfigStatus",
              "        )"
            ],
            "lineageTag": "b68b84f1-8b2c-4ac6-99c1-9d0143ab54a2"
          }
        ],
        "partitions": [
          {
            "name": "System measures-e2a25533-f43c-4cfe-b419-0b51c8899b6e",
            "mode": "import",
            "queryGroup": "Data\\Measures",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Dummy = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Dummy\", type text}})",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CubeProcessesRelation",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "384d546d-3ad1-4598-8db3-1fe2b8da2801",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "Process",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c70b2033-b0d9-419f-a59a-39d453888bfe",
            "sourceColumn": "Process",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "188f27a2-bfd0-4fed-a3d9-a8de53497bfd",
        "partitions": [
          {
            "name": "CubeProcessesRelation-54bef6f7-220a-4510-b026-338b6907bdf7",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let ",
                "   NullTable = #table(type table[Cube = text, Process = text], {}),",
                "",
                "   Source = Source_Processes[[Name], [TextContent], [MetaData]],",
                "   ProcessRelatedObjects = Table.AddColumn(",
                "                                            Source",
                "                                        , \"ProcessRelatedObjects\"",
                "                                        , each fn_extractFunctionEntries(Text.From([TextContent]), KeyWords[ProcessCubeRef], {1, 1, 1, 1}, fn_getProcessVariablesDict(Text.From([TextContent]), \"'\") )",
                "                        ),",
                "   // ToDo: Move Check to The Function",
                "   //RowsWithoutErrors = Table.SelectRows(ProcessRelatedObjects, each try Text.Length(Text.Combine([ProcessRelatedObjects])) >= 0 otherwise false),",
                "   ",
                "   ExpandedProcessRelatedObjects = Table.ExpandListColumn(ProcessRelatedObjects, \"ProcessRelatedObjects\"),",
                "   RemoveNonEvaluatedExpressions = Table.SelectRows(ExpandedProcessRelatedObjects, each not Text_ContainsAnyOf([ProcessRelatedObjects], {\"|\", \",\", \";\"}) and [ProcessRelatedObjects] <> null),",
                "   ResultTable = Table.RenameColumns(RemoveNonEvaluatedExpressions, {{\"ProcessRelatedObjects\", \"Cube\"}, {\"Name\", \"Process\"}})[[Cube], [Process]]",
                "in",
                "   ResultTable"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CubeDimensions",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "33d01359-b6bc-4dd8-9e03-22c01c24941d",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a9556a46-45e0-4177-a7e7-f4fde89a612e",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "0a13b22d-a1b8-4050-a58a-a566298f322b",
        "partitions": [
          {
            "name": "CubeDimensions-fee52bfd-cc66-4959-bad6-0b0ef27de498",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Cube = text, Dimension = text], {}),",
                "",
                "     Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_CubeDimensions[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                    let",
                "                        Value = sREST_CubeDimensions[value],",
                "                        ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
                "                        ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"Dimensions\"}, {\"Cube\", \"Dimensions\"}),",
                "                        ExpandedDimensionList = Table.ExpandListColumn(ExpandRecordSet, \"Dimensions\"),",
                "                        ExpandedDimensionRecords = Table.ExpandRecordColumn(ExpandedDimensionList, \"Dimensions\", {\"Name\"}, {\"Dimension\"})",
                "                    in",
                "                        ExpandedDimensionRecords      ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "DimensionAttributes",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d6778909-e78d-4c4b-a15e-31d551164ce6",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          },
          {
            "name": "Attribute",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "3cc76657-2611-4035-81cc-701e2ed40c13",
            "sourceColumn": "Attribute",
            "summarizeBy": "none"
          },
          {
            "name": "Hierarchy",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "32fd76fe-497c-42d6-ad7c-771edf73ff2e",
            "sourceColumn": "Hierarchy",
            "summarizeBy": "none"
          },
          {
            "name": "AttributeType",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ce1c9005-39ac-4864-8d18-98d18984190c",
            "sourceColumn": "AttributeType",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "6fa34f19-9794-4e18-9de6-b46a455561d0",
        "partitions": [
          {
            "name": "DimensionAttributes-fe0c8d7a-336c-4f6a-a583-8c85ef789265",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Dimension = text, Hierarchy = text, Attribute = text, AttributeType = text], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_DimensionAttributes[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Value = sREST_DimensionAttributes[value],",
                "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
                "                    ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"Hierarchies\"}, {\"Dimension\", \"Hierarchies\"}),",
                "                    NameSelection = Table.SelectRows(ExpandRecordSet, each ",
                "                                                                    let ",
                "                                                                        Dim = [Dimension], ",
                "                                                                        NameFilter = List.MatchesAny( Dimensions[Dimension], each _ = Text.From ( Dim ))",
                "                                                                    in ",
                "                                                                        NameFilter",
                "                                            ),",
                "                    ExpandHierarchiesList = Table.ExpandListColumn(NameSelection, \"Hierarchies\"),",
                "                    ExpandHierarchiesRecordSet = Table.ExpandRecordColumn(ExpandHierarchiesList, \"Hierarchies\", {\"Name\", \"ElementAttributes\"}, {\"Hierarchy\", \"ElementAttributes\"}),",
                "                    ExpandElementAttributesList = Table.ExpandListColumn(ExpandHierarchiesRecordSet, \"ElementAttributes\"),",
                "                    ExpandElementAttributesRecordSet = Table.ExpandRecordColumn(ExpandElementAttributesList, \"ElementAttributes\", {\"Name\", \"Type\"}, {\"Attribute\", \"AttributeType\"})",
                "                in",
                "                    ExpandElementAttributesRecordSet        ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Dimensions",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6c78a9dd-dd66-4c35-94f1-002b1231e041",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "22f2d295-fe17-4612-b5f5-4fba22b2071b",
        "partitions": [
          {
            "name": "Dimensions-fe2145ff-3b16-4128-9773-2236fc434be7",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Dimension = text], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_CubeDimensions[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                Table.FromList(List.Distinct(CubeDimensions[Dimension]), Splitter.SplitByNothing(), {\"Dimension\"}, null, ExtraValues.Ignore)        ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            Table.Distinct(DataFiles_Dimensions)",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "DimensionElements",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b62a4e29-c21f-40d8-a6e5-154781161184",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          },
          {
            "name": "Hierarchy",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bb03bdcc-4fc0-4630-bf3d-b2c6d4216400",
            "sourceColumn": "Hierarchy",
            "summarizeBy": "none"
          },
          {
            "name": "Element_0",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b8ffb448-55be-44be-ae64-b2af97a5e2cc",
            "sourceColumn": "Element_0",
            "summarizeBy": "none"
          },
          {
            "name": "ElementType",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cd14cbc6-de05-4fc2-b9bb-fb7ed20b2aea",
            "sourceColumn": "ElementType",
            "summarizeBy": "none"
          },
          {
            "name": "ElementLevel",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "70925e9a-10f6-4250-bc83-dd6c47193ca7",
            "sourceColumn": "ElementLevel",
            "summarizeBy": "none"
          },
          {
            "name": "Element_1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0c8180a5-ce6e-4063-9417-eb355334e0d8",
            "sourceColumn": "Element_1",
            "summarizeBy": "none"
          },
          {
            "name": "Element_2",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cf322b25-4c7b-49b3-8f62-58413b6143ad",
            "sourceColumn": "Element_2",
            "summarizeBy": "none"
          },
          {
            "name": "Element_3",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0597f1b4-96c0-4f52-888f-ea15d714a514",
            "sourceColumn": "Element_3",
            "summarizeBy": "none"
          },
          {
            "name": "Element_4",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "fae27390-3713-4e1b-a585-5c3afc51eca6",
            "sourceColumn": "Element_4",
            "summarizeBy": "none"
          },
          {
            "name": "Element_5",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "54e0ffa6-a23f-43e2-bb44-b3d345a09ffa",
            "sourceColumn": "Element_5",
            "summarizeBy": "none"
          },
          {
            "name": "Element_6",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d7b71c29-bf72-4a1f-9871-a8243a1d1168",
            "sourceColumn": "Element_6",
            "summarizeBy": "none"
          },
          {
            "name": "Element_7",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ce3e23ce-467b-4a72-b828-430b0ea32ebe",
            "sourceColumn": "Element_7",
            "summarizeBy": "none"
          },
          {
            "name": "Element_8",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "771d093e-b82b-4db1-8ee2-e560e514b44a",
            "sourceColumn": "Element_8",
            "summarizeBy": "none"
          },
          {
            "name": "Element_9",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "731bb908-6b5f-4172-9979-7820ec4c6ac6",
            "sourceColumn": "Element_9",
            "summarizeBy": "none"
          },
          {
            "name": "Element_10",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a13610e4-cb46-4ebf-91d5-b92215a29801",
            "sourceColumn": "Element_10",
            "summarizeBy": "none"
          },
          {
            "name": "ElementIndex",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "6e35d6f1-1d56-4a46-9787-6bd1c47b7d7a",
            "sourceColumn": "ElementIndex",
            "summarizeBy": "sum"
          },
          {
            "name": "ElementKey",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2994be59-6c79-4113-875e-6b03ef4acf3b",
            "sourceColumn": "ElementKey",
            "summarizeBy": "none"
          },
          {
            "name": "HierarchyDepth",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "expression": "PATHLENGTH('DimensionElements'[HierarchyPath])",
            "isDataTypeInferred": true,
            "lineageTag": "5e628418-54e5-49aa-a084-5c8de84310ce",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "HierarchyPath",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "193f6b68-0fd9-4a9f-aaae-e30ff6603269",
            "sourceColumn": "HierarchyPath",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "715bccf4-8996-418f-8df0-c40e250473d0",
        "partitions": [
          {
            "name": "DimensionElements-151cb544-b9ac-4baf-b419-437459b920af",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "  NullTable = #table(type table[    Dimension = text",
                "                                    , Hierarchy = text",
                "                                    , ElementType = text",
                "                                    , ElementLevel = text",
                "                                    , ElementIndex = number",
                "                                    , Element_0 = text",
                "                                    , Element_1 = text",
                "                                    , Element_2 = text            ",
                "                                    , Element_3 = text                                    ",
                "                                    , Element_4 = text                                   ",
                "                                    , Element_5 = text                                  ",
                "                                    , Element_6 = text                                   ",
                "                                    , Element_7 = text                                  ",
                "                                    , Element_8 = text                                 ",
                "                                    , Element_9 = text                                   ",
                "                                    , Element_10 = text                              ",
                "                                    , ElementKey = text",
                "                                    , HierarchyPath = text",
                "                                ], {}),",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_DimensionElements[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else ",
                "                let",
                "                    Value = sREST_DimensionElements[value],",
                "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
                "                    ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"Hierarchies\"}, {\"Dimension\", \"Hierarchies\"}),",
                "                    NameSelection = Table.SelectRows(ExpandRecordSet, each ",
                "                                                                    let ",
                "                                                                        Dim = [Dimension], ",
                "                                                                        NameFilter = List.MatchesAny( Dimensions[Dimension], each _ = Text.From ( Dim ))",
                "                                                                    in ",
                "                                                                        NameFilter",
                "                                            ),",
                "                    ExpandHierarchiesList = Table.ExpandListColumn(NameSelection, \"Hierarchies\"),",
                "                    ExpandHierarchiesRecordSet = Table.ExpandRecordColumn(ExpandHierarchiesList, \"Hierarchies\", {\"Name\", \"Elements\"}, {\"Hierarchy\", \"Elements\"}),",
                "                    ",
                "                    ExpandElementsList_0 = Table.ExpandListColumn(ExpandHierarchiesRecordSet, \"Elements\"),",
                "                    ExpandElementsRecordSet_0 = Table.ExpandRecordColumn(ExpandElementsList_0, \"Elements\", {\"Name\", \"Type\", \"Level\", \"Index\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(0), \"ElementType\", \"ElementLevel\", \"ElementIndex\", \"Parents_0\"}),",
                "                ",
                "                    ExpandParentElementsList_1 = Table.ExpandListColumn(ExpandElementsRecordSet_0, \"Parents_0\"),",
                "                    ExpandParentElementsRecordSet_1 = Table.ExpandRecordColumn(ExpandParentElementsList_1, \"Parents_0\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(1), \"Parents_1\"}),",
                "                    ExpandParentElementsList_2 = Table.ExpandListColumn(ExpandParentElementsRecordSet_1, \"Parents_1\"),",
                "                    ExpandParentElementsRecordSet_2 = Table.ExpandRecordColumn(ExpandParentElementsList_2, \"Parents_1\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(2), \"Parents_2\"}),",
                "                    ExpandParentElementsList_3 = Table.ExpandListColumn(ExpandParentElementsRecordSet_2, \"Parents_2\"),",
                "                    ExpandParentElementsRecordSet_3 = Table.ExpandRecordColumn(ExpandParentElementsList_3, \"Parents_2\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(3), \"Parents_3\"}),",
                "                    ExpandParentElementsList_4 = Table.ExpandListColumn(ExpandParentElementsRecordSet_3, \"Parents_3\"),",
                "                    ExpandParentElementsRecordSet_4 = Table.ExpandRecordColumn(ExpandParentElementsList_4, \"Parents_3\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(4), \"Parents_4\"}),",
                "                    ExpandParentElementsList_5 = Table.ExpandListColumn(ExpandParentElementsRecordSet_4, \"Parents_4\"),",
                "                    ExpandParentElementsRecordSet_5 = Table.ExpandRecordColumn(ExpandParentElementsList_5, \"Parents_4\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(5), \"Parents_5\"}),",
                "                    ExpandParentElementsList_6 = Table.ExpandListColumn(ExpandParentElementsRecordSet_5, \"Parents_5\"),",
                "                    ExpandParentElementsRecordSet_6 = Table.ExpandRecordColumn(ExpandParentElementsList_6, \"Parents_5\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(6), \"Parents_6\"}),",
                "                    ExpandParentElementsList_7 = Table.ExpandListColumn(ExpandParentElementsRecordSet_6, \"Parents_6\"),",
                "                    ExpandParentElementsRecordSet_7 = Table.ExpandRecordColumn(ExpandParentElementsList_7, \"Parents_6\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(7), \"Parents_7\"}),",
                "                    ExpandParentElementsList_8 = Table.ExpandListColumn(ExpandParentElementsRecordSet_7, \"Parents_7\"),",
                "                    ExpandParentElementsRecordSet_8 = Table.ExpandRecordColumn(ExpandParentElementsList_8, \"Parents_7\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(8), \"Parents_8\"}),",
                "                    ExpandParentElementsList_9 = Table.ExpandListColumn(ExpandParentElementsRecordSet_8, \"Parents_8\"),",
                "                    ExpandParentElementsRecordSet_9 = Table.ExpandRecordColumn(ExpandParentElementsList_9, \"Parents_8\", {\"Name\", \"Parents\"}, {SysName[DimHierarchyNodeName] & Text.From(9), \"Parents_9\"}),",
                "                    ExpandParentElementsList_10 = Table.ExpandListColumn(ExpandParentElementsRecordSet_9, \"Parents_9\"),",
                "                    ExpandParentElementsRecordSet_10 = Table.ExpandRecordColumn(ExpandParentElementsList_10, \"Parents_9\", {\"Name\"}, {SysName[DimHierarchyNodeName] & Text.From(10)}),",
                "",
                "                    DimensionElements = ExpandParentElementsRecordSet_10,",
                "                    RemoveNullElements = Table.SelectRows(DimensionElements, each Record.Field( _ , SysName[DimHierarchyNodeName] & Text.From(0)) <> null),   //null-elements are to be removed for the hierarchy flattening function (if any) to work correctly ",
                "                    AddElementKey = Table.AddColumn(RemoveNullElements, \"ElementKey\", each \"[\" & [Dimension] & \"].[\" & Text.From(Record.Field( _ , SysName[DimHierarchyNodeName] & Text.From(0))) & \"]\", type text),",
                "                    ",
                "                    AddHierarchyPath = Table.AddColumn(AddElementKey, \"HierarchyPath\", each null, type text),",
                "                    TreeNodeNames = List.Select(Table.ColumnNames(AddHierarchyPath), each Text.StartsWith( _ , SysName[DimHierarchyNodeName]) ),",
                "                    ReverseHierachy = fn_reverseHierarchy(AddHierarchyPath, TreeNodeNames, \"HierarchyPath\"),",
                "",
                "                    TransformColumnTypes = Table.TransformColumnTypes(ReverseHierachy, {{\"ElementIndex\", Int64.Type}})",
                "                in",
                "                    TransformColumnTypes",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            if Table.RowCount(Source_TransactionLog) > 0",
                "            then",
                "                Table.FromColumns(",
                "                    {     ",
                "                          {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                        , List.Distinct(TransactionLogDimensions[ElementKey])",
                "                        , {}",
                "                    }, Table.ColumnNames(NullTable)",
                "                )",
                "            else",
                "                NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "UserGroups",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "User",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a6b1ceed-5977-4550-bac2-ae6d95b431d7",
            "sourceColumn": "User",
            "summarizeBy": "none"
          },
          {
            "name": "GroupName",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4933cc87-ca5d-4951-937c-c7253c2d199d",
            "sourceColumn": "GroupName",
            "summarizeBy": "none"
          },
          {
            "name": "InGroup",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f4b39501-32d9-443c-ae39-efdc0ee07499",
            "sourceColumn": "InGroup",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "487fd2c4-11a1-4e35-a215-fa4be3fde935",
        "partitions": [
          {
            "name": "UserGroups-916dba5a-10ae-4f2b-b675-0c2dc5753bf7",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[User = text, InGroup = text, GroupName = text], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(#\"sREST_}ClientGroups\"[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Dim1 = \"}Clients\",",
                "                    Dim2 = \"}Groups\",",
                "                    Dim3 = \"}ElementAttributes_}Groups\",",
                "                    ",
                "                    TabulateClientGroups = fn_tabulateCubeData(#\"sREST_}ClientGroups\"[Axes], #\"sREST_}ClientGroups\"[Cells]),",
                "                    CheckClientGroups = if Table.IsEmpty(TabulateClientGroups) then Table.FromRows({}, {Dim1, Dim2, \"Value\"}) else TabulateClientGroups,",
                "                    ClientGroups = Table.RenameColumns(CheckClientGroups, {{Dim1, \"User\"}, {Dim2, \"Group\"}, {\"Value\", \"InGroup\"}}),",
                "",
                "                    TabulateGroups = fn_tabulateCubeData(#\"sREST_}ElementAttributes_}Groups\"[Axes], #\"sREST_}ElementAttributes_}Groups\"[Cells]),",
                "                    CheckGroups = if Table.IsEmpty(TabulateGroups) then Table.FromRows({}, {Dim2, Dim3, \"Value\"}) else TabulateGroups,",
                "                    RenameGroupsColumns = Table.RenameColumns(CheckGroups, {{Dim2, \"Group\"}, {Dim3, \"DefaultDisplayValue\"}, {\"Value\", \"GroupName\"}}),",
                "                    Groups = Table.SelectRows(RenameGroupsColumns, each ([DefaultDisplayValue] = \"}TM1_DefaultDisplayValue\")),",
                "",
                "                    ExtendedClientGroups = Table.NestedJoin(",
                "                                          Table.SelectColumns(ClientGroups , {\"User\", \"InGroup\"})",
                "                                        , \"InGroup\"",
                "                                        , Table.SelectColumns(Groups, {\"Group\", \"GroupName\"})",
                "                                        , \"Group\"",
                "                                        , \"GroupName\"",
                "                                        , JoinKind.LeftOuter",
                "                    ),",
                "                    ExpandGroupName = Table.ExpandTableColumn(ExtendedClientGroups, \"GroupName\", {\"GroupName\"}),",
                "                    ReplaceNullFriendlyName = Table.ReplaceValue(",
                "                                                              ExpandGroupName",
                "                                                            , each null",
                "                                                            , each [InGroup]",
                "                                                            , Replacer.ReplaceValue",
                "                                                            , {\"GroupName\"}",
                "                    )",
                "                in ",
                "                    ReplaceNullFriendlyName",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            if Table.RowCount(Source_TransactionLog) > 0",
                "            then",
                "                Table.FromColumns(",
                "                    {",
                "                          List.Distinct(Source_TransactionLog[User])",
                "                        , {}",
                "                        , {}",
                "                    }, Table.ColumnNames(NullTable)",
                "                )",
                "            else",
                "                NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CubeSecurity",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "acaca323-c072-4262-8563-41667c9f1c46",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "Group",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f880a068-696a-411d-98fc-8b864ce861d6",
            "sourceColumn": "Group",
            "summarizeBy": "none"
          },
          {
            "name": "AccessLevel",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0170aff4-7488-4db9-8d2c-14f6a7262f92",
            "sourceColumn": "AccessLevel",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "a7b1b6e5-cb9e-42f8-a8a1-f73f0435d1dc",
        "partitions": [
          {
            "name": "CubeSecurity-72a6dbcb-b1aa-4d47-9c4a-45547c587e72",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Cube = text, Group = text, AccessLevel = text], {}),",
                "",
                "     Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(#\"sREST_}CubeSecurity\"[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Dim1 = \"}Cubes\",",
                "                    Dim2 = \"}Groups\",",
                "",
                "                    TabulateCubeSecurity = fn_tabulateCubeData(#\"sREST_}CubeSecurity\"[Axes], #\"sREST_}CubeSecurity\"[Cells]),",
                "                    CheckCubeSecurity = if Table.IsEmpty(TabulateCubeSecurity) then Table.FromRows({}, {Dim1, Dim2, \"Value\"}) else TabulateCubeSecurity,",
                "                    RenameCubeSecurityColumns = Table.RenameColumns(CheckCubeSecurity, {{Dim1, \"Cube\"}, {Dim2, \"Group\"}, {\"Value\", \"AccessLevel\"}}),",
                "                    NameSelection = Table.SelectRows(RenameCubeSecurityColumns, each ",
                "                                                                let ",
                "                                                                    Name = [Cube], ",
                "                                                                    NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
                "                                                                in ",
                "                                                                    NameFilter",
                "                    ),",
                "                    CubeSecurity =  Table.SelectColumns(NameSelection, {\"Cube\", \"Group\", \"AccessLevel\"})",
                "                in",
                "                    CubeSecurity ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "TransactionLog",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "TimeStamp",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "c5455ba4-b54a-47dd-aa61-96db5e6c0409",
            "sourceColumn": "TimeStamp",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_1df1e6a0-dc05-444d-a2e4-554e3cdfc54f"
                },
                "isDefault": true,
                "relationship": "81f7ae21-e07f-4496-946a-dd8644e0328c"
              }
            ]
          },
          {
            "name": "User",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a2fb202f-bbf9-493c-a519-652fb31b2fce",
            "sourceColumn": "User",
            "summarizeBy": "none"
          },
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c4086c0a-ac13-477c-b0cd-7bc34e4a7ffd",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "OldValue",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c0bd1ac4-85f1-4e44-8796-c9fe8d07afb1",
            "sourceColumn": "OldValue",
            "summarizeBy": "none"
          },
          {
            "name": "NewValue",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f75d2405-aa45-4b49-a653-ed42e748d8cb",
            "sourceColumn": "NewValue",
            "summarizeBy": "none"
          },
          {
            "name": "RecordNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "90668d57-8ce9-4aee-ab5d-7a86dd832435",
            "sourceColumn": "RecordNo",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "f0f5b980-bf4e-429b-ba43-07aabf139a3b",
        "partitions": [
          {
            "name": "TransactionLog-55190fa6-8a84-4906-a415-3d6d1d55bcf0",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[RecordNo = number, TimeStamp = datetime, User = text, Cube = text, OldValue = text, NewValue = text], {}),",
                "",
                "    Source = Source_TransactionLog[[RecordNo], [TimeStamp], [User], [Cube], [OldValue], [NewValue]]",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_1df1e6a0-dc05-444d-a2e4-554e3cdfc54f",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "ab98cdff-e736-4e99-8d68-ab5bd10bc589",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "7f1d295e-256e-4c8e-85e4-c786ceb0a2b4",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "c097d320-ba88-4c9b-b120-7343022b2f28",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "9a5cdbfd-4b74-4a4f-9067-ba554f2ff4cb",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "bd625791-5584-4e62-9db5-c8241b5903b4",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "886473d3-5aad-4743-8ef8-adf8ccf09e16",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "34126374-81e9-400a-b19e-7f5ad02f788a",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "e5d97161-057d-4221-884d-5ff1f13b0db3",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "4dc3f47c-b852-47d2-8d1a-da980035aa66",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "929078a1-31ef-452d-80a1-7a83e5ce79da",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "d82166a5-f18c-4b86-aed6-fccf23999c0c",
                "ordinal": 3
              }
            ],
            "lineageTag": "ce68d416-4821-4261-85ea-fff6f21b1605"
          }
        ],
        "isHidden": true,
        "lineageTag": "134f04d0-2a23-44f6-9ff6-af972b9965bf",
        "partitions": [
          {
            "name": "LocalDateTable_1df1e6a0-dc05-444d-a2e4-554e3cdfc54f-f5f779b4-6d24-455e-bd6c-9c096e4fcc53",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('TransactionLog'[TimeStamp])), 1, 1), Date(Year(MAX('TransactionLog'[TimeStamp])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "TransactionLogDimensions",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "RecordNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "a887702b-ed0d-4039-83f6-8a546c62ebc5",
            "sourceColumn": "RecordNo",
            "summarizeBy": "none"
          },
          {
            "name": "ElementKey",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "09a8a582-2f4e-468e-a2f7-50ab375c6142",
            "sourceColumn": "ElementKey",
            "summarizeBy": "none"
          },
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "39b8318b-377b-4e31-8788-d113149f2907",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "3962a331-2a84-42da-9fc3-0ed85b30e03b",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          },
          {
            "name": "Element",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "116bba57-c9d3-4b77-9764-3108397dbce8",
            "sourceColumn": "Element",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "9b2e0921-681c-40c7-baed-3e895324c407",
        "partitions": [
          {
            "name": "TransactionLogDimensions-608e6cad-cf71-413a-8032-d899b5db0466",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    TransactionLogTuples = Source_TransactionLog[[RecordNo], [Cube], [Tuple]],",
                "",
                "    Dimensions = ",
                "        if Table.RowCount(CubeDimensions) > 0",
                "        then",
                "            let",
                "                CubeDimensionList = Table.Group(CubeDimensions, {\"Cube\"}, {{\"Dimension\", each List.Combine( {[Dimension]} ) }}),",
                "",
                "                JointTable = Table.NestedJoin(",
                "                                TransactionLogTuples",
                "                                , \"Cube\"",
                "                                , CubeDimensionList",
                "                                , \"Cube\"",
                "                                , \"CubeDimensions\"",
                "                                , JoinKind.LeftOuter",
                "                ),",
                "                ExpandCubeDimensions = Table.ExpandTableColumn(JointTable, \"CubeDimensions\", {\"Dimension\"})",
                "            in",
                "                ExpandCubeDimensions",
                "        else",
                "                Table.AddColumn(TransactionLogTuples, \"Dimension\",  (row) =>",
                "                                                            List.Generate(",
                "                                                                () => [Counter = 1, Dims = SysName[DimTransactionLogName] & Text.From(Counter) ]",
                "                                                                , each [Counter] <= List.Count(row[Tuple])",
                "                                                                , each [Counter = [Counter] + 1, Dims = SysName[DimTransactionLogName] & Text.From(Counter) ]",
                "                                                                , each [Dims]",
                "                                                            )",
                "                ),",
                "    ExpandDimension = Table.ExpandListColumn(Dimensions, \"Dimension\"),",
                "    ExpandTuple = Table.ExpandListColumn(Dimensions, \"Tuple\"),",
                "    TableFromColumns = Table.FromColumns(",
                "                                        {ExpandTuple[RecordNo], ExpandTuple[Cube], ExpandDimension[Dimension], ExpandTuple[Tuple] }",
                "                                        , {\"RecordNo\", \"Cube\", \"Dimension\", \"Element\"}",
                "                                    ),",
                "    AddElementKey = Table.AddColumn(TableFromColumns, \"ElementKey\", each \"[\" & [Dimension] & \"].[\" & [Element] & \"]\")",
                "in",
                "    AddElementKey"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "ElementAliases",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "ElementKey",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5bc63322-1dd7-4372-b666-52d96c9f8308",
            "sourceColumn": "ElementKey",
            "summarizeBy": "none"
          },
          {
            "name": "Dimension",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1d6bc6fe-e6a4-4179-b361-f9d45e0d41e2",
            "sourceColumn": "Dimension",
            "summarizeBy": "none"
          },
          {
            "name": "Element",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "957c249b-1e3f-4844-8dc9-69af6de16a9a",
            "sourceColumn": "Element",
            "summarizeBy": "none"
          },
          {
            "name": "Alias",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "642739e8-b552-448d-8996-5436548af551",
            "sourceColumn": "Alias",
            "summarizeBy": "none"
          },
          {
            "name": "ElementAlias",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5c2555df-f9b4-4d35-bc08-e80196d4f6f5",
            "sourceColumn": "ElementAlias",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "e98314ee-fa39-4108-b0a0-71fafc3d6c36",
        "partitions": [
          {
            "name": "ElementAliases-2fad9378-bbfe-48b3-b22b-20bd4c422ded",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[ElementKey = text, Dimension = text, Element = text, Alias = text, ElementAlias = text], {}),",
                "    Source = ",
                "            if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "            then",
                "                if (try not fn_isSuccessfulHttpRequest(sREST_DimensionElements[#\"@metadata\"]) otherwise true) ",
                "                then     ",
                "                    NullTable",
                "                else ",
                "                    let",
                "                        //Aliases in Dimensions",
                "                        Aliases = Table.Distinct(Table.SelectRows(DimensionAttributes, each [AttributeType] = \"Alias\")[[Dimension], [Attribute]]),",
                "                        AliasesList = Table.Group(Aliases, {\"Dimension\"}, {{\"Attribute\", each List.Combine( {[Attribute]} ) }}),",
                "",
                "                        //Aliases of Elements",
                "                        Value = sREST_DimensionElements[value],",
                "                        ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
                "                        ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"Hierarchies\"}, {\"Dimension\", \"Hierarchies\"}),",
                "                        NameSelection = Table.SelectRows(ExpandRecordSet, each ",
                "                                                                        let ",
                "                                                                            Dim = [Dimension], ",
                "                                                                            NameFilter = List.MatchesAny( Dimensions[Dimension], each _ = Text.From ( Dim ))",
                "                                                                        in ",
                "                                                                            NameFilter",
                "                                                ),",
                "                        ExpandHierarchiesList = Table.ExpandListColumn(NameSelection, \"Hierarchies\"),",
                "                        SelectDefaultHierarchies = Table.SelectRows(ExpandHierarchiesList, each [Hierarchies][Name] = [Dimension]), // removing all virtual hierarchies",
                "                        ExpandHierarchiesRecordSet = Table.ExpandRecordColumn(SelectDefaultHierarchies, \"Hierarchies\", {\"Name\", \"Elements\"}, {\"Hierarchy\", \"Elements\"}),",
                "                        ExtractAttributes = Table.AddColumn(ExpandHierarchiesRecordSet, \"Attributes\", each List.Transform( [Elements] , each Record.SelectFields( _ , {\"Name\", \"Attributes\"} ))),",
                "                        AddAliasesList = Table.NestedJoin(",
                "                                                            ExtractAttributes,",
                "                                                            \"Dimension\",   ",
                "                                                            AliasesList,",
                "                                                            \"Dimension\",",
                "                                                            \"Aliases\",",
                "                                                            JoinKind.LeftOuter",
                "                        ),",
                "                        ExpandAliases = Table.ExpandTableColumn(AddAliasesList, \"Aliases\", {\"Attribute\"}, {\"Aliases\"}),",
                "                        SelectAliasesFieldNames = Table.FromRecords(Table.TransformRows(ExpandAliases, ",
                "                                                                        ( row ) => Record.TransformFields(row, { \"Attributes\", ( ListValue ) => ",
                "                                                                                                                    List.Transform( ListValue , each",
                "                                                                                                                        let",
                "                                                                                                                            RenameElementFileld = Record.RenameFields( _ , { \"Name\", \"Element\" } ), // Assigning a target element name ",
                "                                                                                                                            AttributsUnionElement = RenameElementFileld[Attributes] & RenameElementFileld[[Element]], // The object-element replaces the \"Element\" attribute value, if any",
                "                                                                                                                            Attributes = if row[Aliases] <> null then row[Aliases] else {},",
                "                                                                                                                            SelectFields = Record.SelectFields( AttributsUnionElement, List.Union({ {\"Element\"}, { \"Caption\" }, Attributes } ), MissingField.Ignore )",
                "                                                                                                                        in",
                "                                                                                                                            SelectFields",
                "                                                                                                                    )",
                "                                                                                                                }",
                "                                                                                                        )",
                "                                                                    )",
                "                        ),",
                "                        CreateTableFromListOfRecords = Table.TransformColumns(SelectAliasesFieldNames, { \"Attributes\", ( value ) => Table.FromRecords(value) }),",
                "                        UnpivotAliases = Table.TransformColumns(CreateTableFromListOfRecords, { \"Attributes\", ( value ) => Table.UnpivotOtherColumns(value, {\"Element\"}, \"Alias\", \"ElementAlias\") }),",
                "                        FinalizeAliases = Table.ExpandTableColumn(UnpivotAliases, \"Attributes\", {\"Element\", \"Alias\", \"ElementAlias\"}),",
                "                        AddElementKey = Table.AddColumn(FinalizeAliases, \"ElementKey\", each \"[\" & [Dimension] & \"].[\" & [Element] & \"]\"),",
                "                        ElementAliases = AddElementKey[[ElementKey], [Dimension], [Element], [Alias], [ElementAlias]]        ",
                "                    in",
                "                        ElementAliases    ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "    in",
                "        Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Configuration",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "59339c0c-360b-4541-8f3d-df9f49d50e29",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Value",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "13c9ddd0-3332-4705-b29f-dae439509c4a",
            "sourceColumn": "Value",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "a73e74d1-340a-4f41-93bc-2de8d5560822",
        "partitions": [
          {
            "name": "Configuration-b2311dac-ba43-4bca-ab79-3fbf01930202",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Name = text, Value = text], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "        then",
                "            if (try not ( fn_isSuccessfulHttpRequest( sREST_Configuration[#\"@metadata\"] ) or fn_isSuccessfulHttpRequest(sREST_Server[#\"@metadata\"] )) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Value1 = sREST_Configuration,",
                "                    ConvertToTable1 = Record.ToTable(Value1),",
                "",
                "                    Value2 = sREST_Server,",
                "                    ConvertToTable2 = Record.ToTable(Value2),",
                "",
                "                    CombineTable = Table.Distinct(Table.Combine({ ConvertToTable1, ConvertToTable2 })),",
                "                    FilterRows = Table.SelectRows(CombineTable, each (not Text.StartsWith([Name], \"@\") and [Name] <> \"Name\"))",
                "                in",
                "                    FilterRows",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable    ",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Users",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "UserName",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d70aa7ed-2b2c-49f7-b1d1-35a7fcd8a53d",
            "sourceColumn": "UserName",
            "summarizeBy": "none"
          },
          {
            "name": "UserType",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "83933d8d-1bb9-4913-9503-99b3dfd5978c",
            "sourceColumn": "UserType",
            "summarizeBy": "none"
          },
          {
            "name": "IsUserActive",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4190f328-fcdf-425a-90aa-5126c4c31c54",
            "sourceColumn": "IsUserActive",
            "summarizeBy": "none"
          },
          {
            "name": "UserEnabled",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2973022b-2e3a-485e-9567-412037a42c91",
            "sourceColumn": "UserEnabled",
            "summarizeBy": "none"
          },
          {
            "name": "User",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d2221d9d-3cce-4464-bc42-6f4849e65a9c",
            "sourceColumn": "User",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "6cb7f69b-0b5d-46fc-b059-433739ae4d57",
        "partitions": [
          {
            "name": "Users-4eb5f8dc-b3b0-4155-a59d-bb537c76f994",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[User = text, UserName = text, UserType = text, IsUserActive = logical, UserEnabled = logical], {}),",
                "",
                "     Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(sREST_Users[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Value = sREST_Users[value],",
                "                    ConvertToTable = Table.FromList(Value, Splitter.SplitByNothing(), {\"RecordSet\"}, null, ExtraValues.Ignore),",
                "                    ExpandRecordSet = Table.ExpandRecordColumn(ConvertToTable, \"RecordSet\", {\"Name\", \"FriendlyName\", \"Type\", \"IsActive\", \"Enabled\"}, {\"User\", \"UserName\", \"UserType\", \"IsUserActive\", \"UserEnabled\"})",
                "                in",
                "                    ExpandRecordSet        ",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            if Table.RowCount(Source_TransactionLog) > 0",
                "            then",
                "                Table.FromColumns(",
                "                    {",
                "                          List.Distinct(Source_TransactionLog[User])",
                "                        , List.Distinct(Source_TransactionLog[User])",
                "                        , {}",
                "                        , {}",
                "                        , {}",
                "                    }, Table.ColumnNames(NullTable)",
                "                )",
                "            else",
                "                NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CubeStats",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "35f8c390-8dbd-489b-9663-cd3136d8c64b",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6ec11fb0-30b7-4297-981e-27d5d1444605",
            "sourceColumn": "Indicator",
            "summarizeBy": "none"
          },
          {
            "name": "TimeIntervals",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b4a63e2c-5b91-4a7f-a817-73a4df8cdb9b",
            "sourceColumn": "TimeIntervals",
            "summarizeBy": "none"
          },
          {
            "name": "Value",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "int64",
            "lineageTag": "b811b665-2232-4671-be29-0e86795a6f30",
            "sourceColumn": "Value",
            "summarizeBy": "sum"
          },
          {
            "name": "DateTime",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "2d3fe89b-f894-4a51-9b65-e5420e56fb3e",
            "sourceColumn": "DateTime",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_62b35232-6337-4bdc-884b-ef3497043f39"
                },
                "isDefault": true,
                "relationship": "c8b110b9-c295-4753-a3c3-697e0dbbaab8"
              }
            ]
          },
          {
            "name": "HoursOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "int64",
            "lineageTag": "74a2b4fd-89c5-40b0-9370-55a2e9ff2cf6",
            "sourceColumn": "HoursOffset",
            "summarizeBy": "none"
          }
        ],
        "hierarchies": [
          {
            "name": "TimeIntervals Hierarchy",
            "levels": [
              {
                "name": "TimeIntervals",
                "column": "TimeIntervals",
                "lineageTag": "bd090cf2-7bb8-4de6-8671-2dde853c8757",
                "ordinal": 0
              },
              {
                "name": "Value",
                "column": "Value",
                "lineageTag": "30d8b086-0893-461c-afdd-b1d0e62deb04",
                "ordinal": 1
              }
            ],
            "lineageTag": "59a82daa-198f-49bd-bfc7-b793c8f83599"
          }
        ],
        "lineageTag": "f852f979-7750-45d5-b95d-9ff50d0f31d0",
        "partitions": [
          {
            "name": "CubeStats-744d189b-770e-4b17-ae8a-c89d54b3fb6c",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Cube = text, Indicator = text, TimeIntervals = text, DateTime = datetime, Value = Int64.Type, HoursOffset = Int64.Type], {}),",
                "",
                "    Source = ",
                "    if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "    then",
                "        if (try not fn_isSuccessfulHttpRequest(#\"sREST_}StatsByCube\"[#\"@metadata\"]) otherwise true) ",
                "        then     ",
                "            NullTable",
                "        else",
                "            let",
                "                Dim1 = \"}PerfCubes\",",
                "                Dim2 = \"}StatsStatsByCube\",",
                "                Dim3 = \"}TimeIntervals\",",
                "",
                "                TabulateCubeData = fn_tabulateCubeData(#\"sREST_}StatsByCube\"[Axes], #\"sREST_}StatsByCube\"[Cells]),",
                "                CheckCubeData = if Table.IsEmpty(TabulateCubeData) then Table.FromRows({}, {Dim1, Dim2, Dim3, \"Value\"}) else TabulateCubeData,",
                "                RenameCubeColumns = Table.RenameColumns(CheckCubeData, {{Dim1, \"Cube\"}, {Dim2, \"Indicator\"},  {Dim3, \"TimeIntervals\"}, {\"Value\", \"Value\"}}),",
                "                NameSelection = Table.SelectRows(RenameCubeColumns, each ",
                "                                                                        let ",
                "                                                                            Name = [Cube], ",
                "                                                                            NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
                "                                                                        in ",
                "                                                                            NameFilter",
                "                ),",
                "                CubeStats = Table.SelectColumns(NameSelection, {\"Cube\", \"Indicator\", \"TimeIntervals\", \"Value\"}),",
                "                RemoveCubesTotal = Table.SelectRows(CubeStats, each Text.From([Cube]) <> \"Cubes Total\"), // Not needed for BI reports",
                "                ReplaceNullValues = Table.ReplaceValue(RemoveCubesTotal, null, 0, Replacer.ReplaceValue, {\"Value\"}), ",
                "                AggregateMRecords = fn_aggregateMTimeIntervalsToCurrentHour(ReplaceNullValues,  {\"Cube\", \"Indicator\", \"TimeIntervals\"}, {{\"Value\", each List.Average([Value]), type nullable number}}, \"TimeIntervals\"),",
                "                DuplicateTimeIntervalsColumn = Table.DuplicateColumn(AggregateMRecords, \"TimeIntervals\", \"DateTime\"),",
                "                AddDateTime = fn_transformTimeIntervalsToDateTime(DuplicateTimeIntervalsColumn, \"DateTime\"),                           ",
                "                LatestDateTime = List.Max(AddDateTime[DateTime]),",
                "                HoursOffset = Table.AddColumn(AddDateTime, \"HoursOffset\", each Number.RoundDown(Duration.TotalHours( Duration.From([DateTime] - LatestDateTime)) ), Int64.Type),",
                "                TransformColumnTypes = Table.TransformColumnTypes(HoursOffset, {{\"Cube\", type text}, {\"Indicator\", type text}, {\"TimeIntervals\", type text}, {\"DateTime\", type datetime}, {\"Value\", Int64.Type}})",
                "            in",
                "                TransformColumnTypes",
                "    else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "    then",
                "        NullTable",
                "    else",
                "        NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Definitions",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Dummy",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "7c1b3fea-ca9e-49d0-987e-5c04eaa06bdc",
            "sourceColumn": "Dummy",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "15abe158-ea21-4f08-b941-4f6d28dc4819",
        "measures": [
          {
            "name": "cOthers",
            "expression": "\"*Others\"",
            "lineageTag": "ec2a9cbc-971d-4343-be6a-7aed8121d04f"
          },
          {
            "name": "cTitleMemoryCharts01",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": "\"Current size of \" & SELECTEDVALUE(MemoryMetrics[Name]) & \" in memory, \" & SELECTEDVALUE('UnitToggle'[Metric])",
            "lineageTag": "7851e4e9-48ec-4900-b72f-4a4f509eed10"
          },
          {
            "name": "cTitleMemoryCharts02",
            "annotations": [
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "expression": "\"Historical size of \" & SELECTEDVALUE(MemoryMetrics[Name]) & \" in memory, \"  & SELECTEDVALUE('UnitToggle'[Metric])",
            "lineageTag": "9f478faa-95fd-4e0a-b663-65ab5112a8f2"
          }
        ],
        "partitions": [
          {
            "name": "Definitions-3e6efe1f-460c-42f0-a29a-d8b0f3bc8915",
            "mode": "import",
            "queryGroup": "Data\\Measures",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Dummy = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Dummy\", type text}})",
                "in",
                "    #\"Changed Type\""
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "CubesWithOthers",
        "annotations": [
          {
            "name": "PBI_Id",
            "value": "fabbeacf6ad84f9c9dfc2cbc89e4e538"
          }
        ],
        "columns": [
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "isDataTypeInferred": true,
            "isNameInferred": true,
            "lineageTag": "dbad2091-d5d0-491b-903b-1e8ffd7c938a",
            "sourceColumn": "Cubes[Cube]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          }
        ],
        "lineageTag": "32124a9f-efa0-4874-824b-e9e743aa0a15",
        "partitions": [
          {
            "name": "CubesWithOthers-f5b625cb-27df-4fb1-8f9d-9a0eca4941cd",
            "mode": "import",
            "source": {
              "expression": [
                "UNION(Cubes, ROW(\"Cube\", [cOthers]))",
                ""
              ],
              "type": "calculated"
            }
          }
        ]
      },
      {
        "name": "CubesTopN",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Number",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "459173b7-cd58-4deb-8bc1-a5127f7f1b7a",
            "sourceColumn": "Number",
            "summarizeBy": "sum"
          },
          {
            "name": "SelectedValue",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ba94008b-1e48-46a6-82f2-9be8a0c20e4d",
            "sortByColumn": "Number",
            "sourceColumn": "SelectedValue",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "b5880fa0-f67b-480c-8f7b-8a4fb69b6d46",
        "partitions": [
          {
            "name": "CubesTopN-87389a4d-7154-4160-a88e-dbcc7425828f",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    Source = #table(type table[Number = number],",
                "                    {",
                "                        {3}, {5}, {10}",
                "                    }",
                "    ),",
                "    CubesCount = List.Count(Cubes[Cube]),",
                "    ResultNumber = Table.Combine({ Table.SelectRows(Source, each [Number] < CubesCount), #table(type table[Number = number], { {CubesCount} }) }),",
                "    ResultTable = Table.AddColumn(ResultNumber, \"SelectedValue\", each if [Number] < CubesCount then Number.ToText([Number]) else \"All\", type text)",
                "in",
                "    ResultTable"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "UnitToggle",
        "calculationGroup": {
          "calculationItems": [
            {
              "name": "Units ( Mb )",
              "expression": "SELECTEDMEASURE ()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              },
              "ordinal": 0
            },
            {
              "name": "% of Total",
              "expression": [
                "IF (",
                "    ISSELECTEDMEASURE ( [TopN Cubes: Size in memory] )",
                "    , DIVIDE (",
                "            SELECTEDMEASURE (),",
                "            CALCULATE (",
                "                SELECTEDMEASURE (),",
                "                REMOVEFILTERS ( 'CubesWithOthers'[Cube] ),",
                "                REMOVEFILTERS ( 'Cubes'[Cube] )",
                "            ),",
                "            0",
                "      )",
                "    , SELECTEDMEASURE ()",
                ")",
                "",
                ""
              ],
              "formatStringDefinition": {
                "expression": "IF ( ISSELECTEDMEASURE ( [TopN Cubes: Size in memory] ), \"0.0%\", SELECTEDMEASUREFORMATSTRING() )"
              },
              "ordinal": 1
            }
          ]
        },
        "columns": [
          {
            "name": "Metric",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f66feae2-c067-4d18-90b1-90a97699cc84",
            "sortByColumn": "Ordinal",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Ordinal",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "isHidden": true,
            "lineageTag": "87efa8c9-2410-4732-9adc-8ea7a3fae824",
            "sourceColumn": "Ordinal",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "a3b15e61-3590-4226-be0c-78a246910cac",
        "partitions": [
          {
            "name": "Partition",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "UserStats",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "User",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9fc08d15-28db-4d68-a35c-81253fe7556a",
            "sourceColumn": "User",
            "summarizeBy": "none"
          },
          {
            "name": "Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c50e9c09-6790-42ba-93af-e558b026f316",
            "sourceColumn": "Indicator",
            "summarizeBy": "none"
          },
          {
            "name": "TimeIntervals",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "718b7d5f-68f0-41ba-973b-eb93764f363f",
            "sourceColumn": "TimeIntervals",
            "summarizeBy": "none"
          },
          {
            "name": "Value",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c31a821c-db40-4630-85ba-ece1b2839a3a",
            "sourceColumn": "Value",
            "summarizeBy": "sum"
          },
          {
            "name": "DateTime",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "b25dbd6e-a368-4a4b-b8db-080bc8c29cfd",
            "sourceColumn": "DateTime",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_026736a1-5a83-4784-ab3f-ab7eae229ff8"
                },
                "isDefault": true,
                "relationship": "aa947d0a-7b40-4551-98ae-03532ce1ecce"
              }
            ]
          },
          {
            "name": "HoursOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "202b2714-96c4-47f9-9421-201098854e1d",
            "sourceColumn": "HoursOffset",
            "summarizeBy": "sum"
          }
        ],
        "hierarchies": [
          {
            "name": "User Hierarchy",
            "levels": [
              {
                "name": "User",
                "column": "User",
                "lineageTag": "f16e54ee-44a9-423a-a967-fbf1081769ac",
                "ordinal": 0
              },
              {
                "name": "DateTime",
                "column": "DateTime",
                "lineageTag": "b879b2d5-1653-4181-97f9-a3683eb4f2b9",
                "ordinal": 1
              }
            ],
            "lineageTag": "f480e12e-4805-4fac-907e-cc3017db3519"
          }
        ],
        "lineageTag": "e6f0d0ac-887c-4c20-9eca-110cbe5750ec",
        "partitions": [
          {
            "name": "UserStats-9110d375-3d89-47ff-b0f2-cbc04930f7de",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[User = text, Indicator = text, TimeIntervals = text, DateTime = datetime, Value = Int64.Type, HoursOffset = Int64.Type], {}),",
                "",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\" ",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(#\"sREST_}StatsByClient\"[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let ",
                "                    Dim1 = \"}PerfClients\",",
                "                    Dim2 = \"}StatsStatsByClient\",",
                "                    Dim3 = \"}TimeIntervals\",",
                "",
                "                    TabulateCubeData = fn_tabulateCubeData(#\"sREST_}StatsByClient\"[Axes], #\"sREST_}StatsByClient\"[Cells]),",
                "                    CheckCubeData = if Table.IsEmpty(TabulateCubeData) then Table.FromRows({}, {Dim1, Dim2, Dim3, \"Value\"}) else TabulateCubeData,",
                "                    RenameCubeData = Table.RenameColumns(CheckCubeData, {{Dim1, \"User\"}, {Dim2, \"Indicator\"},  {Dim3, \"TimeIntervals\"}, {\"Value\", \"Value\"}}),",
                "                    UserStats = Table.SelectColumns(RenameCubeData, {\"User\", \"Indicator\", \"TimeIntervals\", \"Value\"}),",
                "                    RemoveUsersTotal = Table.SelectRows(UserStats, each Text.From([User]) <> \"Clients Total\"), // Not needed for BI reports",
                "                    ReplaceNullValues = Table.ReplaceValue(RemoveUsersTotal, null, 0, Replacer.ReplaceValue, {\"Value\"}), ",
                "                    AggregateMRecords = fn_aggregateMTimeIntervalsToCurrentHour(ReplaceNullValues,  {\"User\", \"Indicator\", \"TimeIntervals\"}, {{\"Value\", each List.Average([Value]), type nullable number}}, \"TimeIntervals\"),",
                "                    DuplicateTimeIntervalsColumn = Table.DuplicateColumn(AggregateMRecords, \"TimeIntervals\", \"DateTime\"),",
                "                    AddDateTime = fn_transformTimeIntervalsToDateTime(DuplicateTimeIntervalsColumn, \"DateTime\"),                           ",
                "                    LatestDateTime = List.Max(AddDateTime[DateTime]),",
                "                    HoursOffset = Table.AddColumn(AddDateTime, \"HoursOffset\", each Number.RoundDown(Duration.TotalHours( Duration.From([DateTime] - LatestDateTime)) ), Int64.Type),",
                "                    TransformColumnTypes = Table.TransformColumnTypes(HoursOffset, {{\"User\", type text}, {\"Indicator\", type text}, {\"TimeIntervals\", type text}, {\"DateTime\", type datetime}, {\"Value\", Int64.Type}})",
                "                in",
                "                    TransformColumnTypes",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "ServerStats",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "972f49bb-d45b-478c-8c01-c8aac2bd5107",
            "sourceColumn": "Indicator",
            "summarizeBy": "none"
          },
          {
            "name": "TimeIntervals",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cb821b4a-12a4-4eda-a759-e36639c32947",
            "sourceColumn": "TimeIntervals",
            "summarizeBy": "none"
          },
          {
            "name": "Value",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "9b2e032e-906b-4d45-99c8-37f9d8d99ad8",
            "sourceColumn": "Value",
            "summarizeBy": "sum"
          },
          {
            "name": "DateTime",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "d02ba839-7fd5-4044-b12a-99ba43471ce2",
            "sourceColumn": "DateTime",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_cebce91d-7993-49a6-bab1-d5ee5f5698e9"
                },
                "isDefault": true,
                "relationship": "6219d8c6-accf-46f0-9c04-73afa1a0ebc0"
              }
            ]
          },
          {
            "name": "HoursOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "c5f5684a-886d-422f-a898-91c01655ade5",
            "sourceColumn": "HoursOffset",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "ffc58ac3-8160-497d-bdd8-f3b57f170337",
        "partitions": [
          {
            "name": "ServerStats-e7d041cf-261b-4b24-8259-03be21f4d9fa",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Indicator = text, TimeIntervals = text, DateTime = datetime, Value = Int64.Type, HoursOffset = Int64.Type], {}),",
                "",
                "     Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "        then",
                "            if (try not fn_isSuccessfulHttpRequest(#\"sREST_}StatsForServer\"[#\"@metadata\"]) otherwise true) ",
                "            then     ",
                "                NullTable",
                "            else",
                "                let",
                "                    Dim1 = \"}StatsStatsForServer\",",
                "                    Dim2 = \"}TimeIntervals\",",
                "",
                "                    TabulateCubeData = fn_tabulateCubeData(#\"sREST_}StatsForServer\"[Axes], #\"sREST_}StatsForServer\"[Cells]),",
                "                    CheckCubeData = if Table.IsEmpty(TabulateCubeData) then Table.FromRows({}, {Dim1, Dim2, \"Value\"}) else TabulateCubeData,",
                "                    RenameCubeData = Table.RenameColumns(CheckCubeData, {{Dim1, \"Indicator\"},  {Dim2, \"TimeIntervals\"}, {\"Value\", \"Value\"}}),",
                "                    ServerStats = Table.SelectColumns(RenameCubeData, {\"Indicator\", \"TimeIntervals\", \"Value\"}),",
                "                    ReplaceNullValues = Table.ReplaceValue(ServerStats, null, 0, Replacer.ReplaceValue, {\"Value\"}), ",
                "                    AggregateMRecords = fn_aggregateMTimeIntervalsToCurrentHour(ReplaceNullValues,  {\"Indicator\", \"TimeIntervals\"}, {{\"Value\", each List.Average([Value]), type nullable number}}, \"TimeIntervals\"),",
                "                    DuplicateTimeIntervalsColumn = Table.DuplicateColumn(AggregateMRecords, \"TimeIntervals\", \"DateTime\"),",
                "                    AddDateTime = fn_transformTimeIntervalsToDateTime(DuplicateTimeIntervalsColumn, \"DateTime\"),                        ",
                "                    LatestDateTime = List.Max(AddDateTime[DateTime]),",
                "                    HoursOffset = Table.AddColumn(AddDateTime, \"HoursOffset\", each Number.RoundDown(Duration.TotalHours( Duration.From([DateTime] - LatestDateTime)) ), Int64.Type),",
                "                    TransformColumnTypes = Table.TransformColumnTypes(HoursOffset, {{\"Indicator\", type text}, {\"TimeIntervals\", type text}, {\"DateTime\", type datetime}, {\"Value\", Int64.Type}, {\"HoursOffset\", Int64.Type}})",
                "                in",
                "                    TransformColumnTypes",
                "        else if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"DataFiles\" ",
                "        then",
                "            NullTable",
                "        else",
                "            NullTable",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "SysReportStatus",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Status",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "isHidden": true,
            "lineageTag": "5285554c-6bcb-4e7a-b319-878e436710de",
            "sourceColumn": "Status",
            "summarizeBy": "sum"
          },
          {
            "name": "Indicator",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "049a0199-87b0-4a46-ac17-97ff01ed7e73",
            "sourceColumn": "Indicator",
            "summarizeBy": "none"
          }
        ],
        "isHidden": true,
        "lineageTag": "0a283e0c-1d57-438f-8c7b-2ff4bc662dce",
        "partitions": [
          {
            "name": "SysReportStatus-68691dca-ccaa-4986-acaa-4b9ec933aa5d",
            "mode": "import",
            "queryGroup": "SysData",
            "source": {
              "expression": [
                "let",
                "",
                "    fn_httpResponseGroupScore = (Group as text) as number =>",
                "        let",
                "            GroupRequests = Table.SelectRows(SysHttpRequestLog, each [Group] = Group),",
                "            GroupRequestsCount = Table.RowCount(GroupRequests),",
                "            SuccessfulResponses = Table.SelectRows(GroupRequests, each [HttpResponseStatus] >= 200 and [HttpResponseStatus] < 300 ),",
                "            SuccessfulResponseCount = Table.RowCount(SuccessfulResponses),",
                "            SuccessfulEmptyResponseCount = Table.RowCount(Table.SelectRows(SuccessfulResponses, each [IsEmpty]))",
                "        in",
                "            if // no requests has been made",
                "                GroupRequestsCount = 0 then 3",
                "            else if  // all the http requests renurned an error",
                "                SuccessfulResponseCount = 0 then 2",
                "            else if // none of the http requests returned an error and all of them are empty",
                "                SuccessfulResponseCount = GroupRequestsCount and SuccessfulResponseCount = SuccessfulEmptyResponseCount then 3",
                "            else if // none of the http requests returned an error and some of them are not empty",
                "                SuccessfulResponseCount = GroupRequestsCount and SuccessfulResponseCount > SuccessfulEmptyResponseCount then 0",
                "            else // some http requests renurned an error",
                "                1",
                "        ,",
                "        ",
                "    //0 - OK, 1 - Some errors, 2 - Failure, 3 - Empty",
                "    Source = #table(type table[#\"Indicator\" = text, Status = Int64.Type],",
                "                {",
                "                    { \"1. Configuration file\", ",
                "                        if  // config is not used",
                "                            List.NonNullCount(Record.ToList(LoadXMLConnectionConfig)) = 0 or List.MatchesAll(Record.ToList(LoadXMLConnectionConfig), each _ = \"\") then 3",
                "                        else 0",
                "                    }",
                "                    , { \"2. Server Requests\", ",
                "                        if // no request has been made",
                "                            SysHttpRequestLog = null then 3",
                "                        else  // none of the server requests returned an error",
                "                            if not List.ContainsAny(SysHttpRequestLog[HasError], { true }) then 0",
                "                        else // all the server requests renurned an error or null",
                "                            if not List.ContainsAny(SysHttpRequestLog[HasError], { false }) then 2\t\t\t\t\t\t\t",
                "                        else // some server requests returned an error",
                "                            1",
                "                    }",
                "                    , { \"3. SSL Setup\",",
                "                        if // no request has been made",
                "                            SysHttpRequestLog = null then 3",
                "                        else if // all the server requests returned an error",
                "                            not List.ContainsAny(SysHttpRequestLog[HasError], { true })",
                "                            and // some errors have a specific SSL-related code",
                "                                (   // URL uses http protocol,  tm1s.cfg UseSSL = true",
                "                                    List.MatchesAny(SysHttpRequestLog[ErrorMessage], each Text.Contains ( _ , \"The server committed a protocol violation. Section=ResponseStatusLine\"))",
                "                                    or // URL uses https protocol,  tm1s.cfg UseSSL = false",
                "                                    List.MatchesAny(SysHttpRequestLog[ErrorMessage], each Text.Contains ( _ , \"The underlying connection was closed: An unexpected error occurred on a send.\"))",
                "                                    or // Self signed certificate is used",
                "                                    List.MatchesAny(SysHttpRequestLog[ErrorMessage], each Text.Contains ( _ , \"The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\"))",
                "                                )",
                "                      then 2",
                "                      else 0",
                "                    }",
                "                    , { \"4. Http Response: Basic Data\", ",
                "                        if // no request has been made",
                "                            SysHttpRequestLog = null then 3",
                "                        else    ",
                "                            fn_httpResponseGroupScore(\"Basic\")",
                "                    }",
                "                    , { \"5. Http Response: Stats\",",
                "                        if // no request has been made",
                "                            SysHttpRequestLog = null then 3",
                "                        else    ",
                "                            fn_httpResponseGroupScore(\"Stats\")",
                "                    }",
                "                    , { \"6. Http Response: TransLog\",",
                "                        if // no request has been made",
                "                            SysHttpRequestLog = null then 3",
                "                        else    ",
                "                            fn_httpResponseGroupScore(\"TransLog\")",
                "                    }",
                "                }",
                "    )",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "SysHttpRequestLog",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Exception"
          }
        ],
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "33440a38-0944-4669-9fb0-092ad76bf4ad",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Group",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b971fce2-3cce-40c3-ba71-2f88599feae3",
            "sourceColumn": "Group",
            "summarizeBy": "none"
          },
          {
            "name": "RequstNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "60d3c670-4bd3-4be4-a66d-0daf24af876a",
            "sourceColumn": "RequstNo",
            "summarizeBy": "sum"
          },
          {
            "name": "RequestContent",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "67e34172-9210-475c-8f25-4b2502dbad5b",
            "sourceColumn": "RequestContent",
            "summarizeBy": "none"
          },
          {
            "name": "RequestBody",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "5f3585df-2905-454c-a5b6-5ea71ae6631f",
            "sourceColumn": "RequestBody",
            "summarizeBy": "none"
          },
          {
            "name": "AttemptNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "78286594-c62d-4a72-9d32-20228986a1f0",
            "sourceColumn": "AttemptNo",
            "summarizeBy": "sum"
          },
          {
            "name": "RequestStartTime",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "fa597dbf-ac78-48eb-8d12-537c3bb5f784",
            "sourceColumn": "RequestStartTime",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_0a6d63cb-0bf7-40e4-ba3d-f419d320cfe4"
                },
                "isDefault": true,
                "relationship": "63cfd62b-5cc6-4330-a9fe-933023c2d019"
              }
            ]
          },
          {
            "name": "RequestResponseTime",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "5b323d89-94f2-4443-9724-430f01433b9f",
            "sourceColumn": "RequestResponseTime",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_f035155e-96fa-46b9-872c-c4374c8524dc"
                },
                "isDefault": true,
                "relationship": "eb2fb744-3288-48ec-a40e-8a09db52752b"
              }
            ]
          },
          {
            "name": "RequestDelay",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "double",
            "lineageTag": "eb1a3784-a058-4c77-a08d-4a63072a345e",
            "sourceColumn": "RequestDelay",
            "summarizeBy": "sum"
          },
          {
            "name": "HasError",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "2b60ec46-111f-4844-bf6f-cadfe1e2267e",
            "sourceColumn": "HasError",
            "summarizeBy": "none"
          },
          {
            "name": "ErrorReason",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "237dd75c-015e-4c6e-9701-22b07688fcd7",
            "sourceColumn": "ErrorReason",
            "summarizeBy": "none"
          },
          {
            "name": "ErrorMessage",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e7589854-4b40-4692-b618-ff1aeba12146",
            "sourceColumn": "ErrorMessage",
            "summarizeBy": "none"
          },
          {
            "name": "ErrorDetails",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a8cf0111-6a16-43cd-9cef-6945b7464571",
            "sourceColumn": "ErrorDetails",
            "summarizeBy": "none"
          },
          {
            "name": "HttpResponseStatus",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "edd44766-1b81-4bcc-aa6b-7eb1d0576579",
            "sourceColumn": "HttpResponseStatus",
            "summarizeBy": "sum"
          },
          {
            "name": "ServerErrorCode",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "721f53a4-406d-4124-a452-23d4f53afbb9",
            "sourceColumn": "ServerErrorCode",
            "summarizeBy": "none"
          },
          {
            "name": "ServerErrorMessage",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "31da42e9-fa5d-4e76-95cb-e47f676b5e17",
            "sourceColumn": "ServerErrorMessage",
            "summarizeBy": "none"
          },
          {
            "name": "IsEmpty",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "8f009058-dc98-418b-ad9d-7e5838ea3d7c",
            "sourceColumn": "IsEmpty",
            "summarizeBy": "none"
          }
        ],
        "isHidden": true,
        "lineageTag": "721c5cd0-181d-42fa-89f1-f6c078e9e0f2",
        "partitions": [
          {
            "name": "SysHttpRequestLog-06a6d80d-ae07-4b75-8a1e-3f5fe413bb9a",
            "mode": "import",
            "queryGroup": "SysData",
            "source": {
              "expression": [
                "let",
                "    Source = ",
                "        if (try ConnectionConfig[ConnectionType] otherwise \"REST\") = \"REST\"",
                "        then",
                "            let",
                "                FilterSingleHttpRequests = Table.SelectRows(SysHttpRequestData, each Text.StartsWith([Name], SysName[SingleHttpRequestName])),",
                "",
                "                FilterMultipleHttpRequests = Table.SelectRows(SysHttpRequestData, each Text.StartsWith([Name], SysName[MultipleHttpRequestName])),",
                "                ExpandMultipleResponseList = Table.ExpandListColumn(FilterMultipleHttpRequests, \"Data\"),",
                "",
                "                AllHttpRequests = Table.Combine({ FilterSingleHttpRequests, ExpandMultipleResponseList }),",
                "",
                "                CheckEmptiness = Table.AddColumn(AllHttpRequests, \"IsEmpty\", each ",
                "                                                                                        (try [Data][ProductVersion] = null otherwise true) ",
                "                                                                                    and (try List.IsEmpty([Data][value]) otherwise true) ",
                "                                                                                    and (try List.IsEmpty([Data][Cells]) otherwise true), ",
                "                                                                                    type logical",
                "                                                ),",
                "                ExpendResponseRecord = Table.ExpandRecordColumn(CheckEmptiness, \"Data\", {\"@metadata\", \"error\"}),",
                "                ExpandMetadataTable = Table.ExpandTableColumn(ExpendResponseRecord, \"@metadata\", {",
                "                                                                                                    \"RequstNo\"",
                "                                                                                                    , \"RequestContent\"",
                "                                                                                                    , \"RequestBody\"",
                "                                                                                                    , \"AttemptNo\"",
                "                                                                                                    , \"RequestStartTime\"",
                "                                                                                                    , \"RequestResponseTime\"",
                "                                                                                                    , \"RequestDelay\"",
                "                                                                                                    , \"HasError\"",
                "                                                                                                    , \"ErrorReason\"",
                "                                                                                                    , \"ErrorMessage\"",
                "                                                                                                    , \"ErrorDetails\"",
                "                                                                                                    , \"HttpResponseStatus\"",
                "                                                                                                }",
                "                                                            ),",
                "                ExpendErrorRecord = Table.ExpandRecordColumn(ExpandMetadataTable, \"error\", {\"code\", \"message\"}, {\"ServerErrorCode\", \"ServerErrorMessage\"}),",
                "                TransformColumnTypes = Table.TransformColumnTypes(ExpendErrorRecord, {",
                "                                                                                        {\"RequstNo\", Int64.Type}",
                "                                                                                        , {\"AttemptNo\", Int64.Type}",
                "                                                                                        , {\"RequestStartTime\", type datetime}",
                "                                                                                        , {\"RequestResponseTime\", type datetime}",
                "                                                                                        , {\"RequestDelay\", type number}",
                "                                                                                        , {\"HasError\", type logical}",
                "                                                                                        , {\"HttpResponseStatus\", Int64.Type}\t",
                "                })",
                "            in",
                "                TransformColumnTypes",
                "        else null",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "SysConfigStatus",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "51c1db22-c162-4d5d-a1d0-f3128df8a37d",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Value",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "isHidden": true,
            "lineageTag": "e455d2a7-078e-4cdb-a8ca-927e4b082785",
            "sourceColumn": "Value",
            "summarizeBy": "none"
          }
        ],
        "isHidden": true,
        "lineageTag": "bd72c3d2-dad5-49d2-889d-bd6f7141fc5e",
        "partitions": [
          {
            "name": "SysConfigStatus-5d0e134e-54c0-4d89-8e64-33edadb09837",
            "mode": "import",
            "queryGroup": "SysData",
            "source": {
              "expression": [
                "let",
                "    Source = Table.Combine(",
                "        {",
                "\t\t\tTable.Unpivot(",
                "\t\t\t\t\tTable.FromRecords({ Record.SelectFields(ConnectionConfig, { \"ConnectionType\", \"Host:Port\", \"Login\", \"Namespace\" }) })",
                "\t\t\t\t\t, { \"ConnectionType\", \"Host:Port\", \"Login\", \"Namespace\" }",
                "\t\t\t\t\t, \"Name\"",
                "\t\t\t\t\t, \"Value\"",
                "\t\t\t)",
                "\t\t\t, Table.FromRecords(",
                "\t\t\t\t\t{   ",
                "\t\t\t\t\t\t[ Name = \"SSL connection\"",
                "\t\t\t\t\t\t, Value = Text.Contains(Text.Lower(ConnectionConfig[#\"Host:Port\"]), \"https\") ]",
                "\t\t\t\t\t}",
                "            )",
                "            , Table.FromRecords(",
                "                    {   ",
                "                        [ Name = \"TransactionLog\"",
                "                        , Value = SettingsConfig[TransactionLogPeriodInDays] >= 0 ]",
                "                    }",
                "            )",
                "        }",
                "    )",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "SecurityToggle",
        "calculationGroup": {
          "calculationItems": [
            {
              "name": "Users by cube",
              "expression": "SELECTEDMEASURE()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              },
              "ordinal": 1
            },
            {
              "name": "Cubes by user",
              "expression": "SELECTEDMEASURE()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              },
              "ordinal": 0
            }
          ],
          "precedence": 1
        },
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cf592fc5-9fb1-4330-8cac-5d79aaca16bc",
            "sortByColumn": "Ordinal",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Ordinal",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "isHidden": true,
            "lineageTag": "b64ab99a-0a69-46f0-8b06-90519e7de506",
            "sourceColumn": "Ordinal",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "d288d9c2-7e4f-45fb-996f-6c4c5d042d2a",
        "partitions": [
          {
            "name": "Partition",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "SysLastRefresh",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "LastRefreshDate",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "isHidden": true,
            "lineageTag": "b62504cc-751f-4db1-a260-f6242730fea5",
            "sourceColumn": "LastRefreshDate",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_85cfbfb2-c37d-49e6-bd66-cc7c131b7f6d"
                },
                "isDefault": true,
                "relationship": "0a7dfcf0-a15b-4841-953e-5f4d23dc2543"
              }
            ]
          }
        ],
        "isHidden": true,
        "lineageTag": "070575d7-5752-496f-98dc-b137c1f1e846",
        "partitions": [
          {
            "name": "SysLastRefresh-bfb41ae3-dfba-4870-99c5-8ebf45d182b0",
            "mode": "import",
            "queryGroup": "SysData",
            "source": {
              "expression": [
                "let",
                "    Source = #table(type table[LastRefreshDate = datetime], {{ DateTime.FixedLocalNow() }})",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_85cfbfb2-c37d-49e6-bd66-cc7c131b7f6d",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "71aa9ffd-0d8b-489f-9a6c-78a2b83e8be0",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "1bedc0da-0982-4d92-9d41-98bdc15e7e58",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "883c5a38-f143-48d3-b153-596c7a15748e",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "6e612a97-9e48-4050-8da0-a92a6c584847",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "1c269040-6c4b-4226-840e-e886904315cf",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "cc051640-ed2b-4ca3-ac7f-377300339ba0",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "cc62c8a9-72b9-4322-a164-1b0ff14916ad",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "a6b2a469-3b76-42ca-a4ce-495119f8faab",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "56c8fdb3-71f8-4c97-b7aa-febb527487c6",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "d0480117-29df-4a42-99d6-afb46932d188",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "fcd2ce99-0cd4-4e3f-86f2-0c9ae9fa797c",
                "ordinal": 3
              }
            ],
            "lineageTag": "9dc63b90-30b6-4046-a1af-2cd294b8180d"
          }
        ],
        "isHidden": true,
        "lineageTag": "0943acf4-7312-4439-88d4-e4538e7a31f4",
        "partitions": [
          {
            "name": "LocalDateTable_85cfbfb2-c37d-49e6-bd66-cc7c131b7f6d-7a7627bf-3f12-4eac-9954-c7303886dd54",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('SysLastRefresh'[LastRefreshDate])), 1, 1), Date(Year(MAX('SysLastRefresh'[LastRefreshDate])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "MemoryMetrics",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ffe479c9-b370-4d0f-aa0b-09a8234c7a82",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Metric",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "01c81311-d368-4584-a599-69e15d4a4830",
            "sourceColumn": "Metric",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "e96bba20-0bcb-468f-90be-69a52eb0d11d",
        "partitions": [
          {
            "name": "MemoryMetrics-62682e01-c9f6-40c5-8bbc-159f8ef9199a",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    Source = #table(type table[Name = text, Metric = text],",
                "        {",
                "            { \"cubes\",          \"Total Memory Used\" },",
                "            { \"views\",          \"Memory Used for Views\" },",
                "            { \"calculations\",   \"Memory Used for Calculations\" },",
                "            { \"feeders\",        \"Memory Used for Feeders\" },",
                "            { \"input data\",     \"Memory Used for Input Data\" }",
                "        }",
                "    )",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "MetricsTimeScale",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "HoursOffset",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "12b8988c-e77f-4c94-b423-db510146c2d4",
            "sourceColumn": "HoursOffset",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "2feb23c3-ae2a-4d70-b092-012c79f55467",
        "partitions": [
          {
            "name": "MetricsTimeScale-6628b6fe-3d79-4b27-86dc-e911591cacd1",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromList(List.Distinct( List.Combine({ CubeStats[HoursOffset], ServerStats[HoursOffset] }) ), Splitter.SplitByNothing(), {\"HoursOffset\"}, null, ExtraValues.Ignore),",
                "    ChangeType = Table.TransformColumnTypes(Source,{{\"HoursOffset\", Int64.Type}})",
                "in",
                "    ChangeType"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_62b35232-6337-4bdc-884b-ef3497043f39",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "4f1e619a-dabd-4dcb-a9ef-32b9342e7469",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "f2e1cea7-0cd9-46f6-a07b-b702b6173928",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "009ae23f-a3f6-4592-8c65-c7b1507bddcb",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "6f9b2272-8278-4e93-b336-3832ff5cd671",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "b59d82f4-7c14-479c-9eda-a05c2465d308",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "bfd115b2-1454-47b6-8447-67a946cca20e",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "78f67203-131c-4517-9741-eff6fe7b4def",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "1fed4822-6d40-44bb-8529-98878d702b9f",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "94580bf6-b8ad-4290-bca2-96faa1cfb48d",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "dd16fb9b-6f6e-4f92-a212-45a710c2ff00",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "45b499ee-d410-4046-8afb-8967e6bec1f6",
                "ordinal": 3
              }
            ],
            "lineageTag": "975a9848-2de5-4ee6-934d-152aa3a153e9"
          }
        ],
        "isHidden": true,
        "lineageTag": "310b35ba-5478-4fa7-9e46-872e6970dd4a",
        "partitions": [
          {
            "name": "LocalDateTable_62b35232-6337-4bdc-884b-ef3497043f39-19aa3ac4-9930-4522-b18e-71e66be85b8f",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('CubeStats'[DateTime])), 1, 1), Date(Year(MAX('CubeStats'[DateTime])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "LocalDateTable_026736a1-5a83-4784-ab3f-ab7eae229ff8",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "88930da0-ab48-4c6c-8393-e310c109b861",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "1d651642-ece7-4c59-8ff7-3c75a2c1a6b7",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "f37a4eb6-a6a3-4a6c-bfe7-5c205427e7c7",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "1702153a-e6ac-4cf5-babb-628c38677341",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "3528e0f8-7048-4cb4-a82b-0801cd7e986d",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "0f89cccb-6660-4835-938f-6ec34bb90a37",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "c9e563a9-76d0-4b65-bae8-0b15149b11b7",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "fd6486c0-5f11-4735-aa38-e6276ea11fce",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "792fe5bd-17ce-4b1c-b089-6737acaae9e2",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "476b3a8a-b69d-4e86-98e2-e742193f7b23",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "eecb2438-1857-473c-8196-3e0815380e93",
                "ordinal": 3
              }
            ],
            "lineageTag": "3e527e66-41d5-43a3-b5ec-2726bf9713af"
          }
        ],
        "isHidden": true,
        "lineageTag": "23b4ee13-b508-420b-894c-00ddb023945a",
        "partitions": [
          {
            "name": "LocalDateTable_026736a1-5a83-4784-ab3f-ab7eae229ff8-0ceacd08-13a6-429b-9cdd-3863716e9132",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('UserStats'[DateTime])), 1, 1), Date(Year(MAX('UserStats'[DateTime])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "LocalDateTable_cebce91d-7993-49a6-bab1-d5ee5f5698e9",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "320e3380-1b28-4e32-80c2-768b677bba27",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "7f78a395-5931-4136-b9e4-1c3e4ee03773",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "c1ac5084-3964-49e0-8941-958eaa3a84de",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "eecfc582-e790-467e-a521-b9305e8c8fb4",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "1f157f6f-20ad-43df-b9a9-8b6a05d9e863",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "589f3aa9-36d4-470a-a0c9-522f5660bfcb",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "6b360429-9daa-42c5-a245-75fa24d485f4",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "359211d0-bd86-4b48-96d5-2177919ca87b",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "a391776c-2191-4cf8-ae1d-7970d1e72264",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "9acef189-2277-4377-b318-009f93047773",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "56087160-4c5a-45a9-b77c-9909eca1a9b5",
                "ordinal": 3
              }
            ],
            "lineageTag": "2d5ed851-62ea-4fe2-82a0-20cb436243f2"
          }
        ],
        "isHidden": true,
        "lineageTag": "1d58ca92-2d68-42c9-93f0-9ec76c894871",
        "partitions": [
          {
            "name": "LocalDateTable_cebce91d-7993-49a6-bab1-d5ee5f5698e9-4d6a3fc8-5039-4801-96db-9382ef5eb405",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('ServerStats'[DateTime])), 1, 1), Date(Year(MAX('ServerStats'[DateTime])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "LanguageToggle",
        "calculationGroup": {
          "calculationItems": [
            {
              "name": "EN",
              "expression": "SELECTEDMEASURE()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              }
            },
            {
              "name": "RU",
              "expression": "SELECTEDMEASURE()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              }
            }
          ],
          "precedence": 2
        },
        "columns": [
          {
            "name": "Name",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ae97a5ea-3b52-4967-b0eb-cbcfbdae2727",
            "sortByColumn": "Ordinal",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Ordinal",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "isHidden": true,
            "lineageTag": "7bd7d1e8-f42a-441b-9193-4496e4704a52",
            "sourceColumn": "Ordinal",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "c57ff61f-3a0c-499f-a243-4091cc48952d",
        "partitions": [
          {
            "name": "Partition",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "Tree:Rules:Source>Target",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "HierarchyPath",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a98ec44f-df3c-4616-973c-23b480d49e25",
            "sourceColumn": "HierarchyPath",
            "summarizeBy": "none"
          },
          {
            "name": "PathLength",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "expression": "PATHLENGTH('Tree:Rules:Source>Target'[HierarchyPath])",
            "formatString": "0",
            "isDataTypeInferred": true,
            "lineageTag": "d440427b-7279-4d19-802a-045a7bb3f91e",
            "summarizeBy": "sum",
            "type": "calculated"
          },
          {
            "name": "CubeLevel_0",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a90ffc8b-11db-4c8b-bc81-516cbf532be7",
            "sourceColumn": "CubeLevel_0",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a6f0e066-a1f5-479d-87a8-b6505cd75e9e",
            "sourceColumn": "CubeLevel_1",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_2",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7909606d-5532-4c1a-816a-bae84c352f3b",
            "sourceColumn": "CubeLevel_2",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_3",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9f159f84-3cfa-4b86-b307-68b4cb476961",
            "sourceColumn": "CubeLevel_3",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_4",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9f06fd47-32a4-43b7-aefa-ea89b5862786",
            "sourceColumn": "CubeLevel_4",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_5",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "62c29de7-c2d9-411f-b112-ee99a8158b5c",
            "sourceColumn": "CubeLevel_5",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_6",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9bed0506-92d0-49b1-8911-e6341c03bd3e",
            "sourceColumn": "CubeLevel_6",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_7",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d83f0fff-13b9-4c58-87c0-84e5cc69c3cb",
            "sourceColumn": "CubeLevel_7",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_8",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "df4b0bbf-350f-426a-85a1-62b85571ba7e",
            "sourceColumn": "CubeLevel_8",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_9",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ba21ee9e-194c-40a7-b57d-61b350c7a79e",
            "sourceColumn": "CubeLevel_9",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_10",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b93d0b9f-4650-40ca-830f-9255e5f7be68",
            "sourceColumn": "CubeLevel_10",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_1: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c9bc3a30-6973-4036-aa49-c6a463612ff4",
            "sourceColumn": "CubeLevel_1: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_2: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0c033117-908b-49e9-b0a2-2a395f74706e",
            "sourceColumn": "CubeLevel_2: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_3: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "49e57c2c-b932-4ea8-bd74-95d4ec588d92",
            "sourceColumn": "CubeLevel_3: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_4: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "37bc4fe7-c343-4a49-bf14-9429eb680fc9",
            "sourceColumn": "CubeLevel_4: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_5: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ce6c5fbc-a980-4570-b41f-e05d439fabeb",
            "sourceColumn": "CubeLevel_5: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_6: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1977e2b9-13cc-4e23-9bc5-8e112d17ee06",
            "sourceColumn": "CubeLevel_6: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_7: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "2cee6675-e123-47d0-8173-9e4e62325b77",
            "sourceColumn": "CubeLevel_7: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_8: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0a453a62-cf42-4499-abaa-50f7f5b0f816",
            "sourceColumn": "CubeLevel_8: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_9: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d9bf35e7-4a96-4889-9126-7c9042324bab",
            "sourceColumn": "CubeLevel_9: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_10: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6a87a41b-a581-4e9a-bc2d-53fc3a301605",
            "sourceColumn": "CubeLevel_10: Area definition",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "287c133a-d493-4e77-9696-e4465b12e33d",
        "partitions": [
          {
            "name": "Tree:Rules:Source>Target-80a43ba2-99c3-4ac8-b98c-885665b9fd0d",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "\tNullTable = Table.FromRows( {}, ",
                "\t\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(0)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(1)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(2)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(3)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(4)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(5)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(6)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(7)            ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(8)                                    ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(9)                                   ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(10)                                                                 ",
                "\t\t\t\t\t\t\t\t}",
                "\t),",
                "    ",
                "\tTreeNodeNames = List.Select(Table.ColumnNames(#\"Tree:Rules:Target<Source\"), each Text.StartsWith( _ , SysName[CubeTreeNodeName]) and not Text.Contains( _ , \":\")),",
                "\tReversedTreeNodeNames = fn_reverseHierarchy(#\"Tree:Rules:Target<Source\", TreeNodeNames, \"HierarchyPath\"),",
                "\tTreeAreaDefinitions =  List.Select(Table.ColumnNames(ReversedTreeNodeNames), each Text.StartsWith( _ , SysName[CubeTreeNodeName]) and Text.Contains( _ , SysName[CubeTreeAreaDefinition])),",
                "\tReversedAreaDefinitions = fn_reverseHierarchy(ReversedTreeNodeNames, TreeAreaDefinitions)",
                "in",
                "    ReversedAreaDefinitions"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Tree:Processes:Target<Source",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "HierarchyPath",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "bc4fa3d8-bd96-449c-8309-3486e8e1c367",
            "sourceColumn": "HierarchyPath",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_0",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0b6722db-9876-4218-8862-9a10d0045641",
            "sourceColumn": "ProcLevel_0",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "07049c3f-d254-4565-9590-268e864256d5",
            "sourceColumn": "ProcLevel_1",
            "summarizeBy": "none"
          },
          {
            "name": "PathLength",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "expression": "PATHLENGTH('Tree:Processes:Target<Source'[HierarchyPath])",
            "formatString": "0",
            "isDataTypeInferred": true,
            "lineageTag": "3a3c823a-9a3d-48dd-80a7-639e13a033a4",
            "summarizeBy": "sum",
            "type": "calculated"
          },
          {
            "name": "ProcLevel_2",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "900ff90f-5a0b-4917-a7c2-ec0937abf029",
            "sourceColumn": "ProcLevel_2",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_3",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "6b9adeeb-abd2-44bb-84ba-8d9f095299ac",
            "sourceColumn": "ProcLevel_3",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_4",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9581d632-1374-45e0-bbb3-236d701c19ac",
            "sourceColumn": "ProcLevel_4",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_5",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e3a86f42-89ef-4efd-a945-ad341fb87057",
            "sourceColumn": "ProcLevel_5",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_6",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "af1d65ce-dc15-4841-9a7c-30f2f09b8d3a",
            "sourceColumn": "ProcLevel_6",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_7",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "ffb0041f-8d8b-43cd-a72f-a14c4f6a6abe",
            "sourceColumn": "ProcLevel_7",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_8",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "55960f53-27f5-4e9b-be43-06cebb747824",
            "sourceColumn": "ProcLevel_8",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_9",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9258e044-7e4e-4ea1-ae59-4ba9a6d67f77",
            "sourceColumn": "ProcLevel_9",
            "summarizeBy": "none"
          },
          {
            "name": "ProcLevel_10",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c2d7cb2b-30a0-4abc-9836-b685c68ebf5f",
            "sourceColumn": "ProcLevel_10",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "48f0a27a-67b9-4030-9bf6-18d1447367a6",
        "partitions": [
          {
            "name": "Tree:Processes:Target<Source-15fa2c40-0fd7-492f-8bd0-9ebca777678c",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let ",
                "\tNullTable = Table.FromRows( {}, ",
                "\t\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(0)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(1)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(2)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(3)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(4)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(5)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(6)",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(7)            ",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(8)                                    ",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(9)                                   ",
                "\t\t\t\t\t\t\t\t\t, SysName[ProcTreeNodeName] & Text.From(10)                                                                 ",
                "\t\t\t\t\t\t\t\t}",
                "\t),",
                "    ",
                "\tTreeNodeNames = List.Select(Table.ColumnNames(#\"Tree:Processes:Source>Target\"), each Text.StartsWith( _ , SysName[ProcTreeNodeName])),",
                "\tReversedTable = fn_reverseHierarchy(#\"Tree:Processes:Source>Target\", TreeNodeNames, \"HierarchyPath\")",
                "in",
                "    ReversedTable"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "PerformanceStats",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "Rule",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9c508b1d-d10c-4594-aa90-d1d810072855",
            "sourceColumn": "Rule",
            "summarizeBy": "none"
          },
          {
            "name": "SKIPCHECK",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "bad60cfe-4ddc-426b-9c06-f5869650ce7d",
            "sourceColumn": "SKIPCHECK",
            "summarizeBy": "none"
          },
          {
            "name": "FEEDERS",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "boolean",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "lineageTag": "6235a8af-5da1-448e-893d-102f399c1143",
            "sourceColumn": "FEEDERS",
            "summarizeBy": "none"
          },
          {
            "name": "IFs",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "int64",
            "lineageTag": "6d531f30-2f6b-4a96-955b-d86b54aa9a06",
            "sourceColumn": "IFs",
            "summarizeBy": "sum"
          },
          {
            "name": "Сonditional Feeders",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "dataType": "int64",
            "lineageTag": "931edbdc-f06a-4bcb-8ed9-65dd0302c02b",
            "sourceColumn": "Сonditional Feeders",
            "summarizeBy": "sum"
          },
          {
            "name": "Nested IFs",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "1d99297c-dc75-4721-877e-388266d72da4",
            "sourceColumn": "Nested IFs",
            "summarizeBy": "sum"
          },
          {
            "name": "Directional Feeders",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "95321fb6-c5ab-4a35-9f80-4c2aa9d2672b",
            "sourceColumn": "Directional Feeders",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "cd227d28-7127-4576-8049-b85004b6fb13",
        "partitions": [
          {
            "name": "PerformanceStats-b1f8ced3-ea65-4860-9676-01b1afaa4267",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[Name = text, SKIPCHECK = logical, FEEDERS = logical, Feeders = Int64.Type, IfCount = Int64.Type, NestedIfCount = Int64.Type, DirectionalFeedersCount = Int64.Type], {}),",
                "",
                "\tSource = Source_Rules,",
                "        RenameColumns = Table.RenameColumns(Source,{{\"Name\", \"Rule\"}}),",
                "\t",
                "\tSkipCheck = Table.AddColumn(RenameColumns, \"SKIPCHECK\", each Text.Contains([TextContent], Text.Upper(KeyWords[SkipcheckRef])), type logical),",
                "\tFeeders = Table.AddColumn(SkipCheck, \"FEEDERS\", each Text.Contains([TextContent], Text.Upper(KeyWords[FeederRef])), type logical),",
                "\tIfCount = Table.AddColumn(Feeders, \"IFs\", each List.Count(Splitter.SplitTextByDelimiter(\"IF(\", QuoteStyle.Csv)([TextContent])) - 1, Int64.Type),",
                "\tNestedIfCount = Table.AddColumn(IfCount, \"Nested IFs\", each fn_nestedExpressionsCount(Text.From([TextContent]), \"IF\", {\"IF\"}), Int64.Type),",
                "\tConditionalFeedersCount = Table.AddColumn(NestedIfCount, \"Сonditional Feeders\", each  List.Count(Splitter.SplitTextByDelimiter(\"IF(\", QuoteStyle.Csv)(Text.AfterDelimiter([TextContent], Text.Upper(KeyWords[FeederRef])))) - 1, Int64.Type),",
                "\tDirectionalFeedersCount = Table.AddColumn(ConditionalFeedersCount, \"Directional Feeders\", ",
                "\t\teach fn_nestedExpressionsCount(Text.AfterDelimiter([TextContent], Text.Upper(KeyWords[FeederRef])), KeyWords[RuleCubeRef]{0}, { KeyWords[RuleCubeRef]{0}, KeyWords[RuleAttrRef]{1} }), Int64.Type),",
                "    RemoveColumns = Table.RemoveColumns(DirectionalFeedersCount, {\"TextContent\", \"MetaData\"})",
                "in",
                "    RemoveColumns"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "SysStatusNo",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "changedProperties": [
          {
            "property": "IsHidden"
          }
        ],
        "columns": [
          {
            "name": "No",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "PBI_FormatHint",
                "value": "{\"isGeneralNumber\":true}"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "double",
            "lineageTag": "75c82b6b-9af8-4c70-b70c-3558c0932dde",
            "sourceColumn": "No",
            "summarizeBy": "sum"
          },
          {
            "name": "Description",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "changedProperties": [
              {
                "property": "IsHidden"
              }
            ],
            "dataType": "string",
            "lineageTag": "50cd41b9-be91-487c-b189-ef9779dbde76",
            "sourceColumn": "Description",
            "summarizeBy": "none"
          },
          {
            "name": "SymbolCode",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "4d65b705-3373-4c19-ae43-5bccc3648afa",
            "sourceColumn": "SymbolCode",
            "summarizeBy": "count"
          },
          {
            "name": "Symbol",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "expression": "UNICHAR([SymbolCode])",
            "isDataTypeInferred": true,
            "lineageTag": "43ff9c31-7ce5-4116-9fc0-26442f10a965",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "lineageTag": "e077cf34-0055-4447-a5a6-afc3bd61f050",
        "partitions": [
          {
            "name": "SysStatusNo-4c033fef-3dee-4db3-956e-d33700ba9a08",
            "mode": "import",
            "queryGroup": "SysData",
            "source": {
              "expression": [
                "let",
                "    Source = #table(type table[No = number, Description = text, SymbolCode = Int64.Type],",
                "        {",
                "              { 0, \"OK\",                    128994  }",
                "            , { 1, \"Some errors/ Warning\",  128993  }",
                "            , { 2, \"Failure/ Critical\",     128992  }",
                "            , { 3, \"Empty\",                 9898    }",
                "        }",
                "    )",
                "in",
                "    Source"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Tree:Feeders:Target<Source",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "CubeLevel_0",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "34b019e4-8d5b-45f7-b147-514f53f3fa2c",
            "sourceColumn": "CubeLevel_0",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "0f2c5ea1-8ebf-438f-b078-c8146b27806d",
            "sourceColumn": "CubeLevel_1",
            "summarizeBy": "none"
          },
          {
            "name": "HierarchyPath",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cc53e30c-96b2-4c7d-95b0-745dbc3c572a",
            "sourceColumn": "HierarchyPath",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_2",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e5ed9a13-c5f5-470c-b7a6-43a1c2763431",
            "sourceColumn": "CubeLevel_2",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_3",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f2a5f1b4-d507-40ad-83a3-c2943e7f2573",
            "sourceColumn": "CubeLevel_3",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_4",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a7376715-6c98-4398-9dc1-93b7a9ae917d",
            "sourceColumn": "CubeLevel_4",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_5",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "00d32e99-978f-43e6-8df9-7ac67d232bd4",
            "sourceColumn": "CubeLevel_5",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_6",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "025658ed-a049-4d39-bf69-6de2f9083b3b",
            "sourceColumn": "CubeLevel_6",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_7",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "604a0cbe-8775-4968-af4d-a0719d1ad9db",
            "sourceColumn": "CubeLevel_7",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_8",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "82ef5677-b16e-4041-929c-849d3823d6c5",
            "sourceColumn": "CubeLevel_8",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_9",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b1fd6c4c-a91f-4734-ae7e-e185f8421c4e",
            "sourceColumn": "CubeLevel_9",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_10",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "c97519cc-3641-4f6a-824e-438df70bb656",
            "sourceColumn": "CubeLevel_10",
            "summarizeBy": "none"
          },
          {
            "name": "PathLength",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "expression": "PATHLENGTH('Tree:Feeders:Target<Source'[HierarchyPath])",
            "formatString": "0",
            "isDataTypeInferred": true,
            "lineageTag": "6c3cd448-8968-49d1-aefc-24a5cf191b3a",
            "summarizeBy": "sum",
            "type": "calculated"
          }
        ],
        "lineageTag": "d7b453a6-1dd3-4d39-bd9e-35e7daa1f8e3",
        "partitions": [
          {
            "name": "Tree:Feeders:Target<Source-716187f0-ff8f-42c0-984a-ed919609ca13",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "\tNullTable = Table.FromRows( {}, ",
                "\t\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(0)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(1)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(2)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(3)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(4)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(5)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(6)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(7)            ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(8)                                    ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(9)                                   ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(10)                                                                 ",
                "\t\t\t\t\t\t\t\t}",
                "\t),",
                "    ",
                "\tTreeNodeNames = List.Select(Table.ColumnNames(#\"Tree:Feeders:Source>Target\"), each Text.StartsWith( _ , SysName[CubeTreeNodeName])),",
                "\tReversedTable = fn_reverseHierarchy(#\"Tree:Feeders:Source>Target\", TreeNodeNames, \"HierarchyPath\")",
                "in",
                "    ReversedTable"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "ValueToggle",
        "calculationGroup": {
          "calculationItems": [
            {
              "name": "Numbers",
              "expression": "SELECTEDMEASURE()",
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              },
              "ordinal": 1
            },
            {
              "name": "Markers",
              "expression": [
                "SELECTEDMEASURE()",
                ""
              ],
              "formatStringDefinition": {
                "expression": "SELECTEDMEASUREFORMATSTRING()"
              },
              "ordinal": 0
            }
          ],
          "precedence": 3
        },
        "columns": [
          {
            "name": "Metric",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "29302857-62e3-4b00-9261-26e0f4841eff",
            "sortByColumn": "Ordinal",
            "sourceColumn": "Name",
            "summarizeBy": "none"
          },
          {
            "name": "Ordinal",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "isHidden": true,
            "lineageTag": "615e2b9f-b76e-4e3f-bcdf-9ea4a8f203b9",
            "sourceColumn": "Ordinal",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "a7d843b2-348a-4cc9-b20b-2130cd0f9412",
        "partitions": [
          {
            "name": "Partition",
            "mode": "import",
            "source": {
              "type": "calculationGroup"
            }
          }
        ]
      },
      {
        "name": "FeedersProcessing",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "TimeStamp",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "11007234-65ef-4ea4-9759-76b7d9dbfead",
            "sourceColumn": "TimeStamp",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_45bf4bf2-be77-4a04-96f1-83e5771ea845"
                },
                "isDefault": true,
                "relationship": "29860615-6446-4d89-ad75-14113fb843b0"
              }
            ]
          },
          {
            "name": "Cube",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "9708ad6e-8fb4-4bc2-87bc-880a89dc89e6",
            "sourceColumn": "Cube",
            "summarizeBy": "none"
          },
          {
            "name": "msDuration",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "bc6309b0-3692-4ae6-ad31-9f3af7437b69",
            "sourceColumn": "msDuration",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "8d2df2c6-f219-4a7c-9137-4ecd242b1c7b",
        "partitions": [
          {
            "name": "FeedersProcessing-f1f8d4c9-d138-4680-a2fb-e0d9db019f24",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[TimeStamp = datetime, Message = text, msDuration = Int64.Type], {}),",
                "",
                "    FeedersProcessingLog = Source_MessageLog[[TimeStamp], [Message]],",
                "    MsgSelection = Table.SelectRows(FeedersProcessingLog, each Text.Contains( [Message], SysMessageLog[ProcessFeedersMsg] )),",
                "    AddCube = Table.AddColumn(",
                "        MsgSelection",
                "        , \"Cube\"",
                "        , each Text.BetweenDelimiters([Message], \"Done computing feeders for base cube '\", \"'.\")",
                "        , type text",
                "    ),",
                "    NameSelection = Table.SelectRows(AddCube, each ",
                "                                        let ",
                "                                            Name = [Cube], ",
                "                                            NameFilter = List.MatchesAny( KeyWords[SysMetaDataRef], each not Text.StartsWith( Name, _ ))",
                "                                        in ",
                "                                            NameFilter",
                "                ),",
                "    AddTime = Table.AddColumn(",
                "        NameSelection",
                "        , \"msDuration\"",
                "        , each try Number.FromText(Text.Trim(Text.BetweenDelimiters([Message], \"ProcessFeeders(in\", \"ms)\")), \"en-US\") otherwise 0",
                "        , Int64.Type",
                "    )",
                "   ",
                "in",
                "    AddTime[[TimeStamp], [Cube], [msDuration]]"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_45bf4bf2-be77-4a04-96f1-83e5771ea845",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "35645426-ff1d-4736-a3a0-0226b15e3709",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "cc88fa5f-9d8c-4036-bf79-fdcc43768506",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "872cf8aa-7d84-43e5-9a2d-6fc08055c8a8",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "55b939a1-9b22-47e1-bc06-c1e447891fd7",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "d04f3100-4c70-49d3-889f-e503f72a47f6",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "7993a7fc-ccec-47ae-88cd-39b2eae953a4",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "484f2c81-afe9-4ec9-b6e0-24083464100f",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "9e0f594e-e682-4873-8204-6ed3d3637992",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "12fa547b-48cc-4182-add8-bc88ed413ae2",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "f6fc5817-f1c0-493a-a886-c7ed0b92a1f9",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "f753a4ae-3d6d-4959-9ff9-a4af202a76f3",
                "ordinal": 3
              }
            ],
            "lineageTag": "83dcd799-be36-420d-9d2c-04ee466cc1d5"
          }
        ],
        "isHidden": true,
        "lineageTag": "3f1d337d-c09a-49c3-a433-3d89255f57ec",
        "partitions": [
          {
            "name": "LocalDateTable_45bf4bf2-be77-4a04-96f1-83e5771ea845-43b54fb5-23e6-496a-b6bf-c65d122917b4",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('FeedersProcessing'[TimeStamp])), 1, 1), Date(Year(MAX('FeedersProcessing'[TimeStamp])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "ModelElapsedTime",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "TimeStamp",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "dateTime",
            "formatString": "General Date",
            "lineageTag": "0bd73045-84f8-4a0d-8aa1-709fb546b3cb",
            "sourceColumn": "TimeStamp",
            "summarizeBy": "none",
            "variations": [
              {
                "name": "Variation",
                "defaultHierarchy": {
                  "hierarchy": "Date Hierarchy",
                  "table": "LocalDateTable_7d42e85f-721c-45bc-884d-f132081c47a6"
                },
                "isDefault": true,
                "relationship": "385333e0-64a3-4f9d-84e5-6dfd57febca7"
              }
            ]
          },
          {
            "name": "Time",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              },
              {
                "name": "UnderlyingDateTimeDataType",
                "value": "Time"
              }
            ],
            "dataType": "dateTime",
            "formatString": "Long Time",
            "lineageTag": "1b5bbdee-37d9-4dd1-91b1-9db9e7e93098",
            "sourceColumn": "Time",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "8ddf7702-2e76-4fd9-8d92-6ced4bf94ee8",
        "partitions": [
          {
            "name": "ModelElapsedTime-9fdf6cf4-abb7-44ce-954f-170ad41f134c",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    NullTable = #table(type table[TimeStamp = datetime, Time = time], {}),",
                "    ",
                "    FeedersProcessingLog = Source_MessageLog[[TimeStamp], [Message]],",
                "    MsgSelection = Table.SelectRows(FeedersProcessingLog, each Text.Contains( [Message], SysMessageLog[ElapsedTimeMsg] )),",
                "    AddSeconds = Table.AddColumn(",
                "        MsgSelection",
                "        , \"Seconds\"",
                "        , each try Number.FromText(Text.Trim(Text.BetweenDelimiters([Message], \"TM1 Server is ready, elapsed time\", \"seconds\")), \"en-US\") otherwise 0",
                "        , Int64.Type",
                "    ),",
                "    AddTime = Table.AddColumn(",
                "       AddSeconds",
                "       , \"Time\"",
                "       , each #time(0, 0, 0) + #duration(0, 0, 0, [Seconds])",
                "       , type time",
                "    )",
                "in",
                "    AddTime[[TimeStamp], [Time]]"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_7d42e85f-721c-45bc-884d-f132081c47a6",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "b4cd8851-4062-4448-9c77-6ced7abe3122",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "598c3954-7a83-46ae-ae07-35a3c2741d9b",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "6b76af68-dceb-4b49-a4b1-4ae876f2194c",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "39828d32-ab5e-42ae-8845-5f2d6c1f4f33",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "7ad13f0a-091a-49bb-b92c-9fa949be5faa",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "bb291d8d-45d2-4db2-bba8-7b5bd0b7e902",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "0b834572-6ee9-4ec2-adb3-b5ee397d1371",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "cef6cf26-31ce-4fba-961f-f2c80ce96d06",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "cb6cc41f-e122-442a-b8d2-0cc6fe673caf",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "430442b0-3b09-4b7b-89ed-ee008d440f3a",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "d7b1d745-0f49-4257-ae4d-f0cf78cf368c",
                "ordinal": 3
              }
            ],
            "lineageTag": "2b0eca45-c3c4-4063-9238-4a270fb9ccea"
          }
        ],
        "isHidden": true,
        "lineageTag": "0532788b-f10b-4d16-bef7-2422584be492",
        "partitions": [
          {
            "name": "LocalDateTable_7d42e85f-721c-45bc-884d-f132081c47a6-3eef0daf-4777-4fd3-8785-64ac983efa32",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('ModelElapsedTime'[TimeStamp])), 1, 1), Date(Year(MAX('ModelElapsedTime'[TimeStamp])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "Tree:Rules:Target<Source",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "CubeLevel_0",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e2a86f1c-3084-4187-9ab5-d649c4ee1eb7",
            "sourceColumn": "CubeLevel_0",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_1",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "f44cd1f6-433c-4ca6-83f9-9db6cf2743d1",
            "sourceColumn": "CubeLevel_1",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_1: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "cedd984b-b8b4-45c1-a93c-91a77b14a637",
            "sourceColumn": "CubeLevel_1: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "HierarchyPath",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "4f47bf4d-ca91-4ea4-86f0-83e0374bf198",
            "sourceColumn": "HierarchyPath",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_2",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "7d83b922-86fa-4b2c-a6a8-77f47bf95fb9",
            "sourceColumn": "CubeLevel_2",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_2: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "22b91835-5916-4b19-a788-abf435d4885f",
            "sourceColumn": "CubeLevel_2: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_3",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "accffcfa-b219-4b30-9b6a-f3f7e8771baa",
            "sourceColumn": "CubeLevel_3",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_3: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "1c413468-fce0-482f-809d-203850900164",
            "sourceColumn": "CubeLevel_3: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_4",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "654021cc-cce7-431f-9961-7f0bc374f394",
            "sourceColumn": "CubeLevel_4",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_4: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "819262ae-415f-4cc8-a0b7-02a81257879a",
            "sourceColumn": "CubeLevel_4: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_5",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "95bc0093-7312-4a57-ab93-535c5323e987",
            "sourceColumn": "CubeLevel_5",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_6",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "66bab855-a1dc-4c93-b83c-ac26f8c3d693",
            "sourceColumn": "CubeLevel_6",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_7",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e8293bf9-5d97-4564-91ce-9084f0f0e76a",
            "sourceColumn": "CubeLevel_7",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_8",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "8a10a3ee-f7e5-41ab-b60f-b906d8ed88c6",
            "sourceColumn": "CubeLevel_8",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_9",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "e72099f2-352c-4178-93b5-4ceb0406c01e",
            "sourceColumn": "CubeLevel_9",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_10",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "b4eb9f2d-9254-43c2-bf64-6e22bdc34404",
            "sourceColumn": "CubeLevel_10",
            "summarizeBy": "none"
          },
          {
            "name": "PathLength",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "expression": "PATHLENGTH('Tree:Rules:Target<Source'[HierarchyPath])",
            "formatString": "0",
            "isDataTypeInferred": true,
            "lineageTag": "bffc21cd-f4d3-433b-aab1-b076da1bc1e6",
            "summarizeBy": "sum",
            "type": "calculated"
          },
          {
            "name": "CubeLevel_5: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "70693113-eb96-4f45-a92d-0893b0298433",
            "sourceColumn": "CubeLevel_5: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_6: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "aa18b151-055c-4621-8d76-6100438b9d56",
            "sourceColumn": "CubeLevel_6: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_7: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d09de785-02c4-4512-8a33-3d6bd25da3d3",
            "sourceColumn": "CubeLevel_7: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_8: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "a3baf521-ddfc-41c0-a6ea-2aba97b25765",
            "sourceColumn": "CubeLevel_8: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_9: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "aadbf954-ed7e-41e6-9e21-47581cf7d258",
            "sourceColumn": "CubeLevel_9: Area definition",
            "summarizeBy": "none"
          },
          {
            "name": "CubeLevel_10: Area definition",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "string",
            "lineageTag": "d59a9e8c-296e-44b5-8939-eae1c12f09cb",
            "sourceColumn": "CubeLevel_10: Area definition",
            "summarizeBy": "none"
          }
        ],
        "lineageTag": "27957008-12d7-40b2-82ab-630ead75862f",
        "partitions": [
          {
            "name": "Tree:Rules:Target<Source-a2173619-6d82-4789-9896-da8df040da2a",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "\tNullTable = Table.FromRows( {}, ",
                "\t\t\t\t\t\t\t\t{",
                "\t\t\t\t\t\t\t\t\t\"HierarchyPath\"",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(0)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(1)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(2)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(3)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(4)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(5)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(6)",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(7)            ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(8)                                    ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(9)                                   ",
                "\t\t\t\t\t\t\t\t\t, SysName[CubeTreeNodeName] & Text.From(10)                                                                 ",
                "\t\t\t\t\t\t\t\t}",
                "\t),",
                "",
                "    ExtractRulesOnly = Table.TransformColumns(Source_Rules, { \"TextContent\", ( text ) => Text.BeforeDelimiter(text, Text.Upper(KeyWords[FeederRef])) }),",
                "    ParseTextContent = Table.AddColumn(",
                "                    ExtractRulesOnly",
                "                    , \"Definitions\"",
                "                    , each ",
                "                            let",
                "                                TextToParse = _[TextContent] ,",
                "                                Rows = Text.Split(TextToParse, \";\"),",
                "                                HasRelation = List.Select(Rows, each Text_ContainsAnyOf( _ , KeyWords[RuleCubeRef])),",
                "                                // 0 - Area definition (left), 1 - Formula (right)",
                "                                LeftRight = List.Transform(HasRelation, each if Text.Contains( _ , \"=\" ) then { Text.BeforeDelimiter( _ , \"=\", { 0, RelativePosition.FromStart }) } & { Text.AfterDelimiter( _ , \"=\", { 0, RelativePosition.FromStart }) } else null ),                           ",
                "                                RemoveNulls = List.Select(LeftRight, each _ <> null )",
                "                            in",
                "                                RemoveNulls",
                "",
                "    ),",
                " ExtractRelatedObjects = ",
                "        Table.TransformColumns(",
                "                                ParseTextContent,",
                "                                { ",
                "                                    \"Definitions\"",
                "                                    , each",
                "                                        let ",
                "                                            RelatedObjects = List.Transform( _ , ( map ) => { map{0}} & { fn_extractFunctionEntries( map{1}, KeyWords[RuleCubeRef], {0, 1, 1, 1, 1, 2} )} ),",
                "                                            MappingTables = List.Transform( RelatedObjects , ( map ) => Table.FromColumns( { map{1}, { map{0} } }, { \"RelatedObjects\", \"AreaDefinition\" }) ),",
                "                                            RemoveEmptyRelatedObjects = List.Transform( MappingTables , ( table ) => Table.SelectRows( table, each [RelatedObjects] <> null and Text.Trim([RelatedObjects]) <> \"\")),",
                "                                            AreaDefinitionFillDown = List.Transform( RemoveEmptyRelatedObjects , ( table ) => Table.FillDown( table, { \"AreaDefinition\" } )),",
                "                                            RemoveDuplicates = List.Distinct(AreaDefinitionFillDown),",
                "                                            ExpandMappingTable = Table.ExpandTableColumn(Table.FromList(RemoveDuplicates, Splitter.SplitByNothing(), {\"Definitions\"}, null, ExtraValues.Error), \"Definitions\", { \"RelatedObjects\", \"AreaDefinition\" }),",
                "                                            MappingTablesGrouping = Table.Group(ExpandMappingTable, {\"RelatedObjects\"}, {{ SysName[CubeTreeAreaDefinition], each Text.Combine( [AreaDefinition] , \"#(lf)\") }})",
                "                                        in",
                "                                            MappingTablesGrouping",
                "                                }",
                "    ),                                        ",
                "",
                "    MaxTreeDepth = fn_calcMaxTreeDepth(ExtractRelatedObjects[Definitions]),",
                "    ResultTable = fn_createHierarchyPath(ExtractRelatedObjects[[Name], [Definitions]], \"Name\", \"Definitions\", SysName[CubeTreeNodeName], MaxTreeDepth, {\"RelatedObjects\", SysName[CubeTreeAreaDefinition]})",
                "in",
                "    ResultTable"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "Tree:Rules:Details",
        "annotations": [
          {
            "name": "PBI_ResultType",
            "value": "Table"
          }
        ],
        "columns": [
          {
            "name": "CubeLevel_",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "Automatic"
              }
            ],
            "dataType": "int64",
            "formatString": "0",
            "lineageTag": "58273eac-c7ec-4ce2-81da-e7c0ed88f5b0",
            "sourceColumn": "CubeLevel_",
            "summarizeBy": "sum"
          }
        ],
        "lineageTag": "e9263e07-57f7-4316-8140-299e65a1690b",
        "partitions": [
          {
            "name": "Tree:Rules:Details-a5876215-7f28-4ee9-92ae-04961f3548b8",
            "mode": "import",
            "queryGroup": "Data\\UserData",
            "source": {
              "expression": [
                "let",
                "    Source = Table.FromList(List.Generate( () => 0, each _ < SettingsConfig[InterfaceMaxTreeDepth], each _ +1 ), Splitter.SplitByNothing(), { SysName[CubeTreeNodeName] }, null, ExtraValues.Ignore),",
                "    ChangeType = Table.TransformColumnTypes(Source,{{\"CubeLevel_\", Int64.Type}})",
                "in",
                "    ChangeType"
              ],
              "type": "m"
            }
          }
        ]
      },
      {
        "name": "LocalDateTable_0a6d63cb-0bf7-40e4-ba3d-f419d320cfe4",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "35e7429f-94e3-4df8-ba84-eeda97801529",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "c6c464bd-2bb4-4e77-a6f3-66b730cf3dd3",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "8ea78a25-7706-4900-91f3-8d1592b453f8",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "ee5bf367-2014-494e-b484-d97e18980db8",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "08f98ed8-df59-4014-882c-f9c9a505764f",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "369c9694-fd2f-4729-9cff-6e4b78540b0d",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "5c2c85d3-f035-4700-86d3-b28fc76efe5b",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "921d7233-b616-488f-b6a5-f8156ade3e00",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "0ae0e62f-02f4-454e-9262-565cf34f675b",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "3a57b6a8-c145-4d45-99c1-6ffedadf371c",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "04704f57-df92-4b0b-941a-99f1f644c9ad",
                "ordinal": 3
              }
            ],
            "lineageTag": "5649e23f-0d08-4787-96b1-1d832377a51c"
          }
        ],
        "isHidden": true,
        "lineageTag": "e7545f60-5afe-46dd-9092-4d9f1a685580",
        "partitions": [
          {
            "name": "LocalDateTable_0a6d63cb-0bf7-40e4-ba3d-f419d320cfe4-1836814f-8a53-48af-a2b8-06eded9bab6d",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('SysHttpRequestLog'[RequestStartTime])), 1, 1), Date(Year(MAX('SysHttpRequestLog'[RequestStartTime])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      },
      {
        "name": "LocalDateTable_f035155e-96fa-46b9-872c-c4374c8524dc",
        "annotations": [
          {
            "name": "__PBI_LocalDateTable",
            "value": "true"
          }
        ],
        "columns": [
          {
            "name": "Date",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              }
            ],
            "dataCategory": "PaddedDateTableDates",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "isHidden": true,
            "isNameInferred": true,
            "lineageTag": "7eaee345-a7d0-45e0-9688-4ae63aeefbaa",
            "sourceColumn": "[Date]",
            "summarizeBy": "none",
            "type": "calculatedTableColumn"
          },
          {
            "name": "Year",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Year"
              }
            ],
            "dataCategory": "Years",
            "dataType": "int64",
            "expression": "YEAR([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "a1d41aa0-da5d-487f-b600-a43d96c5debf",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "MonthNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "MonthNumber"
              }
            ],
            "dataCategory": "MonthOfYear",
            "dataType": "int64",
            "expression": "MONTH([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "0a098928-8ca6-40a9-90e4-d3765d8802ab",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Month",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Month"
              }
            ],
            "dataCategory": "Months",
            "dataType": "string",
            "expression": "FORMAT([Date], \"MMMM\")",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "42dbc801-e93a-4228-b3c1-5245c40d4359",
            "sortByColumn": "MonthNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "QuarterNo",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "QuarterNumber"
              }
            ],
            "dataCategory": "QuarterOfYear",
            "dataType": "int64",
            "expression": "INT(([MonthNo] + 2) / 3)",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "81fd8c2b-6715-4337-b443-a22850fcb763",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Quarter",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Quarter"
              }
            ],
            "dataCategory": "Quarters",
            "dataType": "string",
            "expression": "\"Qtr \" & [QuarterNo]",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "13c5ba52-f393-48f4-993b-f5e9722e1b87",
            "sortByColumn": "QuarterNo",
            "summarizeBy": "none",
            "type": "calculated"
          },
          {
            "name": "Day",
            "annotations": [
              {
                "name": "SummarizationSetBy",
                "value": "User"
              },
              {
                "name": "TemplateId",
                "value": "Day"
              }
            ],
            "dataCategory": "DayOfMonth",
            "dataType": "int64",
            "expression": "DAY([Date])",
            "isDataTypeInferred": true,
            "isHidden": true,
            "lineageTag": "6362d4e4-faef-4d9d-8cd2-58bb6a9d7db3",
            "summarizeBy": "none",
            "type": "calculated"
          }
        ],
        "hierarchies": [
          {
            "name": "Date Hierarchy",
            "annotations": [
              {
                "name": "TemplateId",
                "value": "DateHierarchy"
              }
            ],
            "levels": [
              {
                "name": "Year",
                "column": "Year",
                "lineageTag": "e750e182-3278-49d1-87d0-2bbc15a7f2c4",
                "ordinal": 0
              },
              {
                "name": "Quarter",
                "column": "Quarter",
                "lineageTag": "9091b6b1-61fb-4d0d-b908-0045f1608b7e",
                "ordinal": 1
              },
              {
                "name": "Month",
                "column": "Month",
                "lineageTag": "88f09d20-6ebb-4b8f-8964-5b9468952deb",
                "ordinal": 2
              },
              {
                "name": "Day",
                "column": "Day",
                "lineageTag": "33a1fda8-e10b-4a8e-8ea6-9c7d65934d1f",
                "ordinal": 3
              }
            ],
            "lineageTag": "0f9bcf24-8434-42ee-a120-41cf40ef0f29"
          }
        ],
        "isHidden": true,
        "lineageTag": "7029f359-2c19-4fba-9789-a9b0163d823d",
        "partitions": [
          {
            "name": "LocalDateTable_f035155e-96fa-46b9-872c-c4374c8524dc-143e13a7-89e3-40f7-84c0-e2864f297839",
            "mode": "import",
            "source": {
              "expression": "Calendar(Date(Year(MIN('SysHttpRequestLog'[RequestResponseTime])), 1, 1), Date(Year(MAX('SysHttpRequestLog'[RequestResponseTime])), 12, 31))",
              "type": "calculated"
            }
          }
        ],
        "showAsVariationsOnly": true
      }
    ]
  }
}